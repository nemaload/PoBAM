%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Fig2.pdf
%%Creator: (Adobe Acrobat 11.0.3)
%%For: davidad
%%CreationDate: 6/24/13, 9:33 AM
%%BoundingBox: 0 0 393 312
%%HiResBoundingBox: 0 0 392.6010 311.2030
%%CropBox: 0 0 392.6010 311.2030
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1029 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="GPL Ghostscript 905 (ps2write)"
   xmp:CreateDate="2013-06-24T09:29:45-07:00"
   xmp:ModifyDate="2013-06-24T09:29:45-07:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 11.0 (Macintosh)"
   xmpMM:DocumentID="uuid:80580fbd-645b-fa43-94f7-231156575b2a"
   xmpMM:InstanceID="uuid:8f5a42e7-1802-2e47-bd9c-c02471744ff3">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">untitled</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>davidad</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceRGB] /CSA add_res
null null set_ucrbg
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -311.203 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 311.203 li
392.601 311.203 li
392.601 0 li
cp
clp
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
36.827 284.772 mo
360.207 284.772 li
360.207 30.91 li
36.827 30.91 li
cp
false sop
null null set_ucrbg
1 1 1 rgb
@
36.827 30.91 mo
360.207 30.91 li
null null set_ucrbg
.167046 .159461 .162795 rgb
@
36.827 284.772 mo
360.207 284.772 li
360.207 30.91 li
@
36.827 284.772 mo
36.827 30.91 li
@
36.827 284.772 mo
360.207 284.772 li
@
36.827 284.772 mo
36.827 30.91 li
@
36.827 284.772 mo
36.827 281.047 li
@
36.827 30.91 mo
36.827 34.013 li
@
%ADOBeginSubsetFont: QAHAAA+ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /QAHAAA+ArialMT def/FontInfo 6 dict dup begin/ItalicAngle 0 def/BaseFontName (ArialMT) def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PWYLKF+ArialMT /QAHAAA+ArialMT findfont ct_VMDictPut/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one 206{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf29.3789 297.151 mo(10)[5.557 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf39.9309 291.564 mo(0)sh36.827 284.772 mo
36.827 284.772 li
@
101.379 284.772 mo
101.379 281.047 li
@
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one /two 205{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf93.931 297.151 mo(10)[5.557 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf104.482 291.564 mo(2)sh36.827 284.772 mo
36.827 284.772 li
@
165.931 284.772 mo
165.931 281.047 li
@
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one /two /.notdef /four 203{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf158.483 297.151 mo(10)[5.55699 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf169.035 291.564 mo(4)sh36.827 284.772 mo
36.827 284.772 li
@
230.484 284.772 mo
230.484 281.047 li
@
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF193628C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766FA7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six 201{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf223.034 297.151 mo(10)[5.55699 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf233.586 291.564 mo(6)sh36.827 284.772 mo
36.827 284.772 li
@
295.034 284.772 mo
295.034 281.047 li
@
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F603BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A55977C35> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf287.586 297.151 mo(10)[5.55701 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf298.138 291.564 mo(8)sh36.827 284.772 mo
36.827 284.772 li
@
360.207 284.772 mo
360.207 281.047 li
@
360.207 30.91 mo
360.207 34.013 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf350.277 297.151 mo(10)[5.55701 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf360.829 291.564 mo(10)[3.70468 0 ]xsh36.827 284.772 mo
39.931 284.772 li
@
360.207 284.772 mo
356.483 284.772 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf15.7242 288.496 mo(10)[5.557 0 ]xsh%ADOBeginSubsetFont: PWYLKG+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /PWYLKG+ def
/FontMatrix [1 0 0 1 0 0 ] def
/FontBBox [-3 -49 36 0 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /a0 put
dup 33 /a1 put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice}bind def
/a0 {38.9 0 -3 -28 36 -22 setcachedevice-3 -28 mo
36 -28 li
36 -22 li
-3 -22 li
cp
false sop
gsave
clp
[1 0 0 -1 0 311.203 ]ct
[39 0 0 -6 -3 339.203 ]ct
<<
/T 1
/W 39 
/H 6 
/M[39 0 0 -6 0 6 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~rVuou!<)ru!!)uu!!!#u!!!!!rVuou!<)ru!!!~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/a1 {37.1 0 -3 -49 35 0 setcachedevice-3 -49 mo
35 -49 li
35 0 li
-3 0 li
cp
false sop
gsave
clp
[1 0 0 -1 0 311.203 ]ct
[38 0 0 -49 -3 360.203 ]ct
<<
/T 1
/W 38 
/H 49 
/M[38 0 0 -49 0 49 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3Vr[KDY3B!!C'0J,fuqn,NGSSe2(brP9$d5M-)3!-/!gJ%PfCoF)4!"+S'2n+Z;`rWe_i+4CO3p`Ba1
:+#H)N:)#tISZn!$)C%("F`rh[$aW2""&_ojA<)W!''lZ7O:o%i&W"YTV*I7B)k*j3L%bG<dBCrgBOKI
XtTWunm*QR8*&'tP`@Z[O#R,I#kUdk)2E_dYNl$*#6p(khiJB~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/PWYLKH+ /PWYLKG+ findfont ct_VMDictPut/PWYLKH+*1 [32{/.notdef}rp /a0 /a1 222{/.notdef}rp]PWYLKH+ nfPWYLKH+*1 [.1 0 0 .1 0 0 ]msf26.2 283.003 mo( !)[3.89999 0 ]xsh1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
36.827 284.772 mo
36.827 284.772 li
false sop
null null set_ucrbg
.167046 .159461 .162795 rgb
@
36.827 241.944 mo
39.931 241.944 li
@
360.207 241.944 mo
356.483 241.944 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf15.7242 245.669 mo(10)[5.557 0 ]xsh%ADOBeginSubsetFont: PWYLKG+ AddGlyphs
systemdict begin PWYLKH+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a2 {37.1 0 -3 -47 35 0 setcachedevice-3 -47 mo
35 -47 li
35 0 li
-3 0 li
cp
false sop
gsave
clp
[1 0 0 -1 0 311.203 ]ct
[38 0 0 -47 -3 358.203 ]ct
<<
/T 1
/W 38 
/H 47 
/M[38 0 0 -47 0 47 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3Vsc#NQ3k"G9#`E*-?l)$br6U(HO0huOVo7ACHn]Q,eFO2f$+#N-Xo",K1<&:b0`!A6UR(_[`:J:@iL
#Nl*^6fN@pP/8ME+:KY!$:$qF":/K;!=WpGi(j]Dr[ePZ^n6lnoi;#uY95#CpB0sf~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/PWYLKH+*1 [32{/.notdef}rp /a0 /a1 /a2 221{/.notdef}rp]PWYLKH+ nfPWYLKH+*1 [.1 0 0 .1 0 0 ]msf26.2 240.203 mo( )sh30.1 240.103 mo(")sh1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
36.827 284.772 mo
36.827 284.772 li
false sop
null null set_ucrbg
.167046 .159461 .162795 rgb
@
36.827 199.738 mo
39.931 199.738 li
@
360.207 199.738 mo
356.483 199.738 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf15.7242 203.462 mo(10)[5.557 0 ]xsh%ADOBeginSubsetFont: PWYLKG+ AddGlyphs
systemdict begin PWYLKH+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a3 {37.1 0 -3 -48 34 0 setcachedevice-3 -48 mo
34 -48 li
34 0 li
-3 0 li
cp
false sop
gsave
clp
[1 0 0 -1 0 311.203 ]ct
[37 0 0 -48 -3 359.203 ]ct
<<
/T 1
/W 37 
/H 48 
/M[37 0 0 -48 0 48 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~J3O#F0E_^h#(aVk&*P8k)ZKiQhsZ?q"sjsK7Gm;2r([1++30lPq")9C*dg@bO3"\+)'49X&+N3crb3UG
8Z%Q!4ONp+RQl<Y8W=;^G_nr2'UJtU,k)4?C)!#M,*Ml)7&q&KbPkfQY<qRea7Y%hAUiCm27Z^j/Q7Zh
.OY9N!g^WQdMrfXUYl/?["'O/.0JQ2~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/PWYLKH+*1 [32{/.notdef}rp /a0 /a1 /a2 /a3 220{/.notdef}rp]PWYLKH+ nfPWYLKH+*1 [.1 0 0 .1 0 0 ]msf26.2 198.003 mo( )sh30.1 197.903 mo(#)sh1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
36.827 284.772 mo
36.827 284.772 li
false sop
null null set_ucrbg
.167046 .159461 .162795 rgb
@
36.827 157.531 mo
39.931 157.531 li
@
360.207 157.531 mo
356.483 157.531 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf15.7242 161.255 mo(10)[5.557 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf26.2758 155.668 mo(0)sh36.827 284.772 mo
36.827 284.772 li
@
36.827 115.324 mo
39.931 115.324 li
@
360.207 115.324 mo
356.483 115.324 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf15.7242 119.048 mo(10)[5.557 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf26.2758 113.462 mo(2)sh36.827 284.772 mo
36.827 284.772 li
@
36.827 73.117 mo
39.931 73.117 li
@
360.207 73.117 mo
356.483 73.117 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf15.7242 76.841 mo(10)[5.557 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf26.2758 71.255 mo(4)sh36.827 284.772 mo
36.827 284.772 li
@
36.827 30.91 mo
39.931 30.91 li
@
360.207 30.91 mo
356.483 30.91 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf15.7242 34.634 mo(10)[5.557 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf26.2758 29.047 mo(6)sh36.827 284.772 mo
36.827 284.772 li
@
36.827 30.91 mo
360.207 30.91 li
@
36.827 284.772 mo
360.207 284.772 li
360.207 30.91 li
@
36.827 284.772 mo
36.827 30.91 li
@
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/W <1C60D8A8C9B5D6EF420A3AC101C9354A948DB23A64166EB3D55EEB13F0DE3A88231C2286900994060E46C1096C7ABFBA281AAEB86123AF398A1FE8A551414253B8F3844EF59084BCE1B4D5AF071FD672A0C8C15E821130EADB430FA7E525278C31C213B6FF1A25> |-/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177B5D88A> |-/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C37295284C077711C162623860AACA404F650F8D516970257> |-/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/v <1C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D9162B37724F74F272B140D258652D102C2EAC46833C73F9> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 87 /W putdup 97 /a putdup 101 /e putdup 108 /l putdup 110 /n putdup 118 /v putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 30{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e 6{/.notdef}rp /l /.notdef /n 7{/.notdef}rp /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [12 0 0 -12 0 0 ]msf153.145 308.806 mo(Wavelen)[11.3256 6.66959 5.9976 6.6696 2.66159 6.6696 0 ]xshgsave
0 -5.383 mo
378.5 -5.383 li
378.5 311.143 li
0 311.143 li
cp
clp
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A065D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D559B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C247BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD88F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF575C72F67F4BEBB98F8AFA57505EC9> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 103 /g putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 30{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g 4{/.notdef}rp /l /.notdef /n 7{/.notdef}rp /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [12 0 0 -12 0 0 ]msf199.818 308.806 mo(g)shgrestore
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E131450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41AC970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DFA8> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 104 /h putdup 116 /t putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 30{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 3{/.notdef}rp /l /.notdef /n 5{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [12 0 0 -12 0 0 ]msf206.488 308.806 mo(th)[3.336 0 ]xshgsave
0 -5.383 mo
378.5 -5.383 li
378.5 311.143 li
0 311.143 li
cp
clp
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A577DC235F833AFCC30669C812FBF097879E1> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 40 /parenleft putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft 7{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 30{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 3{/.notdef}rp /l /.notdef /n 5{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [12 0 0 -12 0 0 ]msf219.834 308.806 mo(\()shgrestore
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 109 /m putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft 7{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 30{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 3{/.notdef}rp /l /m /n 5{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [12 0 0 -12 0 0 ]msf223.83 308.806 mo(nm)[6.6684 0 ]xshgsave
0 -5.383 mo
378.5 -5.383 li
378.5 311.143 li
0 311.143 li
cp
clp
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D4714AF52ABD0227B6CDD854C568D5A6F3817645C5> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 41 /parenright putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 30{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 3{/.notdef}rp /l /m /n 5{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [12 0 0 -12 0 0 ]msf240.496 308.806 mo(\))shgrestore
gsave
0 -480.797 mo
612 -480.797 li
612 311.143 li
0 311.143 li
cp
clp
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B854D0D18501A7E07A7DB7C8496D0849EBF5F0BA> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 47 /slash putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 30{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 3{/.notdef}rp /l /m /n 5{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 232.013 mo(1/)[-6.6684 0 ]yshgrestore
PWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 222.004 mo(e)shgsave
0 -480.797 mo
612 -480.797 li
612 311.143 li
0 311.143 li
cp
clp
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EFBF59B4862165C7DEA15B42BE3811C2CAA25C54> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 80 /P putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 23{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 3{/.notdef}rp /l /m /n 5{/.notdef}rp /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 211.996 mo(P)shgrestore
PWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 203.992 mo(ene)[-6.6684 -6.6684 0 ]yshgsave
0 -480.797 mo
612 -480.797 li
612 311.143 li
0 311.143 li
cp
clp
PWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 183.982 mo(t)shgrestore
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE112857894FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619ADD420F549AB7C795751D32E8EE6> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 114 /r putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 23{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h 3{/.notdef}rp /l /m /n 3{/.notdef}rp /r /.notdef /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 180.644 mo(ra)[-3.99591 0 ]yshgsave
0 -480.797 mo
612 -480.797 li
612 311.143 li
0 311.143 li
cp
clp
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B171C8A80AB> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 105 /i putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 23{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n 3{/.notdef}rp /r /.notdef /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 169.978 mo(ti)[-3.3396 0 ]yshgrestore
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A987875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F518C54BB58C51D6FB6D0C8> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 111 /o putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 23{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /.notdef /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 163.978 mo(on)[-6.6684 0 ]yshgsave
0 -480.797 mo
612 -480.797 li
612 311.143 li
0 311.143 li
cp
clp
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489068CBF65F37E7CD4C7284AEAF641D010DF> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 68 /D putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 11{/.notdef}rp /D 11{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /.notdef /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 147.299 mo(D)shgrestore
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B96470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 112 /p putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [40{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 11{/.notdef}rp /D 11{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /.notdef /v 137{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 138.637 mo(ep)[-6.6684 0 ]yshgsave
0 -480.797 mo
612 -480.797 li
612 311.143 li
0 311.143 li
cp
clp
PWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 125.297 mo(th\()[-3.3396 -10.0068 0 ]yshgrestore
PWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 107.955 mo(mm)[-9.99591 0 ]yshgsave
0 -480.797 mo
612 -480.797 li
612 311.143 li
0 311.143 li
cp
clp
PWYLKF+ArialMT*1 [0 -12 -12 0 0 0 ]msf8.2773 87.963 mo(\))shgrestore
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B854D00D> |-/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F7F6ED1937D1E8A10> |-/H <1C60D8A8C9B6079F62EE7568E8B09CBA01F57B4ACE6DA24AC6EA79287DF31270F7DC42D147A6FAB1DABB6C> |-/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D36548FE63FC8465B1B685766E782F0> |-/q <1C60D8A8C9B7EF322408646A760FED70F2D8214740020E61993A1FFE89574C96FDDD947618591671EEE89936F7D0F90E6B11CE96BDCBF7B2C20479CB610D934D0AFBB0721CA3EA49A2D6AB8F9A4A9273E60BD1ACDAB1F7447DBAAB4DD124EC36ECC57CEC13712AB1CAC8625150F69DBA3C4F574D88196863F5C61CC51A61AE68D44A27F86FFD139CDEF75DF80AB81E> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA7348AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-/z <1C60D8A8C9B7A73DB6C93834605F1D90D79F2E671A4623D994B1E45F8ED5E64C2946ED425A1EC23463E621AF43221A3EAC2BEEDD9B1D3783E2> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 32 /space putdup 70 /F putdup 72 /H putdup 99 /c putdup 113 /q putdup 117 /u putdup 121 /y putdup 122 /z putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 11{/.notdef}rp /D /.notdef /F /.notdef /H 7{/.notdef}rp /P 6{/.notdef}rp /W 9{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /.notdef /t /u /v 2{/.notdef}rp /y /z 133{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [12 0 0 -12 0 0 ]msf157.484 13.807 mo(Frequency \(Hz\))[7.3307 3.99472 6.67079 6.67079 6.67081 6.67079 6.67079 5.99881 5.99878 3.3396 3.99472 8.6628 5.99879 0 ]xsh1.118 lw
343.107 31.06 mo
343.107 34.282 li
@
278.102 31.06 mo
278.102 34.282 li
@
213.097 31.06 mo
213.097 34.282 li
@
148.094 31.06 mo
148.094 34.282 li
@
83.09 31.06 mo
83.09 34.282 li
@
PWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf74.107 29.366 mo(10)[5.557 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf84.6582 23.779 mo(16)[3.70468 0 ]xshPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf139.111 29.366 mo(10)[5.55699 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf149.662 23.779 mo(14)[3.70468 0 ]xshPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf204.113 29.366 mo(10)[5.55699 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf214.665 23.779 mo(12)[3.70468 0 ]xshPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf269.119 29.366 mo(10)[5.55701 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf279.671 23.779 mo(10)[3.70468 0 ]xshPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf335.977 29.366 mo(10)[5.55701 0 ]xshPWYLKF+ArialMT*1 [6.6667 0 0 -6.6667 0 0 ]msf346.529 23.779 mo(8)sh2 lw
[6 6 ] 0 dsh
171.27 211.245 mo
173.133 211.245 li
173.753 210.624 li
174.374 210.004 li
174.995 209.383 li
175.615 208.762 li
178.098 206.279 li
180.581 203.176 li
183.063 200.693 li
184.926 200.693 li
186.788 201.314 li
188.029 201.935 li
190.512 201.314 li
192.995 200.073 li
194.857 198.831 li
196.719 196.969 li
197.96 195.107 li
202.305 192.004 li
206.65 189.521 li
210.374 188.279 li
212.857 187.038 li
216.581 185.797 li
220.305 184.556 li
222.788 183.935 li
227.133 182.693 li
230.857 181.452 li
236.443 180.211 li
240.788 179.59 li
243.891 178.349 li
246.374 177.728 li
248.236 177.107 li
250.098 176.486 li
251.96 175.866 li
253.822 175.245 li
255.062 174.624 li
256.305 174.004 li
256.926 173.383 li
258.167 172.762 li
259.408 172.141 li
260.029 171.521 li
261.27 170.9 li
261.891 170.279 li
262.512 170.279 li
263.133 169.659 li
268.719 165.314 li
273.062 161.591 li
276.167 158.486 li
278.65 155.384 li
281.133 152.9 li
282.995 150.417 li
284.236 148.556 li
286.098 146.693 li
287.34 145.452 li
288.581 143.59 li
289.822 142.348 li
290.443 141.107 li
291.684 139.866 li
292.305 138.624 li
293.546 137.383 li
294.167 136.762 li
294.788 135.521 li
295.408 134.9 li
300.995 127.452 li
305.34 122.486 li
308.443 118.141 li
310.926 115.038 li
313.408 111.934 li
315.27 109.452 li
316.512 107.59 li
318.374 105.728 li
319.615 103.866 li
320.857 102.004 li
322.098 100.762 li
322.719 99.521 li
323.96 98.279 li
324.581 97.038 li
325.822 95.797 li
326.443 94.555 li
327.064 93.934 li
327.685 92.693 li
333.891 85.245 li
337.615 80.279 li
340.719 75.934 li
343.202 72.831 li
345.685 69.728 li
347.546 67.245 li
348.788 65.383 li
350.65 63.521 li
351.891 61.659 li
353.133 60.417 li
354.374 58.555 li
354.995 57.314 li
356.236 56.072 li
356.857 54.831 li
358.098 53.59 li
358.719 52.969 li
359.34 51.728 li
360.581 51.107 li
120.995 66.624 mo
121.615 63.521 li
122.857 59.797 li
123.477 57.934 li
124.098 59.797 li
124.719 64.762 li
125.339 67.866 li
125.96 71.59 li
126.581 79.659 li
127.201 83.383 li
127.822 84.004 li
128.443 85.866 li
129.063 89.59 li
129.684 98.9 li
129.684 103.245 li
130.305 102.624 li
130.926 100.762 li
130.926 103.866 li
131.546 107.59 li
132.167 110.073 li
132.167 111.934 li
132.788 118.762 li
133.408 128.073 li
133.408 129.314 li
134.029 127.452 li
134.65 120.624 li
135.27 121.866 li
135.891 136.762 li
136.512 138.624 li
137.133 137.383 li
137.753 139.245 li
138.374 149.177 li
138.374 160.97 li
138.995 168.417 li
139.615 163.452 li
140.236 158.486 li
140.236 154.763 li
140.857 152.9 li
141.478 152.9 li
141.478 154.763 li
142.098 165.936 li
142.719 159.728 li
142.719 176.486 li
143.339 180.831 li
143.339 175.866 li
143.96 170.9 li
144.581 167.176 li
144.581 164.693 li
145.201 164.073 li
145.201 164.693 li
145.822 166.555 li
145.822 169.038 li
146.443 172.142 li
146.443 175.866 li
147.063 178.349 li
147.063 180.831 li
147.684 185.176 li
147.684 197.59 li
148.305 206.9 li
148.305 217.452 li
148.926 220.556 li
148.926 223.038 li
149.546 222.417 li
150.167 211.866 li
151.408 193.245 li
152.029 180.831 li
153.27 181.452 li
153.891 185.797 li
155.133 189.521 li
155.753 192.004 li
156.374 190.142 li
156.995 187.038 li
157.615 187.659 li
158.236 192.624 li
158.857 205.659 li
159.478 205.659 li
160.098 198.831 li
160.719 196.349 li
161.339 195.107 li
161.96 194.486 li
164.443 194.486 li
165.063 195.107 li
165.684 195.728 li
166.305 196.349 li
166.926 197.59 li
166.926 198.831 li
167.546 200.693 li
167.546 201.936 li
168.167 203.797 li
168.167 205.038 li
168.788 206.279 li
168.788 207.521 li
169.408 208.762 li
169.408 209.383 li
170.65 210.624 li
170.65 211.245 li
171.27 211.245 li
69.477 228.624 mo
71.96 232.349 li
73.822 235.452 li
77.546 240.418 li
80.029 244.762 li
82.512 247.866 li
84.374 250.969 li
86.236 253.452 li
88.098 255.936 li
89.339 257.797 li
90.581 259.659 li
91.822 260.9 li
93.063 261.521 li
93.684 261.521 li
94.926 262.762 li
95.546 264.004 li
96.788 264.004 li
97.408 263.383 li
99.27 263.383 li
99.891 262.762 li
100.512 262.142 li
101.133 260.9 li
101.753 259.659 li
102.374 258.418 li
102.995 257.176 li
103.615 255.936 li
103.615 255.314 li
104.236 254.073 li
104.856 253.452 li
105.477 250.349 li
105.477 245.383 li
106.098 244.762 li
106.719 247.245 li
106.719 249.107 li
107.339 250.349 li
107.339 249.107 li
107.96 246.624 li
108.581 242.9 li
108.581 236.693 li
109.201 210.004 li
109.201 198.831 li
109.822 170.9 li
110.443 123.728 li
111.063 111.934 li
111.684 102.004 li
112.926 90.211 li
114.167 87.728 li
116.029 82.762 li
117.27 78.417 li
117.891 74.693 li
119.133 72.211 li
120.374 69.728 li
120.995 66.624 li
null null set_ucrbg
.291759 .332266 .612882 rgb
@
1 lw
[] 0 dsh
126.581 183.176 mo
147.063 183.176 li
147.063 151.659 li
126.581 151.659 li
cp
null null set_ucrbg
.167046 .159461 .162795 rgb
@
[6 6 ] 0 dsh
37.201 144.831 mo
360.581 144.831 li
@
169.7 261.4 mo
348.548 261.4 li
348.548 224.836 li
169.7 224.836 li
cp
null null set_ucrbg
1 1 1 rgb
f
0 lj
[] 0 dsh
169.7 261.4 mo
348.548 261.4 li
348.548 224.836 li
169.7 224.836 li
cp
null null set_ucrbg
.167046 .159461 .162795 rgb
@
2 lw
1 lj
[6 6 ] 0 dsh
172.013 230.026 mo
203.049 230.026 li
null null set_ucrbg
.291759 .332266 .612882 rgb
@
[] 0 dsh
172.013 242.44 mo
203.049 242.44 li
null null set_ucrbg
.686728 .170022 .176629 rgb
@
172.013 253.855 mo
203.049 253.855 li
null null set_ucrbg
.592686 .731567 .347153 rgb
@
null null set_ucrbg
.167046 .159461 .162795 rgb
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB29ACC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D4582208BD16D82> |-/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDFA8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D314851DE59> |-/E <1C60D8A8C9B64EDFFB83C6241DB110BEE5AB2FAD9D94B39ED5E81E7411B66E9361DDE78FC667AB91EF9824> |-/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB379AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F80AF5A83421F8F> |-/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A96A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |-/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF626A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA1EAAF79B76AA2B52CCF0307B360E6D> |-/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D9621458876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C5663BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD96538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB3287CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B8435558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F4172D53C8FCAF4D28F2B78D3A4BF03> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 65 /A putdup 67 /C putdup 69 /E putdup 77 /M putdup 83 /S putdup 98 /b putdup 100 /d putdup 102 /f putdup 115 /s putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C /D /E /F /.notdef /H 4{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S 3{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y /z 133{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf206.152 233.371 mo(Water Absorption)[9.439 5.55901 2.77899 5.55901 3.32892 2.783 6.66907 5.55901 4.99899 5.55901 3.32892 5.55899 2.77899 2.21902 5.55899 0 ]xsh206.152 245.781 mo(Mie Scattering Simulation)[8.32793 2.218 5.558 2.78299 6.66808 4.998 5.558 2.778 2.778 5.558 3.32794 2.21799 5.55801 5.55798 2.78299 6.66809 2.21802 8.32791 5.55798 2.21802 5.55798 2.77798 2.21802 5.55798 0 ]xsh206.152 258.191 mo(Combined Effective Attenuation)[7.21899 5.55901 8.32892 5.55901 2.21899 5.55901 5.55899 5.55899 2.783 6.66908 2.77899 2.77899 5.55899 4.99902 2.77899 2.21899 4.99899 5.55899 2.78302 6.66907 2.77899 2.77899 5.55902 5.55899 5.55899 5.55899 2.77902 2.21899 5.55896 0 ]xsh221.305 139.606 mo
342.003 139.606 li
342.003 40.434 li
221.305 40.434 li
cp
null null set_ucrbg
1 1 1 rgb
f
null null set_ucrbg
.167046 .159461 .162795 rgb
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf221.502 137.615 mo(600)[4.4456 4.44559 0 ]xsh1 lw
239.01 44.099 mo
239.01 45.135 li
@
249.773 128.638 mo
249.773 127.396 li
@
249.773 44.099 mo
249.773 45.135 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf240.874 137.615 mo(1000)[4.4456 4.44559 4.4456 0 ]xsh260.533 44.099 mo
260.533 45.135 li
@
271.294 128.638 mo
271.294 127.396 li
@
271.294 44.099 mo
271.294 45.135 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf262.396 137.615 mo(1400)[4.44559 4.44562 4.44559 0 ]xsh282.057 44.099 mo
282.057 45.135 li
@
292.818 128.638 mo
292.818 127.396 li
@
292.818 44.099 mo
292.818 45.135 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf283.92 137.615 mo(1800)[4.44559 4.44562 4.44559 0 ]xsh303.579 44.099 mo
303.579 45.135 li
@
314.341 128.638 mo
314.341 127.396 li
@
314.341 44.099 mo
314.341 45.135 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf305.443 137.615 mo(2200)[4.44559 4.44562 4.44559 0 ]xsh325.102 44.099 mo
325.102 45.135 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf327.172 137.615 mo(2600)[4.44559 4.44562 4.44559 0 ]xsh227.982 120.938 mo
229.018 120.938 li
@
336.07 120.938 mo
334.829 120.938 li
@
336.07 112.246 mo
334.829 112.246 li
@
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 46 /period putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C /D /E /F /.notdef /H 4{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S 3{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v 2{/.notdef}rp /y /z 133{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf215.365 123.748 mo(0.4)sh227.982 103.761 mo
229.018 103.761 li
@
336.07 103.761 mo
334.829 103.761 li
@
336.07 95.276 mo
334.829 95.276 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf215.365 106.545 mo(0.8)sh227.982 86.791 mo
229.018 86.791 li
@
336.07 86.791 mo
334.829 86.791 li
@
336.07 78.306 mo
334.829 78.306 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf215.365 89.576 mo(1.2)sh227.982 69.821 mo
229.018 69.821 li
@
336.07 69.821 mo
334.829 69.821 li
@
336.07 61.336 mo
334.829 61.336 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf215.365 72.372 mo(1.6)sh227.982 52.851 mo
229.018 52.851 li
@
336.07 52.851 mo
334.829 52.851 li
@
PWYLKF+ArialMT*1 [8 0 0 -8 0 0 ]msf222.037 55.635 mo(2)sh2 lw
[2.001 2.001 ] 0 dsh
297.784 120.524 mo
297.163 115.97 li
296.75 109.555 li
296.336 102.312 li
296.129 96.103 li
295.509 91.137 li
295.301 87.204 li
294.888 85.549 li
294.472 84.1 li
294.059 83.272 li
293.852 83.066 li
293.438 82.858 li
293.024 83.479 li
292.818 82.858 li
292.403 83.066 li
291.99 82.858 li
291.783 82.031 li
291.369 80.582 li
291.162 78.72 li
290.748 75.615 li
290.335 73.339 li
290.127 70.855 li
289.714 67.958 li
289.507 65.474 li
289.093 63.405 li
288.68 61.543 li
288.471 60.094 li
288.057 58.645 li
287.85 57.61 li
287.437 57.196 li
286.816 56.576 li
286.816 56.369 li
286.609 56.576 li
286.196 56.369 li
285.988 56.989 li
285.575 57.403 li
285.368 58.232 li
284.954 59.059 li
284.747 60.301 li
284.333 61.543 li
284.126 62.371 li
283.919 63.819 li
283.505 65.474 li
283.298 66.923 li
283.092 68.579 li
282.678 70.234 li
282.471 71.683 li
282.263 73.339 li
281.849 75.202 li
281.642 77.064 li
281.435 79.133 li
281.022 81.203 li
280.815 82.858 li
280.608 84.721 li
280.194 86.584 li
279.987 88.653 li
279.78 90.516 li
279.366 92.792 li
279.159 94.448 li
278.952 96.103 li
278.746 98.586 li
278.538 100.242 li
278.332 101.691 li
277.918 102.933 li
277.71 104.381 li
277.504 105.83 li
277.297 107.279 li
277.09 108.521 li
276.676 109.762 li
276.469 110.797 li
276.262 111.625 li
276.055 112.866 li
275.847 113.487 li
275.433 114.315 li
275.226 114.936 li
275.019 115.557 li
274.812 115.97 li
274.605 116.177 li
274.399 116.384 li
273.985 116.384 li
273.778 116.177 li
273.364 116.177 li
273.364 115.97 li
272.95 115.764 li
272.743 115.35 li
272.536 114.729 li
272.329 113.901 li
272.122 113.281 li
271.915 112.039 li
271.708 110.383 li
271.502 107.693 li
271.294 104.381 li
271.087 98.794 li
270.88 90.723 li
270.674 80.996 li
270.467 70.234 li
270.26 58.232 li
270.053 47.263 li
270.053 44.159 li
330.482 125.077 mo
329.861 124.87 li
329.24 124.456 li
328.62 124.042 li
327.999 123.421 li
327.379 122.8 li
326.55 122.387 li
325.929 121.765 li
325.309 121.145 li
324.688 120.317 li
324.068 119.696 li
323.446 118.869 li
322.827 118.04 li
322.412 117.626 li
321.791 116.385 li
321.17 115.35 li
320.548 114.315 li
319.929 113.488 li
319.514 112.453 li
318.895 111.625 li
318.273 110.59 li
317.652 109.97 li
317.238 109.348 li
316.618 108.935 li
316.204 108.521 li
315.582 108.314 li
314.961 108.107 li
314.546 108.314 li
313.927 108.314 li
313.513 108.728 li
312.893 109.142 li
312.479 109.762 li
312.064 110.383 li
311.445 111.004 li
311.03 111.832 li
310.409 112.66 li
309.995 113.488 li
308.961 114.522 li
308.961 115.35 li
308.546 116.385 li
308.132 117.213 li
307.511 118.04 li
307.097 118.869 li
306.684 119.696 li
306.27 120.524 li
305.855 121.145 li
305.441 121.765 li
304.821 122.387 li
304.407 122.8 li
303.993 123.421 li
303.579 123.835 li
303.165 124.249 li
302.752 124.663 li
302.336 125.077 li
301.923 125.491 li
301.509 125.698 li
301.095 125.905 li
300.681 126.112 li
300.474 126.112 li
299.854 126.318 li
299.439 126.112 li
299.234 126.112 li
298.612 125.698 li
298.198 125.077 li
297.991 123.628 li
297.784 120.524 li
null null set_ucrbg
.291759 .332266 .612882 rgb
@
[] 0 dsh
249.565 120.938 mo
249.565 121.146 li
248.945 121.146 li
248.738 121.352 li
248.116 121.352 li
248.116 121.559 li
247.496 121.559 li
247.289 121.766 li
246.668 121.766 li
246.461 121.973 li
245.839 121.973 li
245.632 122.18 li
245.011 122.18 li
245.011 122.387 li
244.184 122.387 li
244.184 122.594 li
243.356 122.594 li
243.356 122.8 li
242.529 122.8 li
242.529 123.008 li
241.7 123.008 li
241.7 123.215 li
240.872 123.215 li
240.666 123.421 li
240.045 123.421 li
239.836 123.628 li
239.009 123.628 li
239.009 123.835 li
237.975 123.835 li
237.975 124.042 li
236.94 124.042 li
236.94 124.249 li
235.906 124.249 li
235.906 124.457 li
234.871 124.457 li
234.871 124.663 li
233.836 124.663 li
233.627 124.87 li
232.595 124.87 li
232.595 125.077 li
231.766 125.077 li
null null set_ucrbg
.686728 .170022 .176629 rgb
@
268.19 113.902 mo
267.984 114.109 li
267.777 114.109 li
267.57 114.316 li
267.362 114.316 li
267.156 114.523 li
266.948 114.523 li
266.743 114.729 li
266.536 114.729 li
266.329 114.936 li
265.914 114.936 li
265.707 115.144 li
265.5 115.144 li
265.293 115.35 li
265.086 115.35 li
264.877 115.557 li
264.465 115.557 li
264.465 115.764 li
264.259 115.764 li
264.052 115.971 li
263.638 115.971 li
263.43 116.178 li
263.223 116.178 li
263.018 116.385 li
262.602 116.385 li
262.395 116.592 li
262.189 116.592 li
261.981 116.799 li
261.775 116.799 li
261.568 117.006 li
261.154 117.006 li
260.947 117.213 li
260.534 117.213 li
260.534 117.42 li
260.12 117.42 li
259.913 117.627 li
259.5 117.627 li
259.293 117.834 li
259.086 117.834 li
258.877 118.041 li
258.462 118.041 li
258.256 118.248 li
257.843 118.248 li
257.843 118.455 li
257.222 118.455 li
257.222 118.662 li
256.809 118.662 li
256.602 118.869 li
255.98 118.869 li
255.98 119.076 li
255.568 119.076 li
254.968 119.531 254.096 119.448 253.498 119.903 cv
252.877 119.903 li
252.877 120.11 li
252.255 120.11 li
252.255 120.318 li
251.634 120.318 li
251.427 120.525 li
250.806 120.525 li
250.806 120.731 li
250.186 120.731 li
250.186 120.938 li
249.565 120.938 li
@
295.301 97.139 mo
294.888 97.553 li
294.473 97.76 li
293.353 98.803 292.396 99.787 291.162 100.657 cv
290.748 101.071 li
290.335 101.278 li
290.127 101.485 li
289.714 101.691 li
289.093 102.312 li
288.679 102.519 li
288.472 102.726 li
288.058 103.139 li
287.851 103.139 li
287.438 103.346 li
286.817 103.762 li
286.61 104.174 li
286.197 104.382 li
285.492 104.932 284.512 105.055 283.919 105.83 cv
283.505 106.037 li
283.298 106.244 li
283.092 106.451 li
282.678 106.658 li
282.471 106.658 li
282.264 106.865 li
281.85 107.073 li
281.643 107.28 li
281.436 107.28 li
281.023 107.487 li
280.816 107.694 li
280.609 107.899 li
280.195 107.899 li
279.988 108.107 li
279.78 108.314 li
279.366 108.521 li
279.159 108.521 li
278.952 108.728 li
278.746 108.935 li
278.538 108.935 li
278.332 109.142 li
277.918 109.348 li
277.71 109.348 li
277.504 109.555 li
277.297 109.762 li
277.09 109.762 li
276.676 109.969 li
276.469 109.969 li
276.262 110.176 li
276.055 110.176 li
275.848 110.383 li
275.434 110.591 li
275.227 110.591 li
275.02 110.798 li
274.813 110.798 li
274.606 111.005 li
274.4 111.005 li
274.193 111.212 li
273.986 111.212 li
273.78 111.419 li
273.042 111.822 272.321 111.984 271.708 112.453 cv
271.502 112.453 li
271.294 112.66 li
271.087 112.66 li
270.88 112.867 li
270.467 112.867 li
270.26 113.073 li
270.053 113.073 li
269.846 113.282 li
269.639 113.282 li
269.433 113.487 li
269.225 113.487 li
269.019 113.694 li
268.605 113.694 li
268.398 113.901 li
268.191 113.901 li
@
330.482 58.439 mo
329.861 59.266 li
329.24 60.301 li
328.62 61.129 li
325.521 64.434 323.021 68.198 319.929 71.477 cv
319.514 72.097 li
318.895 72.718 li
318.273 73.339 li
317.28 74.291 316.576 75.492 315.582 76.443 cv
314.961 77.064 li
314.546 77.686 li
313.738 78.717 312.683 79.402 312.064 80.583 cv
311.445 80.996 li
309.677 83.061 307.684 84.955 305.855 86.998 cv
305.441 87.619 li
304.677 87.994 303.84 89.088 303.165 89.689 cv
302.752 90.102 li
302.336 90.516 li
301.923 90.93 li
301.509 91.344 li
300.818 92.033 300.13 92.725 299.439 93.414 cv
299.234 93.414 li
298.612 94.035 li
297.264 95.717 298.382 94.421 296.75 95.897 cv
296.129 96.518 li
295.509 96.932 li
295.3 97.139 li
@
330.896 58.439 mo
330.896 58.667 330.711 58.853 330.482 58.853 cv
330.254 58.853 330.068 58.667 330.068 58.439 cv
330.068 58.21 330.254 58.025 330.482 58.025 cv
330.711 58.025 330.896 58.21 330.896 58.439 cv
f
330.277 59.266 mo
330.277 59.495 330.091 59.681 329.861 59.681 cv
329.634 59.681 329.448 59.495 329.448 59.266 cv
329.448 59.038 329.634 58.852 329.861 58.852 cv
330.091 58.852 330.277 59.038 330.277 59.266 cv
f
329.655 60.301 mo
329.655 60.53 329.47 60.715 329.24 60.715 cv
329.012 60.715 328.827 60.53 328.827 60.301 cv
328.827 60.072 329.012 59.887 329.24 59.887 cv
329.47 59.887 329.655 60.072 329.655 60.301 cv
f
329.034 61.129 mo
329.034 61.358 328.849 61.543 328.62 61.543 cv
328.392 61.543 328.207 61.358 328.207 61.129 cv
328.207 60.9 328.392 60.715 328.62 60.715 cv
328.849 60.715 329.034 60.9 329.034 61.129 cv
f
328.413 61.75 mo
328.413 61.978 328.228 62.164 327.999 62.164 cv
327.771 62.164 327.586 61.978 327.586 61.75 cv
327.586 61.521 327.771 61.335 327.999 61.335 cv
328.228 61.335 328.413 61.521 328.413 61.75 cv
f
327.792 62.578 mo
327.792 62.807 327.607 62.992 327.379 62.992 cv
327.15 62.992 326.965 62.807 326.965 62.578 cv
326.965 62.349 327.15 62.163 327.379 62.163 cv
327.607 62.163 327.792 62.349 327.792 62.578 cv
f
326.965 63.405 mo
326.965 63.634 326.779 63.819 326.551 63.819 cv
326.323 63.819 326.137 63.634 326.137 63.405 cv
326.137 63.177 326.323 62.991 326.551 62.991 cv
326.779 62.991 326.965 63.177 326.965 63.405 cv
f
326.344 64.233 mo
326.344 64.462 326.159 64.647 325.93 64.647 cv
325.702 64.647 325.516 64.462 325.516 64.233 cv
325.516 64.004 325.702 63.819 325.93 63.819 cv
326.159 63.819 326.344 64.004 326.344 64.233 cv
f
325.723 65.061 mo
325.723 65.29 325.538 65.475 325.309 65.475 cv
325.081 65.475 324.896 65.29 324.896 65.061 cv
324.896 64.832 325.081 64.647 325.309 64.647 cv
325.538 64.647 325.723 64.832 325.723 65.061 cv
f
325.102 65.889 mo
325.102 66.117 324.918 66.303 324.689 66.303 cv
324.459 66.303 324.275 66.117 324.275 65.889 cv
324.275 65.66 324.459 65.474 324.689 65.474 cv
324.918 65.474 325.102 65.66 325.102 65.889 cv
f
324.481 66.51 mo
324.481 66.739 324.296 66.924 324.068 66.924 cv
323.838 66.924 323.654 66.739 323.654 66.51 cv
323.654 66.281 323.838 66.096 324.068 66.096 cv
324.296 66.096 324.481 66.281 324.481 66.51 cv
f
323.861 67.337 mo
323.861 67.566 323.675 67.751 323.446 67.751 cv
323.218 67.751 323.034 67.566 323.034 67.337 cv
323.034 67.108 323.218 66.923 323.446 66.923 cv
323.675 66.923 323.861 67.108 323.861 67.337 cv
f
323.239 67.958 mo
323.239 68.187 323.054 68.373 322.826 68.373 cv
322.597 68.373 322.412 68.187 322.412 67.958 cv
322.412 67.73 322.597 67.544 322.826 67.544 cv
323.054 67.544 323.239 67.73 323.239 67.958 cv
f
322.826 68.786 mo
322.826 69.015 322.64 69.2 322.412 69.2 cv
322.183 69.2 321.998 69.015 321.998 68.786 cv
321.998 68.557 322.183 68.372 322.412 68.372 cv
322.64 68.372 322.826 68.557 322.826 68.786 cv
f
322.205 69.407 mo
322.205 69.635 322.019 69.822 321.791 69.822 cv
321.562 69.822 321.377 69.635 321.377 69.407 cv
321.377 69.178 321.562 68.992 321.791 68.992 cv
322.019 68.992 322.205 69.178 322.205 69.407 cv
f
321.584 70.028 mo
321.584 70.257 321.398 70.442 321.17 70.442 cv
320.942 70.442 320.757 70.257 320.757 70.028 cv
320.757 69.799 320.942 69.614 321.17 69.614 cv
321.398 69.614 321.584 69.799 321.584 70.028 cv
f
320.963 70.855 mo
320.963 71.084 320.777 71.269 320.549 71.269 cv
320.321 71.269 320.136 71.084 320.136 70.855 cv
320.136 70.626 320.321 70.441 320.549 70.441 cv
320.777 70.441 320.963 70.626 320.963 70.855 cv
f
320.342 71.476 mo
320.342 71.705 320.156 71.891 319.929 71.891 cv
319.7 71.891 319.515 71.705 319.515 71.476 cv
319.515 71.248 319.7 71.062 319.929 71.062 cv
320.156 71.062 320.342 71.248 320.342 71.476 cv
f
319.929 72.097 mo
319.929 72.326 319.743 72.511 319.515 72.511 cv
319.286 72.511 319.101 72.326 319.101 72.097 cv
319.101 71.868 319.286 71.683 319.515 71.683 cv
319.743 71.683 319.929 71.868 319.929 72.097 cv
f
319.307 72.718 mo
319.307 72.947 319.121 73.132 318.895 73.132 cv
318.664 73.132 318.48 72.947 318.48 72.718 cv
318.48 72.489 318.664 72.304 318.895 72.304 cv
319.121 72.304 319.307 72.489 319.307 72.718 cv
f
318.688 73.339 mo
318.688 73.567 318.5 73.753 318.273 73.753 cv
318.043 73.753 317.859 73.567 317.859 73.339 cv
317.859 73.11 318.043 72.925 318.273 72.925 cv
318.5 72.925 318.688 73.11 318.688 73.339 cv
f
318.066 73.96 mo
318.066 74.189 317.879 74.374 317.652 74.374 cv
317.422 74.374 317.238 74.189 317.238 73.96 cv
317.238 73.732 317.422 73.546 317.652 73.546 cv
317.879 73.546 318.066 73.732 318.066 73.96 cv
f
317.652 74.581 mo
317.652 74.809 317.464 74.995 317.238 74.995 cv
317.009 74.995 316.824 74.809 316.824 74.581 cv
316.824 74.352 317.009 74.167 317.238 74.167 cv
317.464 74.167 317.652 74.352 317.652 74.581 cv
f
317.031 75.202 mo
317.031 75.43 316.845 75.616 316.618 75.616 cv
316.388 75.616 316.203 75.43 316.203 75.202 cv
316.203 74.973 316.388 74.788 316.618 74.788 cv
316.845 74.788 317.031 74.973 317.031 75.202 cv
f
316.618 75.823 mo
316.618 76.051 316.431 76.237 316.203 76.237 cv
315.974 76.237 315.79 76.051 315.79 75.823 cv
315.79 75.594 315.974 75.408 316.203 75.408 cv
316.431 75.408 316.618 75.594 316.618 75.823 cv
f
315.997 76.443 mo
315.997 76.672 315.81 76.857 315.582 76.857 cv
315.353 76.857 315.169 76.672 315.169 76.443 cv
315.169 76.214 315.353 76.029 315.582 76.029 cv
315.81 76.029 315.997 76.214 315.997 76.443 cv
f
315.375 77.064 mo
315.375 77.293 315.189 77.478 314.962 77.478 cv
314.733 77.478 314.548 77.293 314.548 77.064 cv
314.548 76.835 314.733 76.65 314.962 76.65 cv
315.189 76.65 315.375 76.835 315.375 77.064 cv
f
314.962 77.685 mo
314.962 77.914 314.776 78.098 314.548 78.098 cv
314.318 78.098 314.134 77.914 314.134 77.685 cv
314.134 77.457 314.318 77.271 314.548 77.271 cv
314.776 77.271 314.962 77.457 314.962 77.685 cv
f
314.341 78.306 mo
314.341 78.534 314.154 78.72 313.927 78.72 cv
313.697 78.72 313.514 78.534 313.514 78.306 cv
313.514 78.077 313.697 77.892 313.927 77.892 cv
314.154 77.892 314.341 78.077 314.341 78.306 cv
f
313.927 78.926 mo
313.927 79.156 313.741 79.341 313.514 79.341 cv
313.284 79.341 313.099 79.156 313.099 78.926 cv
313.099 78.698 313.284 78.513 313.514 78.513 cv
313.741 78.513 313.927 78.698 313.927 78.926 cv
f
313.306 79.341 mo
313.306 79.57 313.12 79.755 312.893 79.755 cv
312.663 79.755 312.479 79.57 312.479 79.341 cv
312.479 79.112 312.663 78.927 312.893 78.927 cv
313.12 78.927 313.306 79.112 313.306 79.341 cv
f
312.893 79.962 mo
312.893 80.191 312.707 80.376 312.479 80.376 cv
312.248 80.376 312.064 80.191 312.064 79.962 cv
312.064 79.733 312.248 79.548 312.479 79.548 cv
312.707 79.548 312.893 79.733 312.893 79.962 cv
f
312.479 80.582 mo
312.479 80.811 312.293 80.996 312.064 80.996 cv
311.836 80.996 311.652 80.811 311.652 80.582 cv
311.652 80.353 311.836 80.168 312.064 80.168 cv
312.293 80.168 312.479 80.353 312.479 80.582 cv
f
311.857 80.996 mo
311.857 81.225 311.671 81.41 311.445 81.41 cv
311.214 81.41 311.03 81.225 311.03 80.996 cv
311.03 80.768 311.214 80.582 311.445 80.582 cv
311.671 80.582 311.857 80.768 311.857 80.996 cv
f
311.444 81.617 mo
311.444 81.846 311.256 82.031 311.03 82.031 cv
310.8 82.031 310.616 81.846 310.616 81.617 cv
310.616 81.388 310.8 81.203 311.03 81.203 cv
311.256 81.203 311.444 81.388 311.444 81.617 cv
f
310.823 82.031 mo
310.823 82.26 310.635 82.445 310.409 82.445 cv
310.179 82.445 309.995 82.26 309.995 82.031 cv
309.995 81.802 310.179 81.617 310.409 81.617 cv
310.635 81.617 310.823 81.802 310.823 82.031 cv
f
310.409 82.652 mo
310.409 82.881 310.223 83.065 309.995 83.065 cv
309.766 83.065 309.581 82.881 309.581 82.652 cv
309.581 82.423 309.766 82.238 309.995 82.238 cv
310.223 82.238 310.409 82.423 310.409 82.652 cv
f
309.374 83.686 mo
309.374 83.915 309.187 84.1 308.96 84.1 cv
308.731 84.1 308.547 83.915 308.547 83.686 cv
308.547 83.457 308.731 83.273 308.96 83.273 cv
309.187 83.273 309.374 83.457 309.374 83.686 cv
f
308.96 84.101 mo
308.96 84.33 308.774 84.514 308.547 84.514 cv
308.317 84.514 308.133 84.33 308.133 84.101 cv
308.133 83.871 308.317 83.687 308.547 83.687 cv
308.774 83.687 308.96 83.871 308.96 84.101 cv
f
308.547 84.721 mo
308.547 84.95 308.36 85.135 308.133 85.135 cv
307.903 85.135 307.719 84.95 307.719 84.721 cv
307.719 84.492 307.903 84.307 308.133 84.307 cv
308.36 84.307 308.547 84.492 308.547 84.721 cv
f
307.926 85.135 mo
307.926 85.364 307.74 85.549 307.512 85.549 cv
307.282 85.549 307.098 85.364 307.098 85.135 cv
307.098 84.906 307.282 84.721 307.512 84.721 cv
307.74 84.721 307.926 84.906 307.926 85.135 cv
f
307.512 85.549 mo
307.512 85.778 307.326 85.963 307.098 85.963 cv
306.869 85.963 306.684 85.778 306.684 85.549 cv
306.684 85.32 306.869 85.135 307.098 85.135 cv
307.326 85.135 307.512 85.32 307.512 85.549 cv
f
307.098 86.169 mo
307.098 86.398 306.912 86.584 306.684 86.584 cv
306.454 86.584 306.27 86.398 306.27 86.169 cv
306.27 85.941 306.454 85.756 306.684 85.756 cv
306.912 85.756 307.098 85.941 307.098 86.169 cv
f
306.684 86.584 mo
306.684 86.813 306.498 86.998 306.27 86.998 cv
306.041 86.998 305.855 86.813 305.855 86.584 cv
305.855 86.355 306.041 86.169 306.27 86.169 cv
306.498 86.169 306.684 86.355 306.684 86.584 cv
f
306.27 86.998 mo
306.27 87.226 306.084 87.411 305.855 87.411 cv
305.627 87.411 305.441 87.226 305.441 86.998 cv
305.441 86.769 305.627 86.583 305.855 86.583 cv
306.084 86.583 306.27 86.769 306.27 86.998 cv
f
305.855 87.619 mo
305.855 87.848 305.67 88.032 305.441 88.032 cv
305.214 88.032 305.027 87.848 305.027 87.619 cv
305.027 87.389 305.214 87.205 305.441 87.205 cv
305.67 87.205 305.855 87.389 305.855 87.619 cv
f
305.234 88.033 mo
305.234 88.262 305.049 88.447 304.821 88.447 cv
304.593 88.447 304.407 88.262 304.407 88.033 cv
304.407 87.804 304.593 87.619 304.821 87.619 cv
305.049 87.619 305.234 87.804 305.234 88.033 cv
f
304.821 88.447 mo
304.821 88.675 304.635 88.861 304.407 88.861 cv
304.178 88.861 303.993 88.675 303.993 88.447 cv
303.993 88.218 304.178 88.033 304.407 88.033 cv
304.635 88.033 304.821 88.218 304.821 88.447 cv
f
304.407 88.861 mo
304.407 89.089 304.22 89.274 303.993 89.274 cv
303.764 89.274 303.579 89.089 303.579 88.861 cv
303.579 88.632 303.764 88.447 303.993 88.447 cv
304.22 88.447 304.407 88.632 304.407 88.861 cv
f
303.993 89.274 mo
303.993 89.503 303.808 89.688 303.579 89.688 cv
303.35 89.688 303.165 89.503 303.165 89.274 cv
303.165 89.045 303.35 88.86 303.579 88.86 cv
303.808 88.86 303.993 89.045 303.993 89.274 cv
f
303.579 89.689 mo
303.579 89.916 303.394 90.102 303.165 90.102 cv
302.936 90.102 302.752 89.916 302.752 89.689 cv
302.752 89.459 302.936 89.274 303.165 89.274 cv
303.394 89.274 303.579 89.459 303.579 89.689 cv
f
303.165 90.102 mo
303.165 90.331 302.98 90.516 302.752 90.516 cv
302.522 90.516 302.337 90.331 302.337 90.102 cv
302.337 89.874 302.522 89.688 302.752 89.688 cv
302.98 89.688 303.165 89.874 303.165 90.102 cv
f
302.752 90.516 mo
302.752 90.745 302.566 90.93 302.337 90.93 cv
302.108 90.93 301.924 90.745 301.924 90.516 cv
301.924 90.287 302.108 90.102 302.337 90.102 cv
302.566 90.102 302.752 90.287 302.752 90.516 cv
f
302.337 90.93 mo
302.337 91.159 302.152 91.344 301.924 91.344 cv
301.695 91.344 301.51 91.159 301.51 90.93 cv
301.51 90.701 301.695 90.516 301.924 90.516 cv
302.152 90.516 302.337 90.701 302.337 90.93 cv
f
301.924 91.344 mo
301.924 91.573 301.738 91.758 301.51 91.758 cv
301.281 91.758 301.096 91.573 301.096 91.344 cv
301.096 91.115 301.281 90.93 301.51 90.93 cv
301.738 90.93 301.924 91.115 301.924 91.344 cv
f
301.51 91.758 mo
301.51 91.987 301.324 92.172 301.096 92.172 cv
300.867 92.172 300.682 91.987 300.682 91.758 cv
300.682 91.529 300.867 91.344 301.096 91.344 cv
301.324 91.344 301.51 91.529 301.51 91.758 cv
f
301.096 92.172 mo
301.096 92.401 300.911 92.586 300.682 92.586 cv
300.453 92.586 300.268 92.401 300.268 92.172 cv
300.268 91.943 300.453 91.758 300.682 91.758 cv
300.911 91.758 301.096 91.943 301.096 92.172 cv
f
300.889 92.379 mo
300.889 92.608 300.703 92.793 300.475 92.793 cv
300.247 92.793 300.061 92.608 300.061 92.379 cv
300.061 92.15 300.247 91.965 300.475 91.965 cv
300.703 91.965 300.889 92.15 300.889 92.379 cv
f
300.268 93 mo
300.268 93.229 300.082 93.414 299.855 93.414 cv
299.626 93.414 299.439 93.229 299.439 93 cv
299.439 92.771 299.626 92.586 299.855 92.586 cv
300.082 92.586 300.268 92.771 300.268 93 cv
f
299.855 93.414 mo
299.855 93.642 299.668 93.827 299.439 93.827 cv
299.211 93.827 299.027 93.642 299.027 93.414 cv
299.027 93.184 299.211 92.999 299.439 92.999 cv
299.668 92.999 299.855 93.184 299.855 93.414 cv
f
299.646 93.414 mo
299.646 93.642 299.462 93.827 299.234 93.827 cv
299.005 93.827 298.82 93.642 298.82 93.414 cv
298.82 93.184 299.005 92.999 299.234 92.999 cv
299.462 92.999 299.646 93.184 299.646 93.414 cv
f
299.027 94.035 mo
299.027 94.264 298.841 94.448 298.612 94.448 cv
298.384 94.448 298.198 94.264 298.198 94.035 cv
298.198 93.805 298.384 93.619 298.612 93.619 cv
298.841 93.619 299.027 93.805 299.027 94.035 cv
f
298.612 94.448 mo
298.612 94.677 298.426 94.862 298.198 94.862 cv
297.97 94.862 297.784 94.677 297.784 94.448 cv
297.784 94.219 297.97 94.034 298.198 94.034 cv
298.426 94.034 298.612 94.219 298.612 94.448 cv
f
298.405 94.862 mo
298.405 95.091 298.22 95.277 297.991 95.277 cv
297.762 95.277 297.578 95.091 297.578 94.862 cv
297.578 94.633 297.762 94.448 297.991 94.448 cv
298.22 94.448 298.405 94.633 298.405 94.862 cv
f
298.198 95.069 mo
298.198 95.298 298.013 95.483 297.784 95.483 cv
297.556 95.483 297.37 95.298 297.37 95.069 cv
297.37 94.84 297.556 94.655 297.784 94.655 cv
298.013 94.655 298.198 94.84 298.198 95.069 cv
f
297.578 95.483 mo
297.578 95.712 297.392 95.897 297.163 95.897 cv
296.935 95.897 296.75 95.712 296.75 95.483 cv
296.75 95.254 296.935 95.069 297.163 95.069 cv
297.392 95.069 297.578 95.254 297.578 95.483 cv
f
297.163 95.897 mo
297.163 96.126 296.978 96.311 296.75 96.311 cv
296.521 96.311 296.336 96.126 296.336 95.897 cv
296.336 95.668 296.521 95.483 296.75 95.483 cv
296.978 95.483 297.163 95.668 297.163 95.897 cv
f
296.75 96.31 mo
296.75 96.539 296.565 96.724 296.336 96.724 cv
296.107 96.724 295.922 96.539 295.922 96.31 cv
295.922 96.082 296.107 95.896 296.336 95.896 cv
296.565 95.896 296.75 96.082 296.75 96.31 cv
f
296.543 96.518 mo
296.543 96.746 296.357 96.932 296.129 96.932 cv
295.9 96.932 295.715 96.746 295.715 96.518 cv
295.715 96.289 295.9 96.103 296.129 96.103 cv
296.357 96.103 296.543 96.289 296.543 96.518 cv
f
295.922 96.932 mo
295.922 97.16 295.737 97.346 295.509 97.346 cv
295.28 97.346 295.094 97.16 295.094 96.932 cv
295.094 96.703 295.28 96.517 295.509 96.517 cv
295.737 96.517 295.922 96.703 295.922 96.932 cv
f
295.715 97.139 mo
295.715 97.367 295.529 97.553 295.301 97.553 cv
295.073 97.553 294.888 97.367 294.888 97.139 cv
294.888 96.91 295.073 96.724 295.301 96.724 cv
295.529 96.724 295.715 96.91 295.715 97.139 cv
f
295.301 97.552 mo
295.301 97.781 295.116 97.966 294.888 97.966 cv
294.659 97.966 294.473 97.781 294.473 97.552 cv
294.473 97.324 294.659 97.138 294.888 97.138 cv
295.116 97.138 295.301 97.324 295.301 97.552 cv
f
294.888 97.759 mo
294.888 97.988 294.702 98.173 294.473 98.173 cv
294.245 98.173 294.06 97.988 294.06 97.759 cv
294.06 97.53 294.245 97.345 294.473 97.345 cv
294.702 97.345 294.888 97.53 294.888 97.759 cv
f
294.473 98.173 mo
294.473 98.402 294.288 98.587 294.06 98.587 cv
293.831 98.587 293.646 98.402 293.646 98.173 cv
293.646 97.945 293.831 97.759 294.06 97.759 cv
294.288 97.759 294.473 97.945 294.473 98.173 cv
f
294.267 98.38 mo
294.267 98.609 294.082 98.794 293.853 98.794 cv
293.625 98.794 293.439 98.609 293.439 98.38 cv
293.439 98.151 293.625 97.966 293.853 97.966 cv
294.082 97.966 294.267 98.151 294.267 98.38 cv
f
293.852 98.794 mo
293.852 99.023 293.668 99.209 293.439 99.209 cv
293.209 99.209 293.025 99.023 293.025 98.794 cv
293.025 98.565 293.209 98.38 293.439 98.38 cv
293.668 98.38 293.852 98.565 293.852 98.794 cv
f
293.439 99.001 mo
293.439 99.23 293.254 99.415 293.025 99.415 cv
292.796 99.415 292.611 99.23 292.611 99.001 cv
292.611 98.772 292.796 98.587 293.025 98.587 cv
293.254 98.587 293.439 98.772 293.439 99.001 cv
f
293.231 99.415 mo
293.231 99.644 293.046 99.829 292.818 99.829 cv
292.588 99.829 292.404 99.644 292.404 99.415 cv
292.404 99.186 292.588 99.001 292.818 99.001 cv
293.046 99.001 293.231 99.186 293.231 99.415 cv
f
292.818 99.621 mo
292.818 99.851 292.632 100.035 292.404 100.035 cv
292.175 100.035 291.99 99.851 291.99 99.621 cv
291.99 99.394 292.175 99.208 292.404 99.208 cv
292.632 99.208 292.818 99.394 292.818 99.621 cv
f
292.403 100.035 mo
292.403 100.264 292.218 100.449 291.99 100.449 cv
291.761 100.449 291.576 100.264 291.576 100.035 cv
291.576 99.807 291.761 99.621 291.99 99.621 cv
292.218 99.621 292.403 99.807 292.403 100.035 cv
f
292.197 100.242 mo
292.197 100.472 292.011 100.657 291.783 100.657 cv
291.554 100.657 291.369 100.472 291.369 100.242 cv
291.369 100.014 291.554 99.829 291.783 99.829 cv
292.011 99.829 292.197 100.014 292.197 100.242 cv
f
291.783 100.449 mo
291.783 100.679 291.597 100.864 291.369 100.864 cv
291.14 100.864 290.955 100.679 290.955 100.449 cv
290.955 100.221 291.14 100.035 291.369 100.035 cv
291.597 100.035 291.783 100.221 291.783 100.449 cv
f
291.576 100.657 mo
291.576 100.885 291.39 101.071 291.162 101.071 cv
290.933 101.071 290.748 100.885 290.748 100.657 cv
290.748 100.428 290.933 100.242 291.162 100.242 cv
291.39 100.242 291.576 100.428 291.576 100.657 cv
f
291.162 101.07 mo
291.162 101.299 290.976 101.484 290.748 101.484 cv
290.519 101.484 290.335 101.299 290.335 101.07 cv
290.335 100.842 290.519 100.656 290.748 100.656 cv
290.976 100.656 291.162 100.842 291.162 101.07 cv
f
290.748 101.278 mo
290.748 101.507 290.561 101.691 290.335 101.691 cv
290.105 101.691 289.921 101.507 289.921 101.278 cv
289.921 101.049 290.105 100.864 290.335 100.864 cv
290.561 100.864 290.748 101.049 290.748 101.278 cv
f
290.542 101.484 mo
290.542 101.713 290.355 101.898 290.127 101.898 cv
289.899 101.898 289.714 101.713 289.714 101.484 cv
289.714 101.255 289.899 101.07 290.127 101.07 cv
290.355 101.07 290.542 101.255 290.542 101.484 cv
f
290.127 101.691 mo
290.127 101.92 289.941 102.105 289.714 102.105 cv
289.485 102.105 289.3 101.92 289.3 101.691 cv
289.3 101.463 289.485 101.278 289.714 101.278 cv
289.941 101.278 290.127 101.463 290.127 101.691 cv
f
289.921 101.898 mo
289.921 102.127 289.734 102.312 289.507 102.312 cv
289.278 102.312 289.093 102.127 289.093 101.898 cv
289.093 101.669 289.278 101.484 289.507 101.484 cv
289.734 101.484 289.921 101.669 289.921 101.898 cv
f
289.507 102.312 mo
289.507 102.541 289.32 102.726 289.093 102.726 cv
288.864 102.726 288.679 102.541 288.679 102.312 cv
288.679 102.083 288.864 101.898 289.093 101.898 cv
289.32 101.898 289.507 102.083 289.507 102.312 cv
f
289.093 102.519 mo
289.093 102.748 288.906 102.933 288.679 102.933 cv
288.45 102.933 288.265 102.748 288.265 102.519 cv
288.265 102.29 288.45 102.105 288.679 102.105 cv
288.906 102.105 289.093 102.29 289.093 102.519 cv
f
288.886 102.726 mo
288.886 102.955 288.699 103.14 288.472 103.14 cv
288.243 103.14 288.058 102.955 288.058 102.726 cv
288.058 102.497 288.243 102.312 288.472 102.312 cv
288.699 102.312 288.886 102.497 288.886 102.726 cv
f
288.472 103.14 mo
288.472 103.369 288.286 103.554 288.058 103.554 cv
287.829 103.554 287.645 103.369 287.645 103.14 cv
287.645 102.911 287.829 102.726 288.058 102.726 cv
288.286 102.726 288.472 102.911 288.472 103.14 cv
f
288.264 103.14 mo
288.264 103.369 288.079 103.554 287.851 103.554 cv
287.621 103.554 287.438 103.369 287.438 103.14 cv
287.438 102.911 287.621 102.726 287.851 102.726 cv
288.079 102.726 288.264 102.911 288.264 103.14 cv
f
287.851 103.347 mo
287.851 103.575 287.664 103.761 287.438 103.761 cv
287.207 103.761 287.023 103.575 287.023 103.347 cv
287.023 103.118 287.207 102.933 287.438 102.933 cv
287.664 102.933 287.851 103.118 287.851 103.347 cv
f
287.23 103.761 mo
287.23 103.989 287.045 104.175 286.816 104.175 cv
286.586 104.175 286.402 103.989 286.402 103.761 cv
286.402 103.532 286.586 103.347 286.816 103.347 cv
287.045 103.347 287.23 103.532 287.23 103.761 cv
f
287.023 104.175 mo
287.023 104.404 286.838 104.589 286.609 104.589 cv
286.38 104.589 286.196 104.404 286.196 104.175 cv
286.196 103.947 286.38 103.761 286.609 103.761 cv
286.838 103.761 287.023 103.947 287.023 104.175 cv
f
286.609 104.382 mo
286.609 104.611 286.423 104.796 286.196 104.796 cv
285.966 104.796 285.781 104.611 285.781 104.382 cv
285.781 104.153 285.966 103.968 286.196 103.968 cv
286.423 103.968 286.609 104.153 286.609 104.382 cv
f
286.402 104.589 mo
286.402 104.818 286.216 105.003 285.988 105.003 cv
285.759 105.003 285.575 104.818 285.575 104.589 cv
285.575 104.36 285.759 104.175 285.988 104.175 cv
286.216 104.175 286.402 104.36 286.402 104.589 cv
f
285.988 104.796 mo
285.988 105.024 285.802 105.21 285.575 105.21 cv
285.345 105.21 285.16 105.024 285.16 104.796 cv
285.16 104.567 285.345 104.382 285.575 104.382 cv
285.802 104.382 285.988 104.567 285.988 104.796 cv
f
285.781 104.796 mo
285.781 105.024 285.595 105.21 285.368 105.21 cv
285.138 105.21 284.954 105.024 284.954 104.796 cv
284.954 104.567 285.138 104.382 285.368 104.382 cv
285.595 104.382 285.781 104.567 285.781 104.796 cv
f
285.368 105.003 mo
285.368 105.232 285.181 105.417 284.954 105.417 cv
284.724 105.417 284.54 105.232 284.54 105.003 cv
284.54 104.774 284.724 104.589 284.954 104.589 cv
285.181 104.589 285.368 104.774 285.368 105.003 cv
f
285.16 105.21 mo
285.16 105.438 284.975 105.624 284.747 105.624 cv
284.517 105.624 284.333 105.438 284.333 105.21 cv
284.333 104.981 284.517 104.796 284.747 104.796 cv
284.975 104.796 285.16 104.981 285.16 105.21 cv
f
284.747 105.416 mo
284.747 105.646 284.56 105.83 284.333 105.83 cv
284.103 105.83 283.919 105.646 283.919 105.416 cv
283.919 105.189 284.103 105.002 284.333 105.002 cv
284.56 105.002 284.747 105.189 284.747 105.416 cv
f
284.54 105.623 mo
284.54 105.852 284.353 106.037 284.126 106.037 cv
283.896 106.037 283.712 105.852 283.712 105.623 cv
283.712 105.394 283.896 105.209 284.126 105.209 cv
284.353 105.209 284.54 105.394 284.54 105.623 cv
f
284.333 105.83 mo
284.333 106.059 284.147 106.244 283.919 106.244 cv
283.69 106.244 283.505 106.059 283.505 105.83 cv
283.505 105.601 283.69 105.416 283.919 105.416 cv
284.147 105.416 284.333 105.601 284.333 105.83 cv
f
283.919 106.037 mo
283.919 106.267 283.732 106.451 283.505 106.451 cv
283.276 106.451 283.092 106.267 283.092 106.037 cv
283.092 105.808 283.276 105.623 283.505 105.623 cv
283.732 105.623 283.919 105.808 283.919 106.037 cv
f
283.712 106.244 mo
283.712 106.473 283.526 106.658 283.298 106.658 cv
283.069 106.658 282.884 106.473 282.884 106.244 cv
282.884 106.015 283.069 105.83 283.298 105.83 cv
283.526 105.83 283.712 106.015 283.712 106.244 cv
f
283.505 106.451 mo
283.505 106.68 283.319 106.865 283.092 106.865 cv
282.862 106.865 282.678 106.68 282.678 106.451 cv
282.678 106.223 282.862 106.037 283.092 106.037 cv
283.319 106.037 283.505 106.223 283.505 106.451 cv
f
283.092 106.658 mo
283.092 106.887 282.904 107.073 282.678 107.073 cv
282.448 107.073 282.264 106.887 282.264 106.658 cv
282.264 106.43 282.448 106.244 282.678 106.244 cv
282.904 106.244 283.092 106.43 283.092 106.658 cv
f
282.884 106.658 mo
282.884 106.887 282.699 107.073 282.471 107.073 cv
282.241 107.073 282.057 106.887 282.057 106.658 cv
282.057 106.43 282.241 106.244 282.471 106.244 cv
282.699 106.244 282.884 106.43 282.884 106.658 cv
f
282.678 106.865 mo
282.678 107.094 282.49 107.279 282.264 107.279 cv
282.035 107.279 281.85 107.094 281.85 106.865 cv
281.85 106.636 282.035 106.451 282.264 106.451 cv
282.49 106.451 282.678 106.636 282.678 106.865 cv
f
282.264 107.073 mo
282.264 107.301 282.078 107.487 281.85 107.487 cv
281.62 107.487 281.436 107.301 281.436 107.073 cv
281.436 106.844 281.62 106.658 281.85 106.658 cv
282.078 106.658 282.264 106.844 282.264 107.073 cv
f
282.057 107.279 mo
282.057 107.508 281.871 107.693 281.643 107.693 cv
281.414 107.693 281.229 107.508 281.229 107.279 cv
281.229 107.05 281.414 106.865 281.643 106.865 cv
281.871 106.865 282.057 107.05 282.057 107.279 cv
f
281.85 107.279 mo
281.85 107.508 281.664 107.693 281.436 107.693 cv
281.207 107.693 281.023 107.508 281.023 107.279 cv
281.023 107.05 281.207 106.865 281.436 106.865 cv
281.664 106.865 281.85 107.05 281.85 107.279 cv
f
281.436 107.486 mo
281.436 107.715 281.248 107.9 281.023 107.9 cv
280.793 107.9 280.609 107.715 280.609 107.486 cv
280.609 107.257 280.793 107.072 281.023 107.072 cv
281.248 107.072 281.436 107.257 281.436 107.486 cv
f
281.229 107.693 mo
281.229 107.922 281.043 108.107 280.816 108.107 cv
280.586 108.107 280.402 107.922 280.402 107.693 cv
280.402 107.464 280.586 107.279 280.816 107.279 cv
281.043 107.279 281.229 107.464 281.229 107.693 cv
f
281.023 107.9 mo
281.023 108.129 280.836 108.314 280.609 108.314 cv
280.379 108.314 280.195 108.129 280.195 107.9 cv
280.195 107.671 280.379 107.486 280.609 107.486 cv
280.836 107.486 281.023 107.671 281.023 107.9 cv
f
280.609 107.9 mo
280.609 108.129 280.421 108.314 280.195 108.314 cv
279.965 108.314 279.78 108.129 279.78 107.9 cv
279.78 107.671 279.965 107.486 280.195 107.486 cv
280.421 107.486 280.609 107.671 280.609 107.9 cv
f
280.402 108.107 mo
280.402 108.336 280.214 108.521 279.988 108.521 cv
279.757 108.521 279.574 108.336 279.574 108.107 cv
279.574 107.878 279.757 107.693 279.988 107.693 cv
280.214 107.693 280.402 107.878 280.402 108.107 cv
f
280.194 108.314 mo
280.194 108.543 280.007 108.728 279.78 108.728 cv
279.55 108.728 279.366 108.543 279.366 108.314 cv
279.366 108.085 279.55 107.9 279.78 107.9 cv
280.007 107.9 280.194 108.085 280.194 108.314 cv
f
279.78 108.521 mo
279.78 108.75 279.593 108.935 279.366 108.935 cv
279.138 108.935 278.952 108.75 278.952 108.521 cv
278.952 108.292 279.138 108.107 279.366 108.107 cv
279.593 108.107 279.78 108.292 279.78 108.521 cv
f
279.574 108.521 mo
279.574 108.75 279.386 108.935 279.159 108.935 cv
278.929 108.935 278.746 108.75 278.746 108.521 cv
278.746 108.292 278.929 108.107 279.159 108.107 cv
279.386 108.107 279.574 108.292 279.574 108.521 cv
f
279.366 108.728 mo
279.366 108.957 279.18 109.142 278.952 109.142 cv
278.723 109.142 278.538 108.957 278.538 108.728 cv
278.538 108.499 278.723 108.314 278.952 108.314 cv
279.18 108.314 279.366 108.499 279.366 108.728 cv
f
279.159 108.935 mo
279.159 109.164 278.973 109.349 278.746 109.349 cv
278.516 109.349 278.332 109.164 278.332 108.935 cv
278.332 108.706 278.516 108.521 278.746 108.521 cv
278.973 108.521 279.159 108.706 279.159 108.935 cv
f
278.952 108.935 mo
278.952 109.164 278.765 109.349 278.538 109.349 cv
278.308 109.349 278.125 109.164 278.125 108.935 cv
278.125 108.706 278.308 108.521 278.538 108.521 cv
278.765 108.521 278.952 108.706 278.952 108.935 cv
f
278.746 109.142 mo
278.746 109.37 278.56 109.556 278.332 109.556 cv
278.102 109.556 277.918 109.37 277.918 109.142 cv
277.918 108.913 278.102 108.728 278.332 108.728 cv
278.56 108.728 278.746 108.913 278.746 109.142 cv
f
278.332 109.348 mo
278.332 109.578 278.144 109.762 277.918 109.762 cv
277.687 109.762 277.504 109.578 277.504 109.348 cv
277.504 109.119 277.687 108.935 277.918 108.935 cv
278.144 108.935 278.332 109.119 278.332 109.348 cv
f
278.125 109.348 mo
278.125 109.578 277.937 109.762 277.71 109.762 cv
277.481 109.762 277.297 109.578 277.297 109.348 cv
277.297 109.119 277.481 108.935 277.71 108.935 cv
277.937 108.935 278.125 109.119 278.125 109.348 cv
f
277.918 109.555 mo
277.918 109.785 277.731 109.969 277.504 109.969 cv
277.274 109.969 277.09 109.785 277.09 109.555 cv
277.09 109.326 277.274 109.142 277.504 109.142 cv
277.731 109.142 277.918 109.326 277.918 109.555 cv
f
277.71 109.762 mo
277.71 109.991 277.524 110.176 277.297 110.176 cv
277.068 110.176 276.883 109.991 276.883 109.762 cv
276.883 109.534 277.068 109.348 277.297 109.348 cv
277.524 109.348 277.71 109.534 277.71 109.762 cv
f
277.504 109.762 mo
277.504 109.991 277.318 110.176 277.09 110.176 cv
276.86 110.176 276.676 109.991 276.676 109.762 cv
276.676 109.534 276.86 109.348 277.09 109.348 cv
277.318 109.348 277.504 109.534 277.504 109.762 cv
f
277.09 109.969 mo
277.09 110.199 276.904 110.383 276.676 110.383 cv
276.447 110.383 276.262 110.199 276.262 109.969 cv
276.262 109.741 276.447 109.556 276.676 109.556 cv
276.904 109.556 277.09 109.741 277.09 109.969 cv
f
276.883 109.969 mo
276.883 110.199 276.697 110.383 276.469 110.383 cv
276.24 110.383 276.055 110.199 276.055 109.969 cv
276.055 109.741 276.24 109.556 276.469 109.556 cv
276.697 109.556 276.883 109.741 276.883 109.969 cv
f
276.676 110.176 mo
276.676 110.405 276.49 110.59 276.262 110.59 cv
276.033 110.59 275.848 110.405 275.848 110.176 cv
275.848 109.948 276.033 109.762 276.262 109.762 cv
276.49 109.762 276.676 109.948 276.676 110.176 cv
f
276.469 110.176 mo
276.469 110.405 276.284 110.59 276.055 110.59 cv
275.826 110.59 275.641 110.405 275.641 110.176 cv
275.641 109.948 275.826 109.762 276.055 109.762 cv
276.284 109.762 276.469 109.948 276.469 110.176 cv
f
276.262 110.383 mo
276.262 110.612 276.076 110.797 275.848 110.797 cv
275.619 110.797 275.434 110.612 275.434 110.383 cv
275.434 110.154 275.619 109.969 275.848 109.969 cv
276.076 109.969 276.262 110.154 276.262 110.383 cv
f
275.848 110.59 mo
275.848 110.819 275.662 111.004 275.434 111.004 cv
275.205 111.004 275.02 110.819 275.02 110.59 cv
275.02 110.361 275.205 110.176 275.434 110.176 cv
275.662 110.176 275.848 110.361 275.848 110.59 cv
f
275.641 110.59 mo
275.641 110.819 275.455 111.004 275.227 111.004 cv
274.998 111.004 274.812 110.819 274.812 110.59 cv
274.812 110.361 274.998 110.176 275.227 110.176 cv
275.455 110.176 275.641 110.361 275.641 110.59 cv
f
275.434 110.797 mo
275.434 111.026 275.248 111.211 275.02 111.211 cv
274.792 111.211 274.605 111.026 274.605 110.797 cv
274.605 110.568 274.792 110.383 275.02 110.383 cv
275.248 110.383 275.434 110.568 275.434 110.797 cv
f
275.227 110.797 mo
275.227 111.026 275.041 111.211 274.812 111.211 cv
274.584 111.211 274.4 111.026 274.4 110.797 cv
274.4 110.568 274.584 110.383 274.812 110.383 cv
275.041 110.383 275.227 110.568 275.227 110.797 cv
f
275.02 111.004 mo
275.02 111.233 274.834 111.418 274.605 111.418 cv
274.377 111.418 274.193 111.233 274.193 111.004 cv
274.193 110.775 274.377 110.59 274.605 110.59 cv
274.834 110.59 275.02 110.775 275.02 111.004 cv
f
274.812 111.004 mo
274.812 111.233 274.627 111.418 274.4 111.418 cv
274.171 111.418 273.986 111.233 273.986 111.004 cv
273.986 110.775 274.171 110.59 274.4 110.59 cv
274.627 110.59 274.812 110.775 274.812 111.004 cv
f
274.605 111.211 mo
274.605 111.439 274.42 111.625 274.193 111.625 cv
273.964 111.625 273.779 111.439 273.779 111.211 cv
273.779 110.982 273.964 110.797 274.193 110.797 cv
274.42 110.797 274.605 110.982 274.605 111.211 cv
f
274.4 111.211 mo
274.4 111.439 274.213 111.625 273.986 111.625 cv
273.756 111.625 273.571 111.439 273.571 111.211 cv
273.571 110.982 273.756 110.797 273.986 110.797 cv
274.213 110.797 274.4 110.982 274.4 111.211 cv
f
274.193 111.418 mo
274.193 111.647 274.006 111.832 273.779 111.832 cv
273.55 111.832 273.364 111.647 273.364 111.418 cv
273.364 111.189 273.55 111.004 273.779 111.004 cv
274.006 111.004 274.193 111.189 274.193 111.418 cv
f
273.778 111.625 mo
273.778 111.854 273.591 112.039 273.364 112.039 cv
273.135 112.039 272.95 111.854 272.95 111.625 cv
272.95 111.397 273.135 111.211 273.364 111.211 cv
273.591 111.211 273.778 111.397 273.778 111.625 cv
f
273.364 111.832 mo
273.364 112.061 273.178 112.246 272.95 112.246 cv
272.722 112.246 272.536 112.061 272.536 111.832 cv
272.536 111.603 272.722 111.418 272.95 111.418 cv
273.178 111.418 273.364 111.603 273.364 111.832 cv
f
273.157 111.832 mo
273.157 112.061 272.97 112.246 272.743 112.246 cv
272.514 112.246 272.329 112.061 272.329 111.832 cv
272.329 111.603 272.514 111.418 272.743 111.418 cv
272.97 111.418 273.157 111.603 273.157 111.832 cv
f
272.95 112.039 mo
272.95 112.268 272.765 112.453 272.536 112.453 cv
272.307 112.453 272.122 112.268 272.122 112.039 cv
272.122 111.81 272.307 111.625 272.536 111.625 cv
272.765 111.625 272.95 111.81 272.95 112.039 cv
f
272.743 112.039 mo
272.743 112.268 272.558 112.453 272.329 112.453 cv
272.101 112.453 271.915 112.268 271.915 112.039 cv
271.915 111.81 272.101 111.625 272.329 111.625 cv
272.558 111.625 272.743 111.81 272.743 112.039 cv
f
272.536 112.246 mo
272.536 112.474 272.349 112.66 272.122 112.66 cv
271.894 112.66 271.708 112.474 271.708 112.246 cv
271.708 112.017 271.894 111.832 272.122 111.832 cv
272.349 111.832 272.536 112.017 272.536 112.246 cv
f
272.329 112.246 mo
272.329 112.474 272.145 112.66 271.915 112.66 cv
271.686 112.66 271.502 112.474 271.502 112.246 cv
271.502 112.017 271.686 111.832 271.915 111.832 cv
272.145 111.832 272.329 112.017 272.329 112.246 cv
f
272.122 112.453 mo
272.122 112.682 271.937 112.867 271.708 112.867 cv
271.48 112.867 271.294 112.682 271.294 112.453 cv
271.294 112.224 271.48 112.039 271.708 112.039 cv
271.937 112.039 272.122 112.224 272.122 112.453 cv
f
271.915 112.453 mo
271.915 112.682 271.73 112.867 271.502 112.867 cv
271.273 112.867 271.087 112.682 271.087 112.453 cv
271.087 112.224 271.273 112.039 271.502 112.039 cv
271.73 112.039 271.915 112.224 271.915 112.453 cv
f
271.708 112.66 mo
271.708 112.888 271.523 113.074 271.294 113.074 cv
271.066 113.074 270.88 112.888 270.88 112.66 cv
270.88 112.431 271.066 112.245 271.294 112.245 cv
271.523 112.245 271.708 112.431 271.708 112.66 cv
f
271.502 112.66 mo
271.502 112.888 271.317 113.074 271.087 113.074 cv
270.859 113.074 270.674 112.888 270.674 112.66 cv
270.674 112.431 270.859 112.245 271.087 112.245 cv
271.317 112.245 271.502 112.431 271.502 112.66 cv
f
271.294 112.867 mo
271.294 113.096 271.109 113.282 270.88 113.282 cv
270.652 113.282 270.467 113.096 270.467 112.867 cv
270.467 112.638 270.652 112.453 270.88 112.453 cv
271.109 112.453 271.294 112.638 271.294 112.867 cv
f
271.087 112.867 mo
271.087 113.096 270.902 113.282 270.674 113.282 cv
270.445 113.282 270.26 113.096 270.26 112.867 cv
270.26 112.638 270.445 112.453 270.674 112.453 cv
270.902 112.453 271.087 112.638 271.087 112.867 cv
f
270.88 112.867 mo
270.88 113.096 270.696 113.282 270.467 113.282 cv
270.238 113.282 270.053 113.096 270.053 112.867 cv
270.053 112.638 270.238 112.453 270.467 112.453 cv
270.696 112.453 270.88 112.638 270.88 112.867 cv
f
270.674 113.074 mo
270.674 113.303 270.488 113.488 270.26 113.488 cv
270.031 113.488 269.846 113.303 269.846 113.074 cv
269.846 112.844 270.031 112.66 270.26 112.66 cv
270.488 112.66 270.674 112.844 270.674 113.074 cv
f
270.467 113.074 mo
270.467 113.303 270.282 113.488 270.053 113.488 cv
269.824 113.488 269.639 113.303 269.639 113.074 cv
269.639 112.844 269.824 112.66 270.053 112.66 cv
270.282 112.66 270.467 112.844 270.467 113.074 cv
f
270.26 113.281 mo
270.26 113.509 270.074 113.694 269.846 113.694 cv
269.618 113.694 269.433 113.509 269.433 113.281 cv
269.433 113.052 269.618 112.866 269.846 112.866 cv
270.074 112.866 270.26 113.052 270.26 113.281 cv
f
270.053 113.281 mo
270.053 113.509 269.867 113.694 269.639 113.694 cv
269.411 113.694 269.225 113.509 269.225 113.281 cv
269.225 113.052 269.411 112.866 269.639 112.866 cv
269.867 112.866 270.053 113.052 270.053 113.281 cv
f
269.846 113.488 mo
269.846 113.717 269.661 113.902 269.433 113.902 cv
269.204 113.902 269.019 113.717 269.019 113.488 cv
269.019 113.259 269.204 113.074 269.433 113.074 cv
269.661 113.074 269.846 113.259 269.846 113.488 cv
f
269.639 113.488 mo
269.639 113.717 269.454 113.902 269.225 113.902 cv
268.997 113.902 268.812 113.717 268.812 113.488 cv
268.812 113.259 268.997 113.074 269.225 113.074 cv
269.454 113.074 269.639 113.259 269.639 113.488 cv
f
269.432 113.694 mo
269.432 113.923 269.246 114.108 269.019 114.108 cv
268.789 114.108 268.605 113.923 268.605 113.694 cv
268.605 113.465 268.789 113.281 269.019 113.281 cv
269.246 113.281 269.432 113.465 269.432 113.694 cv
f
269.225 113.694 mo
269.225 113.923 269.039 114.108 268.812 114.108 cv
268.583 114.108 268.398 113.923 268.398 113.694 cv
268.398 113.465 268.583 113.281 268.812 113.281 cv
269.039 113.281 269.225 113.465 269.225 113.694 cv
f
269.019 113.694 mo
269.019 113.923 268.832 114.108 268.605 114.108 cv
268.377 114.108 268.191 113.923 268.191 113.694 cv
268.191 113.465 268.377 113.281 268.605 113.281 cv
268.832 113.281 269.019 113.465 269.019 113.694 cv
f
268.811 113.902 mo
268.811 114.13 268.625 114.316 268.398 114.316 cv
268.168 114.316 267.984 114.13 267.984 113.902 cv
267.984 113.673 268.168 113.488 268.398 113.488 cv
268.625 113.488 268.811 113.673 268.811 113.902 cv
f
268.605 113.902 mo
268.605 114.13 268.418 114.316 268.191 114.316 cv
267.961 114.316 267.777 114.13 267.777 113.902 cv
267.777 113.673 267.961 113.488 268.191 113.488 cv
268.418 113.488 268.605 113.673 268.605 113.902 cv
f
268.398 114.108 mo
268.398 114.337 268.212 114.522 267.984 114.522 cv
267.755 114.522 267.57 114.337 267.57 114.108 cv
267.57 113.879 267.755 113.694 267.984 113.694 cv
268.212 113.694 268.398 113.879 268.398 114.108 cv
f
268.19 114.108 mo
268.19 114.337 268.005 114.522 267.777 114.522 cv
267.548 114.522 267.362 114.337 267.362 114.108 cv
267.362 113.879 267.548 113.694 267.777 113.694 cv
268.005 113.694 268.19 113.879 268.19 114.108 cv
f
267.984 114.315 mo
267.984 114.544 267.798 114.729 267.57 114.729 cv
267.34 114.729 267.156 114.544 267.156 114.315 cv
267.156 114.086 267.34 113.901 267.57 113.901 cv
267.798 113.901 267.984 114.086 267.984 114.315 cv
f
267.777 114.315 mo
267.777 114.544 267.591 114.729 267.362 114.729 cv
267.134 114.729 266.948 114.544 266.948 114.315 cv
266.948 114.086 267.134 113.901 267.362 113.901 cv
267.591 113.901 267.777 114.086 267.777 114.315 cv
f
267.569 114.522 mo
267.569 114.75 267.384 114.936 267.156 114.936 cv
266.927 114.936 266.742 114.75 266.742 114.522 cv
266.742 114.293 266.927 114.108 267.156 114.108 cv
267.384 114.108 267.569 114.293 267.569 114.522 cv
f
267.362 114.522 mo
267.362 114.75 267.177 114.936 266.948 114.936 cv
266.72 114.936 266.535 114.75 266.535 114.522 cv
266.535 114.293 266.72 114.108 266.948 114.108 cv
267.177 114.108 267.362 114.293 267.362 114.522 cv
f
267.156 114.729 mo
267.156 114.958 266.97 115.144 266.742 115.144 cv
266.513 115.144 266.328 114.958 266.328 114.729 cv
266.328 114.5 266.513 114.315 266.742 114.315 cv
266.97 114.315 267.156 114.5 267.156 114.729 cv
f
266.948 114.729 mo
266.948 114.958 266.763 115.144 266.535 115.144 cv
266.306 115.144 266.121 114.958 266.121 114.729 cv
266.121 114.5 266.306 114.315 266.535 114.315 cv
266.763 114.315 266.948 114.5 266.948 114.729 cv
f
266.742 114.936 mo
266.742 115.165 266.556 115.35 266.328 115.35 cv
266.099 115.35 265.914 115.165 265.914 114.936 cv
265.914 114.707 266.099 114.522 266.328 114.522 cv
266.556 114.522 266.742 114.707 266.742 114.936 cv
f
266.535 114.936 mo
266.535 115.165 266.349 115.35 266.121 115.35 cv
265.892 115.35 265.707 115.165 265.707 114.936 cv
265.707 114.707 265.892 114.522 266.121 114.522 cv
266.349 114.522 266.535 114.707 266.535 114.936 cv
f
266.328 114.936 mo
266.328 115.165 266.142 115.35 265.914 115.35 cv
265.685 115.35 265.5 115.165 265.5 114.936 cv
265.5 114.707 265.685 114.522 265.914 114.522 cv
266.142 114.522 266.328 114.707 266.328 114.936 cv
f
266.121 115.143 mo
266.121 115.371 265.936 115.557 265.707 115.557 cv
265.479 115.557 265.293 115.371 265.293 115.143 cv
265.293 114.914 265.479 114.728 265.707 114.728 cv
265.936 114.728 266.121 114.914 266.121 115.143 cv
f
265.914 115.143 mo
265.914 115.371 265.729 115.557 265.5 115.557 cv
265.272 115.557 265.086 115.371 265.086 115.143 cv
265.086 114.914 265.272 114.728 265.5 114.728 cv
265.729 114.728 265.914 114.914 265.914 115.143 cv
f
265.707 115.35 mo
265.707 115.579 265.521 115.764 265.293 115.764 cv
265.064 115.764 264.879 115.579 264.879 115.35 cv
264.879 115.121 265.064 114.936 265.293 114.936 cv
265.521 114.936 265.707 115.121 265.707 115.35 cv
f
265.5 115.35 mo
265.5 115.579 265.315 115.764 265.086 115.764 cv
264.858 115.764 264.673 115.579 264.673 115.35 cv
264.673 115.121 264.858 114.936 265.086 114.936 cv
265.315 114.936 265.5 115.121 265.5 115.35 cv
f
265.293 115.557 mo
265.293 115.786 265.108 115.971 264.879 115.971 cv
264.651 115.971 264.466 115.786 264.466 115.557 cv
264.466 115.328 264.651 115.143 264.879 115.143 cv
265.108 115.143 265.293 115.328 265.293 115.557 cv
f
265.086 115.557 mo
265.086 115.786 264.9 115.971 264.673 115.971 cv
264.444 115.971 264.259 115.786 264.259 115.557 cv
264.259 115.328 264.444 115.143 264.673 115.143 cv
264.9 115.143 265.086 115.328 265.086 115.557 cv
f
264.879 115.557 mo
264.879 115.786 264.694 115.971 264.466 115.971 cv
264.237 115.971 264.052 115.786 264.052 115.557 cv
264.052 115.328 264.237 115.143 264.466 115.143 cv
264.694 115.143 264.879 115.328 264.879 115.557 cv
f
264.879 115.764 mo
264.879 115.993 264.694 116.178 264.466 116.178 cv
264.237 116.178 264.052 115.993 264.052 115.764 cv
264.052 115.535 264.237 115.35 264.466 115.35 cv
264.694 115.35 264.879 115.535 264.879 115.764 cv
f
264.673 115.764 mo
264.673 115.993 264.487 116.178 264.259 116.178 cv
264.03 116.178 263.845 115.993 263.845 115.764 cv
263.845 115.535 264.03 115.35 264.259 115.35 cv
264.487 115.35 264.673 115.535 264.673 115.764 cv
f
264.466 115.971 mo
264.466 116.199 264.279 116.385 264.052 116.385 cv
263.823 116.385 263.638 116.199 263.638 115.971 cv
263.638 115.742 263.823 115.557 264.052 115.557 cv
264.279 115.557 264.466 115.742 264.466 115.971 cv
f
264.259 115.971 mo
264.259 116.199 264.073 116.385 263.845 116.385 cv
263.616 116.385 263.431 116.199 263.431 115.971 cv
263.431 115.742 263.616 115.557 263.845 115.557 cv
264.073 115.557 264.259 115.742 264.259 115.971 cv
f
264.052 115.971 mo
264.052 116.199 263.867 116.385 263.638 116.385 cv
263.41 116.385 263.224 116.199 263.224 115.971 cv
263.224 115.742 263.41 115.557 263.638 115.557 cv
263.867 115.557 264.052 115.742 264.052 115.971 cv
f
263.845 116.178 mo
263.845 116.407 263.658 116.592 263.431 116.592 cv
263.203 116.592 263.018 116.407 263.018 116.178 cv
263.018 115.949 263.203 115.764 263.431 115.764 cv
263.658 115.764 263.845 115.949 263.845 116.178 cv
f
263.638 116.178 mo
263.638 116.407 263.453 116.592 263.224 116.592 cv
262.995 116.592 262.81 116.407 262.81 116.178 cv
262.81 115.949 262.995 115.764 263.224 115.764 cv
263.453 115.764 263.638 115.949 263.638 116.178 cv
f
263.431 116.385 mo
263.431 116.614 263.246 116.799 263.018 116.799 cv
262.789 116.799 262.603 116.614 262.603 116.385 cv
262.603 116.156 262.789 115.971 263.018 115.971 cv
263.246 115.971 263.431 116.156 263.431 116.385 cv
f
263.223 116.385 mo
263.223 116.614 263.039 116.799 262.81 116.799 cv
262.582 116.799 262.396 116.614 262.396 116.385 cv
262.396 116.156 262.582 115.971 262.81 115.971 cv
263.039 115.971 263.223 116.156 263.223 116.385 cv
f
263.018 116.385 mo
263.018 116.614 262.832 116.799 262.603 116.799 cv
262.375 116.799 262.189 116.614 262.189 116.385 cv
262.189 116.156 262.375 115.971 262.603 115.971 cv
262.832 115.971 263.018 116.156 263.018 116.385 cv
f
262.81 116.592 mo
262.81 116.821 262.625 117.006 262.396 117.006 cv
262.168 117.006 261.982 116.821 261.982 116.592 cv
261.982 116.363 262.168 116.178 262.396 116.178 cv
262.625 116.178 262.81 116.363 262.81 116.592 cv
f
262.602 116.592 mo
262.602 116.821 262.418 117.006 262.189 117.006 cv
261.961 117.006 261.775 116.821 261.775 116.592 cv
261.775 116.363 261.961 116.178 262.189 116.178 cv
262.418 116.178 262.602 116.363 262.602 116.592 cv
f
262.396 116.799 mo
262.396 117.028 262.211 117.213 261.982 117.213 cv
261.754 117.213 261.568 117.028 261.568 116.799 cv
261.568 116.57 261.754 116.385 261.982 116.385 cv
262.211 116.385 262.396 116.57 262.396 116.799 cv
f
262.189 116.799 mo
262.189 117.028 262.004 117.213 261.775 117.213 cv
261.546 117.213 261.361 117.028 261.361 116.799 cv
261.361 116.57 261.546 116.385 261.775 116.385 cv
262.004 116.385 262.189 116.57 262.189 116.799 cv
f
261.981 117.006 mo
261.981 117.235 261.796 117.42 261.568 117.42 cv
261.339 117.42 261.154 117.235 261.154 117.006 cv
261.154 116.777 261.339 116.592 261.568 116.592 cv
261.796 116.592 261.981 116.777 261.981 117.006 cv
f
261.775 117.006 mo
261.775 117.235 261.589 117.42 261.361 117.42 cv
261.132 117.42 260.947 117.235 260.947 117.006 cv
260.947 116.777 261.132 116.592 261.361 116.592 cv
261.589 116.592 261.775 116.777 261.775 117.006 cv
f
261.568 117.006 mo
261.568 117.235 261.382 117.42 261.154 117.42 cv
260.925 117.42 260.741 117.235 260.741 117.006 cv
260.741 116.777 260.925 116.592 261.154 116.592 cv
261.382 116.592 261.568 116.777 261.568 117.006 cv
f
261.361 117.213 mo
261.361 117.442 261.175 117.627 260.947 117.627 cv
260.718 117.627 260.533 117.442 260.533 117.213 cv
260.533 116.984 260.718 116.799 260.947 116.799 cv
261.175 116.799 261.361 116.984 261.361 117.213 cv
f
261.154 117.213 mo
261.154 117.442 260.968 117.627 260.741 117.627 cv
260.511 117.627 260.326 117.442 260.326 117.213 cv
260.326 116.984 260.511 116.799 260.741 116.799 cv
260.968 116.799 261.154 116.984 261.154 117.213 cv
f
260.947 117.213 mo
260.947 117.442 260.761 117.627 260.533 117.627 cv
260.304 117.627 260.12 117.442 260.12 117.213 cv
260.12 116.984 260.304 116.799 260.533 116.799 cv
260.761 116.799 260.947 116.984 260.947 117.213 cv
f
260.947 117.419 mo
260.947 117.648 260.761 117.833 260.533 117.833 cv
260.304 117.833 260.12 117.648 260.12 117.419 cv
260.12 117.19 260.304 117.005 260.533 117.005 cv
260.761 117.005 260.947 117.19 260.947 117.419 cv
f
260.741 117.419 mo
260.741 117.648 260.554 117.833 260.326 117.833 cv
260.097 117.833 259.913 117.648 259.913 117.419 cv
259.913 117.19 260.097 117.005 260.326 117.005 cv
260.554 117.005 260.741 117.19 260.741 117.419 cv
f
260.533 117.419 mo
260.533 117.648 260.347 117.833 260.12 117.833 cv
259.89 117.833 259.705 117.648 259.705 117.419 cv
259.705 117.19 259.89 117.005 260.12 117.005 cv
260.347 117.005 260.533 117.19 260.533 117.419 cv
f
260.326 117.626 mo
260.326 117.855 260.14 118.04 259.913 118.04 cv
259.684 118.04 259.499 117.855 259.499 117.626 cv
259.499 117.397 259.684 117.212 259.913 117.212 cv
260.14 117.212 260.326 117.397 260.326 117.626 cv
f
260.12 117.626 mo
260.12 117.855 259.932 118.04 259.705 118.04 cv
259.477 118.04 259.292 117.855 259.292 117.626 cv
259.292 117.397 259.477 117.212 259.705 117.212 cv
259.932 117.212 260.12 117.397 260.12 117.626 cv
f
259.913 117.626 mo
259.913 117.855 259.727 118.04 259.499 118.04 cv
259.27 118.04 259.085 117.855 259.085 117.626 cv
259.085 117.397 259.27 117.212 259.499 117.212 cv
259.727 117.212 259.913 117.397 259.913 117.626 cv
f
259.705 117.833 mo
259.705 118.062 259.52 118.248 259.292 118.248 cv
259.063 118.248 258.877 118.062 258.877 117.833 cv
258.877 117.605 259.063 117.419 259.292 117.419 cv
259.52 117.419 259.705 117.605 259.705 117.833 cv
f
259.499 117.833 mo
259.499 118.062 259.311 118.248 259.085 118.248 cv
258.856 118.248 258.671 118.062 258.671 117.833 cv
258.671 117.605 258.856 117.419 259.085 117.419 cv
259.311 117.419 259.499 117.605 259.499 117.833 cv
f
259.292 118.041 mo
259.292 118.269 259.106 118.455 258.877 118.455 cv
258.649 118.455 258.464 118.269 258.464 118.041 cv
258.464 117.811 258.649 117.626 258.877 117.626 cv
259.106 117.626 259.292 117.811 259.292 118.041 cv
f
259.085 118.041 mo
259.085 118.269 258.899 118.455 258.671 118.455 cv
258.442 118.455 258.257 118.269 258.257 118.041 cv
258.257 117.811 258.442 117.626 258.671 117.626 cv
258.899 117.626 259.085 117.811 259.085 118.041 cv
f
258.877 118.041 mo
258.877 118.269 258.692 118.455 258.464 118.455 cv
258.235 118.455 258.05 118.269 258.05 118.041 cv
258.05 117.811 258.235 117.626 258.464 117.626 cv
258.692 117.626 258.877 117.811 258.877 118.041 cv
f
258.671 118.248 mo
258.671 118.476 258.485 118.662 258.257 118.662 cv
258.028 118.662 257.844 118.476 257.844 118.248 cv
257.844 118.018 258.028 117.833 258.257 117.833 cv
258.485 117.833 258.671 118.018 258.671 118.248 cv
f
258.464 118.248 mo
258.464 118.476 258.278 118.662 258.05 118.662 cv
257.821 118.662 257.636 118.476 257.636 118.248 cv
257.636 118.018 257.821 117.833 258.05 117.833 cv
258.278 117.833 258.464 118.018 258.464 118.248 cv
f
258.257 118.248 mo
258.257 118.476 258.07 118.662 257.844 118.662 cv
257.614 118.662 257.429 118.476 257.429 118.248 cv
257.429 118.018 257.614 117.833 257.844 117.833 cv
258.07 117.833 258.257 118.018 258.257 118.248 cv
f
258.257 118.455 mo
258.257 118.683 258.07 118.869 257.844 118.869 cv
257.614 118.869 257.429 118.683 257.429 118.455 cv
257.429 118.226 257.614 118.041 257.844 118.041 cv
258.07 118.041 258.257 118.226 258.257 118.455 cv
f
258.05 118.455 mo
258.05 118.683 257.864 118.869 257.636 118.869 cv
257.407 118.869 257.223 118.683 257.223 118.455 cv
257.223 118.226 257.407 118.041 257.636 118.041 cv
257.864 118.041 258.05 118.226 258.05 118.455 cv
f
257.844 118.455 mo
257.844 118.683 257.657 118.869 257.429 118.869 cv
257.2 118.869 257.016 118.683 257.016 118.455 cv
257.016 118.226 257.2 118.041 257.429 118.041 cv
257.657 118.041 257.844 118.226 257.844 118.455 cv
f
257.636 118.455 mo
257.636 118.683 257.449 118.869 257.223 118.869 cv
256.993 118.869 256.809 118.683 256.809 118.455 cv
256.809 118.226 256.993 118.041 257.223 118.041 cv
257.449 118.041 257.636 118.226 257.636 118.455 cv
f
257.636 118.662 mo
257.636 118.889 257.449 119.076 257.223 119.076 cv
256.993 119.076 256.809 118.889 256.809 118.662 cv
256.809 118.432 256.993 118.248 257.223 118.248 cv
257.449 118.248 257.636 118.432 257.636 118.662 cv
f
257.429 118.662 mo
257.429 118.889 257.243 119.076 257.016 119.076 cv
256.787 119.076 256.602 118.889 256.602 118.662 cv
256.602 118.432 256.787 118.248 257.016 118.248 cv
257.243 118.248 257.429 118.432 257.429 118.662 cv
f
257.223 118.662 mo
257.223 118.889 257.036 119.076 256.809 119.076 cv
256.579 119.076 256.395 118.889 256.395 118.662 cv
256.395 118.432 256.579 118.248 256.809 118.248 cv
257.036 118.248 257.223 118.432 257.223 118.662 cv
f
257.016 118.869 mo
257.016 119.096 256.83 119.283 256.602 119.283 cv
256.371 119.283 256.188 119.096 256.188 118.869 cv
256.188 118.639 256.371 118.455 256.602 118.455 cv
256.83 118.455 257.016 118.639 257.016 118.869 cv
f
256.809 118.869 mo
256.809 119.096 256.623 119.283 256.395 119.283 cv
256.164 119.283 255.98 119.096 255.98 118.869 cv
255.98 118.639 256.164 118.455 256.395 118.455 cv
256.623 118.455 256.809 118.639 256.809 118.869 cv
f
256.602 118.869 mo
256.602 119.096 256.414 119.283 256.188 119.283 cv
255.959 119.283 255.773 119.096 255.773 118.869 cv
255.773 118.639 255.959 118.455 256.188 118.455 cv
256.414 118.455 256.602 118.639 256.602 118.869 cv
f
256.395 118.869 mo
256.395 119.096 256.209 119.283 255.98 119.283 cv
255.752 119.283 255.568 119.096 255.568 118.869 cv
255.568 118.639 255.752 118.455 255.98 118.455 cv
256.209 118.455 256.395 118.639 256.395 118.869 cv
f
256.395 119.076 mo
256.395 119.304 256.209 119.49 255.98 119.49 cv
255.752 119.49 255.568 119.304 255.568 119.076 cv
255.568 118.847 255.752 118.662 255.98 118.662 cv
256.209 118.662 256.395 118.847 256.395 119.076 cv
f
256.188 119.076 mo
256.188 119.304 256.002 119.49 255.773 119.49 cv
255.545 119.49 255.359 119.304 255.359 119.076 cv
255.359 118.847 255.545 118.662 255.773 118.662 cv
256.002 118.662 256.188 118.847 256.188 119.076 cv
f
255.98 119.076 mo
255.98 119.304 255.795 119.49 255.568 119.49 cv
255.338 119.49 255.152 119.304 255.152 119.076 cv
255.152 118.847 255.338 118.662 255.568 118.662 cv
255.795 118.662 255.98 118.847 255.98 119.076 cv
f
255.773 119.283 mo
255.773 119.51 255.588 119.697 255.359 119.697 cv
255.13 119.697 254.945 119.51 254.945 119.283 cv
254.945 119.054 255.13 118.869 255.359 118.869 cv
255.588 118.869 255.773 119.054 255.773 119.283 cv
f
255.568 119.283 mo
255.568 119.51 255.381 119.697 255.152 119.697 cv
254.923 119.697 254.739 119.51 254.739 119.283 cv
254.739 119.054 254.923 118.869 255.152 118.869 cv
255.381 118.869 255.568 119.054 255.568 119.283 cv
f
255.359 119.283 mo
255.359 119.51 255.173 119.697 254.945 119.697 cv
254.716 119.697 254.532 119.51 254.532 119.283 cv
254.532 119.054 254.716 118.869 254.945 118.869 cv
255.173 118.869 255.359 119.054 255.359 119.283 cv
f
255.152 119.49 mo
255.152 119.717 254.966 119.904 254.739 119.904 cv
254.509 119.904 254.325 119.717 254.325 119.49 cv
254.325 119.26 254.509 119.076 254.739 119.076 cv
254.966 119.076 255.152 119.26 255.152 119.49 cv
f
254.945 119.49 mo
254.945 119.717 254.76 119.904 254.532 119.904 cv
254.302 119.904 254.118 119.717 254.118 119.49 cv
254.118 119.26 254.302 119.076 254.532 119.076 cv
254.76 119.076 254.945 119.26 254.945 119.49 cv
f
254.739 119.49 mo
254.739 119.717 254.553 119.904 254.325 119.904 cv
254.095 119.904 253.911 119.717 253.911 119.49 cv
253.911 119.26 254.095 119.076 254.325 119.076 cv
254.553 119.076 254.739 119.26 254.739 119.49 cv
f
254.532 119.696 mo
254.532 119.925 254.344 120.11 254.118 120.11 cv
253.888 120.11 253.704 119.925 253.704 119.696 cv
253.704 119.468 253.888 119.282 254.118 119.282 cv
254.344 119.282 254.532 119.468 254.532 119.696 cv
f
254.325 119.696 mo
254.325 119.925 254.139 120.11 253.911 120.11 cv
253.681 120.11 253.498 119.925 253.498 119.696 cv
253.498 119.468 253.681 119.282 253.911 119.282 cv
254.139 119.282 254.325 119.468 254.325 119.696 cv
f
254.118 119.696 mo
254.118 119.925 253.932 120.11 253.704 120.11 cv
253.475 120.11 253.29 119.925 253.29 119.696 cv
253.29 119.468 253.475 119.282 253.704 119.282 cv
253.932 119.282 254.118 119.468 254.118 119.696 cv
f
253.911 119.903 mo
253.911 120.132 253.724 120.317 253.498 120.317 cv
253.268 120.317 253.083 120.132 253.083 119.903 cv
253.083 119.674 253.268 119.489 253.498 119.489 cv
253.724 119.489 253.911 119.674 253.911 119.903 cv
f
253.704 119.903 mo
253.704 120.132 253.518 120.317 253.29 120.317 cv
253.061 120.317 252.876 120.132 252.876 119.903 cv
252.876 119.674 253.061 119.489 253.29 119.489 cv
253.518 119.489 253.704 119.674 253.704 119.903 cv
f
253.498 119.903 mo
253.498 120.132 253.31 120.317 253.083 120.317 cv
252.853 120.317 252.67 120.132 252.67 119.903 cv
252.67 119.674 252.853 119.489 253.083 119.489 cv
253.31 119.489 253.498 119.674 253.498 119.903 cv
f
253.29 119.903 mo
253.29 120.132 253.103 120.317 252.876 120.317 cv
252.647 120.317 252.462 120.132 252.462 119.903 cv
252.462 119.674 252.647 119.489 252.876 119.489 cv
253.103 119.489 253.29 119.674 253.29 119.903 cv
f
253.29 120.11 mo
253.29 120.338 253.103 120.524 252.876 120.524 cv
252.647 120.524 252.462 120.338 252.462 120.11 cv
252.462 119.881 252.647 119.696 252.876 119.696 cv
253.103 119.696 253.29 119.881 253.29 120.11 cv
f
253.083 120.11 mo
253.083 120.338 252.897 120.524 252.67 120.524 cv
252.44 120.524 252.256 120.338 252.256 120.11 cv
252.256 119.881 252.44 119.696 252.67 119.696 cv
252.897 119.696 253.083 119.881 253.083 120.11 cv
f
252.876 120.11 mo
252.876 120.338 252.69 120.524 252.462 120.524 cv
252.233 120.524 252.049 120.338 252.049 120.11 cv
252.049 119.881 252.233 119.696 252.462 119.696 cv
252.69 119.696 252.876 119.881 252.876 120.11 cv
f
252.67 120.11 mo
252.67 120.338 252.482 120.524 252.256 120.524 cv
252.025 120.524 251.842 120.338 251.842 120.11 cv
251.842 119.881 252.025 119.696 252.256 119.696 cv
252.482 119.696 252.67 119.881 252.67 120.11 cv
f
252.67 120.317 mo
252.67 120.546 252.482 120.731 252.256 120.731 cv
252.025 120.731 251.842 120.546 251.842 120.317 cv
251.842 120.088 252.025 119.903 252.256 119.903 cv
252.482 119.903 252.67 120.088 252.67 120.317 cv
f
252.462 120.317 mo
252.462 120.546 252.277 120.731 252.049 120.731 cv
251.819 120.731 251.635 120.546 251.635 120.317 cv
251.635 120.088 251.819 119.903 252.049 119.903 cv
252.277 119.903 252.462 120.088 252.462 120.317 cv
f
252.256 120.317 mo
252.256 120.546 252.069 120.731 251.842 120.731 cv
251.612 120.731 251.428 120.546 251.428 120.317 cv
251.428 120.088 251.612 119.903 251.842 119.903 cv
252.069 119.903 252.256 120.088 252.256 120.317 cv
f
252.049 120.317 mo
252.049 120.546 251.863 120.731 251.635 120.731 cv
251.404 120.731 251.221 120.546 251.221 120.317 cv
251.221 120.088 251.404 119.903 251.635 119.903 cv
251.863 119.903 252.049 120.088 252.049 120.317 cv
f
251.842 120.524 mo
251.842 120.752 251.656 120.938 251.428 120.938 cv
251.199 120.938 251.014 120.752 251.014 120.524 cv
251.014 120.295 251.199 120.11 251.428 120.11 cv
251.656 120.11 251.842 120.295 251.842 120.524 cv
f
251.635 120.524 mo
251.635 120.752 251.449 120.938 251.221 120.938 cv
250.992 120.938 250.807 120.752 250.807 120.524 cv
250.807 120.295 250.992 120.11 251.221 120.11 cv
251.449 120.11 251.635 120.295 251.635 120.524 cv
f
251.428 120.524 mo
251.428 120.752 251.242 120.938 251.014 120.938 cv
250.785 120.938 250.601 120.752 250.601 120.524 cv
250.601 120.295 250.785 120.11 251.014 120.11 cv
251.242 120.11 251.428 120.295 251.428 120.524 cv
f
251.221 120.524 mo
251.221 120.752 251.035 120.938 250.807 120.938 cv
250.577 120.938 250.394 120.752 250.394 120.524 cv
250.394 120.295 250.577 120.11 250.807 120.11 cv
251.035 120.11 251.221 120.295 251.221 120.524 cv
f
251.221 120.731 mo
251.221 120.96 251.035 121.146 250.807 121.146 cv
250.577 121.146 250.394 120.96 250.394 120.731 cv
250.394 120.502 250.577 120.317 250.807 120.317 cv
251.035 120.317 251.221 120.502 251.221 120.731 cv
f
251.014 120.731 mo
251.014 120.96 250.828 121.146 250.601 121.146 cv
250.371 121.146 250.187 120.96 250.187 120.731 cv
250.187 120.502 250.371 120.317 250.601 120.317 cv
250.828 120.317 251.014 120.502 251.014 120.731 cv
f
250.807 120.731 mo
250.807 120.96 250.621 121.146 250.394 121.146 cv
250.164 121.146 249.98 120.96 249.98 120.731 cv
249.98 120.502 250.164 120.317 250.394 120.317 cv
250.621 120.317 250.807 120.502 250.807 120.731 cv
f
250.601 120.731 mo
250.601 120.96 250.414 121.146 250.187 121.146 cv
249.957 121.146 249.773 120.96 249.773 120.731 cv
249.773 120.502 249.957 120.317 250.187 120.317 cv
250.414 120.317 250.601 120.502 250.601 120.731 cv
f
250.601 120.938 mo
250.601 121.167 250.414 121.352 250.187 121.352 cv
249.957 121.352 249.773 121.167 249.773 120.938 cv
249.773 120.709 249.957 120.524 250.187 120.524 cv
250.414 120.524 250.601 120.709 250.601 120.938 cv
f
250.394 120.938 mo
250.394 121.167 250.207 121.352 249.98 121.352 cv
249.75 121.352 249.566 121.167 249.566 120.938 cv
249.566 120.709 249.75 120.524 249.98 120.524 cv
250.207 120.524 250.394 120.709 250.394 120.938 cv
f
250.186 120.938 mo
250.186 121.167 249.998 121.352 249.773 121.352 cv
249.543 121.352 249.359 121.167 249.359 120.938 cv
249.359 120.709 249.543 120.524 249.773 120.524 cv
249.998 120.524 250.186 120.709 250.186 120.938 cv
f
249.98 120.938 mo
249.98 121.167 249.793 121.352 249.566 121.352 cv
249.336 121.352 249.152 121.167 249.152 120.938 cv
249.152 120.709 249.336 120.524 249.566 120.524 cv
249.793 120.524 249.98 120.709 249.98 120.938 cv
f
249.98 121.146 mo
249.98 121.373 249.793 121.558 249.566 121.558 cv
249.336 121.558 249.152 121.373 249.152 121.146 cv
249.152 120.916 249.336 120.73 249.566 120.73 cv
249.793 120.73 249.98 120.916 249.98 121.146 cv
f
249.773 121.146 mo
249.773 121.373 249.586 121.558 249.359 121.558 cv
249.129 121.558 248.945 121.373 248.945 121.146 cv
248.945 120.916 249.129 120.73 249.359 120.73 cv
249.586 120.73 249.773 120.916 249.773 121.146 cv
f
249.565 121.146 mo
249.565 121.373 249.379 121.558 249.152 121.558 cv
248.922 121.558 248.738 121.373 248.738 121.146 cv
248.738 120.916 248.922 120.73 249.152 120.73 cv
249.379 120.73 249.565 120.916 249.565 121.146 cv
f
249.359 121.146 mo
249.359 121.373 249.172 121.558 248.945 121.558 cv
248.715 121.558 248.531 121.373 248.531 121.146 cv
248.531 120.916 248.715 120.73 248.945 120.73 cv
249.172 120.73 249.359 120.916 249.359 121.146 cv
f
249.152 121.351 mo
249.152 121.58 248.965 121.765 248.738 121.765 cv
248.507 121.765 248.324 121.58 248.324 121.351 cv
248.324 121.123 248.507 120.937 248.738 120.937 cv
248.965 120.937 249.152 121.123 249.152 121.351 cv
f
248.944 121.351 mo
248.944 121.58 248.757 121.765 248.531 121.765 cv
248.301 121.765 248.116 121.58 248.116 121.351 cv
248.116 121.123 248.301 120.937 248.531 120.937 cv
248.757 120.937 248.944 121.123 248.944 121.351 cv
f
248.738 121.351 mo
248.738 121.58 248.551 121.765 248.324 121.765 cv
248.094 121.765 247.91 121.58 247.91 121.351 cv
247.91 121.123 248.094 120.937 248.324 120.937 cv
248.551 120.937 248.738 121.123 248.738 121.351 cv
f
248.531 121.351 mo
248.531 121.58 248.344 121.765 248.116 121.765 cv
247.888 121.765 247.703 121.58 247.703 121.351 cv
247.703 121.123 247.888 120.937 248.116 120.937 cv
248.344 120.937 248.531 121.123 248.531 121.351 cv
f
248.531 121.558 mo
248.531 121.787 248.344 121.973 248.116 121.973 cv
247.888 121.973 247.703 121.787 247.703 121.558 cv
247.703 121.33 247.888 121.146 248.116 121.146 cv
248.344 121.146 248.531 121.33 248.531 121.558 cv
f
248.324 121.558 mo
248.324 121.787 248.138 121.973 247.91 121.973 cv
247.678 121.973 247.496 121.787 247.496 121.558 cv
247.496 121.33 247.678 121.146 247.91 121.146 cv
248.138 121.146 248.324 121.33 248.324 121.558 cv
f
248.116 121.558 mo
248.116 121.787 247.93 121.973 247.703 121.973 cv
247.474 121.973 247.289 121.787 247.289 121.558 cv
247.289 121.33 247.474 121.146 247.703 121.146 cv
247.93 121.146 248.116 121.33 248.116 121.558 cv
f
247.91 121.558 mo
247.91 121.787 247.723 121.973 247.496 121.973 cv
247.267 121.973 247.082 121.787 247.082 121.558 cv
247.082 121.33 247.267 121.146 247.496 121.146 cv
247.723 121.146 247.91 121.33 247.91 121.558 cv
f
247.703 121.765 mo
247.703 121.994 247.515 122.18 247.289 122.18 cv
247.058 122.18 246.875 121.994 246.875 121.765 cv
246.875 121.537 247.058 121.351 247.289 121.351 cv
247.515 121.351 247.703 121.537 247.703 121.765 cv
f
247.496 121.765 mo
247.496 121.994 247.31 122.18 247.082 122.18 cv
246.853 122.18 246.668 121.994 246.668 121.765 cv
246.668 121.537 246.853 121.351 247.082 121.351 cv
247.31 121.351 247.496 121.537 247.496 121.765 cv
f
247.289 121.765 mo
247.289 121.994 247.103 122.18 246.875 122.18 cv
246.646 122.18 246.461 121.994 246.461 121.765 cv
246.461 121.537 246.646 121.351 246.875 121.351 cv
247.103 121.351 247.289 121.537 247.289 121.765 cv
f
247.082 121.765 mo
247.082 121.994 246.894 122.18 246.668 122.18 cv
246.439 122.18 246.254 121.994 246.254 121.765 cv
246.254 121.537 246.439 121.351 246.668 121.351 cv
246.894 121.351 247.082 121.537 247.082 121.765 cv
f
246.875 121.973 mo
246.875 122.202 246.689 122.387 246.461 122.387 cv
246.232 122.387 246.047 122.202 246.047 121.973 cv
246.047 121.744 246.232 121.558 246.461 121.558 cv
246.689 121.558 246.875 121.744 246.875 121.973 cv
f
246.668 121.973 mo
246.668 122.202 246.482 122.387 246.254 122.387 cv
246.025 122.387 245.84 122.202 245.84 121.973 cv
245.84 121.744 246.025 121.558 246.254 121.558 cv
246.482 121.558 246.668 121.744 246.668 121.973 cv
f
246.461 121.973 mo
246.461 122.202 246.275 122.387 246.047 122.387 cv
245.818 122.387 245.633 122.202 245.633 121.973 cv
245.633 121.744 245.818 121.558 246.047 121.558 cv
246.275 121.558 246.461 121.744 246.461 121.973 cv
f
246.254 121.973 mo
246.254 122.202 246.068 122.387 245.84 122.387 cv
245.611 122.387 245.426 122.202 245.426 121.973 cv
245.426 121.744 245.611 121.558 245.84 121.558 cv
246.068 121.558 246.254 121.744 246.254 121.973 cv
f
246.047 122.18 mo
246.047 122.408 245.862 122.594 245.633 122.594 cv
245.404 122.594 245.219 122.408 245.219 122.18 cv
245.219 121.951 245.404 121.765 245.633 121.765 cv
245.862 121.765 246.047 121.951 246.047 122.18 cv
f
245.84 122.18 mo
245.84 122.408 245.654 122.594 245.426 122.594 cv
245.197 122.594 245.012 122.408 245.012 122.18 cv
245.012 121.951 245.197 121.765 245.426 121.765 cv
245.654 121.765 245.84 121.951 245.84 122.18 cv
f
245.633 122.18 mo
245.633 122.408 245.447 122.594 245.219 122.594 cv
244.99 122.594 244.805 122.408 244.805 122.18 cv
244.805 121.951 244.99 121.765 245.219 121.765 cv
245.447 121.765 245.633 121.951 245.633 122.18 cv
f
245.426 122.18 mo
245.426 122.408 245.241 122.594 245.012 122.594 cv
244.783 122.594 244.598 122.408 244.598 122.18 cv
244.598 121.951 244.783 121.765 245.012 121.765 cv
245.241 121.765 245.426 121.951 245.426 122.18 cv
f
245.426 122.387 mo
245.426 122.615 245.241 122.801 245.012 122.801 cv
244.783 122.801 244.598 122.615 244.598 122.387 cv
244.598 122.158 244.783 121.973 245.012 121.973 cv
245.241 121.973 245.426 122.158 245.426 122.387 cv
f
245.219 122.387 mo
245.219 122.615 245.034 122.801 244.805 122.801 cv
244.576 122.801 244.391 122.615 244.391 122.387 cv
244.391 122.158 244.576 121.973 244.805 121.973 cv
245.034 121.973 245.219 122.158 245.219 122.387 cv
f
245.012 122.387 mo
245.012 122.615 244.826 122.801 244.598 122.801 cv
244.37 122.801 244.185 122.615 244.185 122.387 cv
244.185 122.158 244.37 121.973 244.598 121.973 cv
244.826 121.973 245.012 122.158 245.012 122.387 cv
f
244.805 122.387 mo
244.805 122.615 244.62 122.801 244.391 122.801 cv
244.162 122.801 243.978 122.615 243.978 122.387 cv
243.978 122.158 244.162 121.973 244.391 121.973 cv
244.62 121.973 244.805 122.158 244.805 122.387 cv
f
244.598 122.387 mo
244.598 122.615 244.413 122.801 244.185 122.801 cv
243.955 122.801 243.771 122.615 243.771 122.387 cv
243.771 122.158 243.955 121.973 244.185 121.973 cv
244.413 121.973 244.598 122.158 244.598 122.387 cv
f
244.598 122.594 mo
244.598 122.823 244.413 123.008 244.185 123.008 cv
243.955 123.008 243.771 122.823 243.771 122.594 cv
243.771 122.365 243.955 122.18 244.185 122.18 cv
244.413 122.18 244.598 122.365 244.598 122.594 cv
f
244.391 122.594 mo
244.391 122.823 244.205 123.008 243.978 123.008 cv
243.748 123.008 243.564 122.823 243.564 122.594 cv
243.564 122.365 243.748 122.18 243.978 122.18 cv
244.205 122.18 244.391 122.365 244.391 122.594 cv
f
244.185 122.594 mo
244.185 122.823 243.998 123.008 243.771 123.008 cv
243.542 123.008 243.357 122.823 243.357 122.594 cv
243.357 122.365 243.542 122.18 243.771 122.18 cv
243.998 122.18 244.185 122.365 244.185 122.594 cv
f
243.977 122.594 mo
243.977 122.823 243.791 123.008 243.564 123.008 cv
243.334 123.008 243.15 122.823 243.15 122.594 cv
243.15 122.365 243.334 122.18 243.564 122.18 cv
243.791 122.18 243.977 122.365 243.977 122.594 cv
f
243.77 122.594 mo
243.77 122.823 243.584 123.008 243.357 123.008 cv
243.127 123.008 242.943 122.823 242.943 122.594 cv
242.943 122.365 243.127 122.18 243.357 122.18 cv
243.584 122.18 243.77 122.365 243.77 122.594 cv
f
243.77 122.8 mo
243.77 123.029 243.584 123.215 243.357 123.215 cv
243.127 123.215 242.943 123.029 242.943 122.8 cv
242.943 122.572 243.127 122.386 243.357 122.386 cv
243.584 122.386 243.77 122.572 243.77 122.8 cv
f
243.564 122.8 mo
243.564 123.029 243.377 123.215 243.15 123.215 cv
242.921 123.215 242.736 123.029 242.736 122.8 cv
242.736 122.572 242.921 122.386 243.15 122.386 cv
243.377 122.386 243.564 122.572 243.564 122.8 cv
f
243.356 122.8 mo
243.356 123.029 243.17 123.215 242.943 123.215 cv
242.713 123.215 242.529 123.029 242.529 122.8 cv
242.529 122.572 242.713 122.386 242.943 122.386 cv
243.17 122.386 243.356 122.572 243.356 122.8 cv
f
243.149 122.8 mo
243.149 123.029 242.964 123.215 242.736 123.215 cv
242.506 123.215 242.321 123.029 242.321 122.8 cv
242.321 122.572 242.506 122.386 242.736 122.386 cv
242.964 122.386 243.149 122.572 243.149 122.8 cv
f
242.943 122.8 mo
242.943 123.029 242.756 123.215 242.529 123.215 cv
242.3 123.215 242.114 123.029 242.114 122.8 cv
242.114 122.572 242.3 122.386 242.529 122.386 cv
242.756 122.386 242.943 122.572 242.943 122.8 cv
f
242.943 123.008 mo
242.943 123.237 242.756 123.422 242.529 123.422 cv
242.3 123.422 242.114 123.237 242.114 123.008 cv
242.114 122.779 242.3 122.594 242.529 122.594 cv
242.756 122.594 242.943 122.779 242.943 123.008 cv
f
242.736 123.008 mo
242.736 123.237 242.549 123.422 242.321 123.422 cv
242.093 123.422 241.909 123.237 241.909 123.008 cv
241.909 122.779 242.093 122.594 242.321 122.594 cv
242.549 122.594 242.736 122.779 242.736 123.008 cv
f
242.528 123.008 mo
242.528 123.237 242.343 123.422 242.114 123.422 cv
241.885 123.422 241.7 123.237 241.7 123.008 cv
241.7 122.779 241.885 122.594 242.114 122.594 cv
242.343 122.594 242.528 122.779 242.528 123.008 cv
f
242.321 123.008 mo
242.321 123.237 242.136 123.422 241.908 123.422 cv
241.679 123.422 241.493 123.237 241.493 123.008 cv
241.493 122.779 241.679 122.594 241.908 122.594 cv
242.136 122.594 242.321 122.779 242.321 123.008 cv
f
242.114 123.008 mo
242.114 123.237 241.929 123.422 241.7 123.422 cv
241.472 123.422 241.286 123.237 241.286 123.008 cv
241.286 122.779 241.472 122.594 241.7 122.594 cv
241.929 122.594 242.114 122.779 242.114 123.008 cv
f
242.114 123.215 mo
242.114 123.443 241.929 123.629 241.7 123.629 cv
241.472 123.629 241.286 123.443 241.286 123.215 cv
241.286 122.986 241.472 122.8 241.7 122.8 cv
241.929 122.8 242.114 122.986 242.114 123.215 cv
f
241.908 123.215 mo
241.908 123.443 241.722 123.629 241.493 123.629 cv
241.265 123.629 241.08 123.443 241.08 123.215 cv
241.08 122.986 241.265 122.8 241.493 122.8 cv
241.722 122.8 241.908 122.986 241.908 123.215 cv
f
241.7 123.215 mo
241.7 123.443 241.515 123.629 241.286 123.629 cv
241.058 123.629 240.872 123.443 240.872 123.215 cv
240.872 122.986 241.058 122.8 241.286 122.8 cv
241.515 122.8 241.7 122.986 241.7 123.215 cv
f
241.493 123.215 mo
241.493 123.443 241.308 123.629 241.08 123.629 cv
240.851 123.629 240.666 123.443 240.666 123.215 cv
240.666 122.986 240.851 122.8 241.08 122.8 cv
241.308 122.8 241.493 122.986 241.493 123.215 cv
f
241.286 123.215 mo
241.286 123.443 241.101 123.629 240.872 123.629 cv
240.644 123.629 240.459 123.443 240.459 123.215 cv
240.459 122.986 240.644 122.8 240.872 122.8 cv
241.101 122.8 241.286 122.986 241.286 123.215 cv
f
241.08 123.421 mo
241.08 123.65 240.894 123.835 240.666 123.835 cv
240.437 123.835 240.252 123.65 240.252 123.421 cv
240.252 123.192 240.437 123.007 240.666 123.007 cv
240.894 123.007 241.08 123.192 241.08 123.421 cv
f
240.872 123.421 mo
240.872 123.65 240.688 123.835 240.459 123.835 cv
240.23 123.835 240.045 123.65 240.045 123.421 cv
240.045 123.192 240.23 123.007 240.459 123.007 cv
240.688 123.007 240.872 123.192 240.872 123.421 cv
f
240.666 123.421 mo
240.666 123.65 240.48 123.835 240.252 123.835 cv
240.024 123.835 239.838 123.65 239.838 123.421 cv
239.838 123.192 240.024 123.007 240.252 123.007 cv
240.48 123.007 240.666 123.192 240.666 123.421 cv
f
240.459 123.421 mo
240.459 123.65 240.273 123.835 240.045 123.835 cv
239.816 123.835 239.631 123.65 239.631 123.421 cv
239.631 123.192 239.816 123.007 240.045 123.007 cv
240.273 123.007 240.459 123.192 240.459 123.421 cv
f
240.252 123.628 mo
240.252 123.857 240.066 124.042 239.838 124.042 cv
239.609 124.042 239.424 123.857 239.424 123.628 cv
239.424 123.399 239.609 123.214 239.838 123.214 cv
240.066 123.214 240.252 123.399 240.252 123.628 cv
f
240.045 123.628 mo
240.045 123.857 239.859 124.042 239.631 124.042 cv
239.403 124.042 239.217 123.857 239.217 123.628 cv
239.217 123.399 239.403 123.214 239.631 123.214 cv
239.859 123.214 240.045 123.399 240.045 123.628 cv
f
239.838 123.628 mo
239.838 123.857 239.653 124.042 239.424 124.042 cv
239.196 124.042 239.01 123.857 239.01 123.628 cv
239.01 123.399 239.196 123.214 239.424 123.214 cv
239.653 123.214 239.838 123.399 239.838 123.628 cv
f
239.631 123.628 mo
239.631 123.857 239.446 124.042 239.217 124.042 cv
238.988 124.042 238.803 123.857 238.803 123.628 cv
238.803 123.399 238.988 123.214 239.217 123.214 cv
239.446 123.214 239.631 123.399 239.631 123.628 cv
f
239.424 123.628 mo
239.424 123.857 239.238 124.042 239.01 124.042 cv
238.782 124.042 238.597 123.857 238.597 123.628 cv
238.597 123.399 238.782 123.214 239.01 123.214 cv
239.238 123.214 239.424 123.399 239.424 123.628 cv
f
239.424 123.835 mo
239.424 124.064 239.238 124.249 239.01 124.249 cv
238.782 124.249 238.597 124.064 238.597 123.835 cv
238.597 123.606 238.782 123.421 239.01 123.421 cv
239.238 123.421 239.424 123.606 239.424 123.835 cv
f
239.217 123.835 mo
239.217 124.064 239.032 124.249 238.803 124.249 cv
238.575 124.249 238.39 124.064 238.39 123.835 cv
238.39 123.606 238.575 123.421 238.803 123.421 cv
239.032 123.421 239.217 123.606 239.217 123.835 cv
f
239.01 123.835 mo
239.01 124.064 238.825 124.249 238.597 124.249 cv
238.368 124.249 238.183 124.064 238.183 123.835 cv
238.183 123.606 238.368 123.421 238.597 123.421 cv
238.825 123.421 239.01 123.606 239.01 123.835 cv
f
238.803 123.835 mo
238.803 124.064 238.619 124.249 238.39 124.249 cv
238.161 124.249 237.976 124.064 237.976 123.835 cv
237.976 123.606 238.161 123.421 238.39 123.421 cv
238.619 123.421 238.803 123.606 238.803 123.835 cv
f
238.597 123.835 mo
238.597 124.064 238.411 124.249 238.183 124.249 cv
237.954 124.249 237.769 124.064 237.769 123.835 cv
237.769 123.606 237.954 123.421 238.183 123.421 cv
238.411 123.421 238.597 123.606 238.597 123.835 cv
f
238.389 123.835 mo
238.389 124.064 238.204 124.249 237.976 124.249 cv
237.746 124.249 237.562 124.064 237.562 123.835 cv
237.562 123.606 237.746 123.421 237.976 123.421 cv
238.204 123.421 238.389 123.606 238.389 123.835 cv
f
238.389 124.042 mo
238.389 124.271 238.204 124.457 237.976 124.457 cv
237.746 124.457 237.562 124.271 237.562 124.042 cv
237.562 123.814 237.746 123.628 237.976 123.628 cv
238.204 123.628 238.389 123.814 238.389 124.042 cv
f
238.182 124.042 mo
238.182 124.271 237.998 124.457 237.769 124.457 cv
237.541 124.457 237.355 124.271 237.355 124.042 cv
237.355 123.814 237.541 123.628 237.769 123.628 cv
237.998 123.628 238.182 123.814 238.182 124.042 cv
f
237.976 124.042 mo
237.976 124.271 237.791 124.457 237.562 124.457 cv
237.334 124.457 237.148 124.271 237.148 124.042 cv
237.148 123.814 237.334 123.628 237.562 123.628 cv
237.791 123.628 237.976 123.814 237.976 124.042 cv
f
237.769 124.042 mo
237.769 124.271 237.582 124.457 237.355 124.457 cv
237.127 124.457 236.941 124.271 236.941 124.042 cv
236.941 123.814 237.127 123.628 237.355 123.628 cv
237.582 123.628 237.769 123.814 237.769 124.042 cv
f
237.562 124.042 mo
237.562 124.271 237.377 124.457 237.148 124.457 cv
236.92 124.457 236.734 124.271 236.734 124.042 cv
236.734 123.814 236.92 123.628 237.148 123.628 cv
237.377 123.628 237.562 123.814 237.562 124.042 cv
f
237.355 124.042 mo
237.355 124.271 237.17 124.457 236.941 124.457 cv
236.712 124.457 236.527 124.271 236.527 124.042 cv
236.527 123.814 236.712 123.628 236.941 123.628 cv
237.17 123.628 237.355 123.814 237.355 124.042 cv
f
237.355 124.249 mo
237.355 124.478 237.17 124.663 236.941 124.663 cv
236.712 124.663 236.527 124.478 236.527 124.249 cv
236.527 124.021 236.712 123.835 236.941 123.835 cv
237.17 123.835 237.355 124.021 237.355 124.249 cv
f
237.148 124.249 mo
237.148 124.478 236.962 124.663 236.734 124.663 cv
236.505 124.663 236.321 124.478 236.321 124.249 cv
236.321 124.021 236.505 123.835 236.734 123.835 cv
236.962 123.835 237.148 124.021 237.148 124.249 cv
f
236.94 124.249 mo
236.94 124.478 236.755 124.663 236.527 124.663 cv
236.298 124.663 236.113 124.478 236.113 124.249 cv
236.113 124.021 236.298 123.835 236.527 123.835 cv
236.755 123.835 236.94 124.021 236.94 124.249 cv
f
236.734 124.249 mo
236.734 124.478 236.548 124.663 236.32 124.663 cv
236.091 124.663 235.906 124.478 235.906 124.249 cv
235.906 124.021 236.091 123.835 236.32 123.835 cv
236.548 123.835 236.734 124.021 236.734 124.249 cv
f
236.527 124.249 mo
236.527 124.478 236.341 124.663 236.113 124.663 cv
235.884 124.663 235.698 124.478 235.698 124.249 cv
235.698 124.021 235.884 123.835 236.113 123.835 cv
236.341 123.835 236.527 124.021 236.527 124.249 cv
f
236.32 124.249 mo
236.32 124.478 236.135 124.663 235.906 124.663 cv
235.677 124.663 235.492 124.478 235.492 124.249 cv
235.492 124.021 235.677 123.835 235.906 123.835 cv
236.135 123.835 236.32 124.021 236.32 124.249 cv
f
236.32 124.457 mo
236.32 124.685 236.135 124.871 235.906 124.871 cv
235.677 124.871 235.492 124.685 235.492 124.457 cv
235.492 124.227 235.677 124.042 235.906 124.042 cv
236.135 124.042 236.32 124.227 236.32 124.457 cv
f
236.113 124.457 mo
236.113 124.685 235.928 124.871 235.698 124.871 cv
235.47 124.871 235.285 124.685 235.285 124.457 cv
235.285 124.227 235.47 124.042 235.698 124.042 cv
235.928 124.042 236.113 124.227 236.113 124.457 cv
f
235.906 124.457 mo
235.906 124.685 235.721 124.871 235.492 124.871 cv
235.263 124.871 235.078 124.685 235.078 124.457 cv
235.078 124.227 235.263 124.042 235.492 124.042 cv
235.721 124.042 235.906 124.227 235.906 124.457 cv
f
235.698 124.457 mo
235.698 124.685 235.514 124.871 235.285 124.871 cv
235.057 124.871 234.871 124.685 234.871 124.457 cv
234.871 124.227 235.057 124.042 235.285 124.042 cv
235.514 124.042 235.698 124.227 235.698 124.457 cv
f
235.492 124.457 mo
235.492 124.685 235.307 124.871 235.078 124.871 cv
234.85 124.871 234.665 124.685 234.665 124.457 cv
234.665 124.227 234.85 124.042 235.078 124.042 cv
235.307 124.042 235.492 124.227 235.492 124.457 cv
f
235.285 124.457 mo
235.285 124.685 235.1 124.871 234.871 124.871 cv
234.642 124.871 234.457 124.685 234.457 124.457 cv
234.457 124.227 234.642 124.042 234.871 124.042 cv
235.1 124.042 235.285 124.227 235.285 124.457 cv
f
235.285 124.663 mo
235.285 124.892 235.1 125.077 234.871 125.077 cv
234.642 125.077 234.457 124.892 234.457 124.663 cv
234.457 124.434 234.642 124.249 234.871 124.249 cv
235.1 124.249 235.285 124.434 235.285 124.663 cv
f
235.078 124.663 mo
235.078 124.892 234.892 125.077 234.665 125.077 cv
234.436 125.077 234.25 124.892 234.25 124.663 cv
234.25 124.434 234.436 124.249 234.665 124.249 cv
234.892 124.249 235.078 124.434 235.078 124.663 cv
f
234.871 124.663 mo
234.871 124.892 234.686 125.077 234.457 125.077 cv
234.229 125.077 234.044 124.892 234.044 124.663 cv
234.044 124.434 234.229 124.249 234.457 124.249 cv
234.686 124.249 234.871 124.434 234.871 124.663 cv
f
234.665 124.663 mo
234.665 124.892 234.478 125.077 234.25 125.077 cv
234.022 125.077 233.837 124.892 233.837 124.663 cv
233.837 124.434 234.022 124.249 234.25 124.249 cv
234.478 124.249 234.665 124.434 234.665 124.663 cv
f
234.457 124.663 mo
234.457 124.892 234.271 125.077 234.044 125.077 cv
233.815 125.077 233.629 124.892 233.629 124.663 cv
233.629 124.434 233.815 124.249 234.044 124.249 cv
234.271 124.249 234.457 124.434 234.457 124.663 cv
f
234.25 124.663 mo
234.25 124.892 234.065 125.077 233.837 125.077 cv
233.608 125.077 233.423 124.892 233.423 124.663 cv
233.423 124.434 233.608 124.249 233.837 124.249 cv
234.065 124.249 234.25 124.434 234.25 124.663 cv
f
234.044 124.87 mo
234.044 125.099 233.859 125.284 233.629 125.284 cv
233.401 125.284 233.216 125.099 233.216 124.87 cv
233.216 124.641 233.401 124.456 233.629 124.456 cv
233.859 124.456 234.044 124.641 234.044 124.87 cv
f
233.837 124.87 mo
233.837 125.099 233.652 125.284 233.423 125.284 cv
233.194 125.284 233.009 125.099 233.009 124.87 cv
233.009 124.641 233.194 124.456 233.423 124.456 cv
233.652 124.456 233.837 124.641 233.837 124.87 cv
f
233.629 124.87 mo
233.629 125.099 233.445 125.284 233.216 125.284 cv
232.987 125.284 232.801 125.099 232.801 124.87 cv
232.801 124.641 232.987 124.456 233.216 124.456 cv
233.445 124.456 233.629 124.641 233.629 124.87 cv
f
233.423 124.87 mo
233.423 125.099 233.237 125.284 233.009 125.284 cv
232.781 125.284 232.596 125.099 232.596 124.87 cv
232.596 124.641 232.781 124.456 233.009 124.456 cv
233.237 124.456 233.423 124.641 233.423 124.87 cv
f
233.216 124.87 mo
233.216 125.099 233.031 125.284 232.801 125.284 cv
232.573 125.284 232.388 125.099 232.388 124.87 cv
232.388 124.641 232.573 124.456 232.801 124.456 cv
233.031 124.456 233.216 124.641 233.216 124.87 cv
f
233.009 124.87 mo
233.009 125.099 232.824 125.284 232.596 125.284 cv
232.366 125.284 232.181 125.099 232.181 124.87 cv
232.181 124.641 232.366 124.456 232.596 124.456 cv
232.824 124.456 233.009 124.641 233.009 124.87 cv
f
233.009 125.077 mo
233.009 125.306 232.824 125.491 232.596 125.491 cv
232.366 125.491 232.181 125.306 232.181 125.077 cv
232.181 124.848 232.366 124.663 232.596 124.663 cv
232.824 124.663 233.009 124.848 233.009 125.077 cv
f
232.801 125.077 mo
232.801 125.306 232.617 125.491 232.388 125.491 cv
232.16 125.491 231.975 125.306 231.975 125.077 cv
231.975 124.848 232.16 124.663 232.388 124.663 cv
232.617 124.663 232.801 124.848 232.801 125.077 cv
f
232.596 125.077 mo
232.596 125.306 232.41 125.491 232.181 125.491 cv
231.953 125.491 231.767 125.306 231.767 125.077 cv
231.767 124.848 231.953 124.663 232.181 124.663 cv
232.41 124.663 232.596 124.848 232.596 125.077 cv
f
232.388 125.077 mo
232.388 125.306 232.203 125.491 231.975 125.491 cv
231.745 125.491 231.561 125.306 231.561 125.077 cv
231.561 124.848 231.745 124.663 231.975 124.663 cv
232.203 124.663 232.388 124.848 232.388 125.077 cv
f
232.181 125.077 mo
232.181 125.306 231.996 125.491 231.767 125.491 cv
231.539 125.491 231.354 125.306 231.354 125.077 cv
231.354 124.848 231.539 124.663 231.767 124.663 cv
231.996 124.663 232.181 124.848 232.181 125.077 cv
f
252.256 120.317 mo
251.842 120.317 li
251.635 120.524 li
251.014 120.524 li
250.807 120.731 li
250.394 120.731 li
250.187 120.938 li
249.773 120.938 li
249.566 121.145 li
249.152 121.145 li
248.944 121.351 li
248.531 121.351 li
248.324 121.558 li
247.703 121.558 li
247.496 121.765 li
246.875 121.765 li
246.668 121.973 li
246.047 121.973 li
245.84 122.179 li
245.219 122.179 li
245.012 122.386 li
244.391 122.386 li
244.185 122.593 li
243.564 122.593 li
243.357 122.8 li
242.735 122.8 li
242.528 123.007 li
241.908 123.007 li
241.7 123.214 li
240.872 123.214 li
240.666 123.421 li
240.045 123.421 li
239.838 123.628 li
239.217 123.628 li
239.01 123.835 li
238.183 123.835 li
237.976 124.042 li
237.148 124.042 li
236.941 124.249 li
236.113 124.249 li
235.906 124.456 li
235.078 124.456 li
234.871 124.663 li
233.837 124.663 li
233.629 124.87 li
232.801 124.87 li
232.596 125.077 li
231.767 125.077 li
null null set_ucrbg
.592686 .731567 .347153 rgb
@
272.743 120.317 mo
272.329 119.903 li
272.122 119.903 li
271.915 119.489 li
271.708 119.075 li
271.502 118.661 li
271.294 118.247 li
271.087 117.626 li
270.88 116.798 li
270.674 116.177 li
270.467 115.764 li
270.26 115.35 li
270.053 115.143 li
269.639 115.143 li
269.432 114.936 li
268.811 114.936 li
268.604 115.143 li
266.948 115.143 li
266.742 115.35 li
266.121 115.35 li
265.914 115.557 li
265.5 115.557 li
265.293 115.764 li
264.879 115.764 li
264.673 115.97 li
264.466 115.97 li
264.259 116.177 li
264.052 116.177 li
263.845 116.384 li
263.43 116.384 li
263.223 116.591 li
263.017 116.591 li
262.809 116.798 li
262.602 116.798 li
262.395 117.005 li
261.981 117.005 li
261.774 117.213 li
261.361 117.213 li
261.154 117.419 li
260.947 117.419 li
260.741 117.626 li
260.533 117.626 li
260.326 117.833 li
259.913 117.833 li
259.705 118.04 li
259.292 118.04 li
259.085 118.247 li
258.671 118.247 li
258.464 118.454 li
258.05 118.454 li
257.844 118.661 li
257.015 118.661 li
256.808 118.868 li
256.187 118.868 li
255.98 119.075 li
255.773 119.075 li
255.567 119.282 li
255.152 119.282 li
254.945 119.489 li
254.325 119.489 li
254.118 119.696 li
253.704 119.696 li
253.498 119.903 li
253.083 119.903 li
252.876 120.11 li
252.462 120.11 li
252.256 120.317 li
@
303.993 122.594 mo
303.579 123.215 li
303.165 123.629 li
299.873 127.004 297.623 126.167 297.784 120.731 cv
297.163 117.626 li
296.75 114.729 li
296.336 112.039 li
296.129 110.383 li
295.509 109.556 li
295.301 108.935 li
294.889 108.728 li
293.852 108.728 li
293.024 109.142 li
292.818 109.142 li
292.403 109.349 li
291.369 109.349 li
291.162 109.142 li
290.748 109.142 li
290.335 108.935 li
290.127 108.935 li
289.714 108.728 li
289.507 108.521 li
289.093 108.728 li
287.85 108.728 li
287.437 108.935 li
286.288 109.232 285.468 109.999 284.333 110.383 cv
284.126 110.591 li
283.919 110.798 li
283.505 111.005 li
283.298 111.212 li
283.092 111.419 li
282.678 111.624 li
282.471 111.832 li
282.264 112.039 li
281.849 112.246 li
281.642 112.453 li
281.435 112.867 li
281.022 113.074 li
280.608 113.488 li
280.194 113.901 li
279.366 114.729 li
279.159 114.935 li
278.952 115.349 li
278.746 115.764 li
278.538 115.971 li
278.332 116.385 li
277.918 116.592 li
277.71 116.799 li
277.504 117.213 li
277.297 117.626 li
277.09 117.833 li
276.676 118.248 li
276.469 118.455 li
276.262 118.869 li
276.055 119.076 li
275.847 119.283 li
275.226 119.904 li
275.019 120.11 li
274.812 120.317 li
274.605 120.317 li
274.399 120.524 li
273.364 120.524 li
272.95 120.317 li
272.743 120.317 li
@
330.482 124.042 mo
329.861 123.835 li
329.24 123.421 li
328.62 123.007 li
327.433 121.669 326.495 121.242 325.309 119.903 cv
324.688 119.282 li
324.068 118.661 li
322.463 117.326 321.977 115.833 320.548 114.523 cv
319.929 113.901 li
319.514 113.282 li
318.895 112.66 li
318.273 112.039 li
317.652 111.832 li
317.238 111.418 li
316.618 111.211 li
316.204 111.005 li
314.961 111.005 li
314.546 111.211 li
313.927 111.211 li
312.963 111.979 311.715 112.579 311.03 113.694 cv
310.409 114.315 li
309.995 114.936 li
308.961 115.557 li
308.961 116.177 li
307.346 118.131 306.306 120.461 304.407 122.18 cv
303.993 122.593 li
@
1 lw
227.599 128.531 mo
336.433 128.531 li
336.433 43.792 li
227.599 43.792 li
cp
null null set_ucrbg
.167046 .159461 .162795 rgb
@
null null set_ucrbg
.057544 .060854 .0608542 rgb
%ADOBeginSubsetFont: QAHAAA+ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.systemdict beginPWYLKF+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F632B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2BA15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609FBC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D295257B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0B222> |-/U <1C60D8A8C9B6079F6D3F1E4545C3E1CC9D8EF54571065F01BE5A50957BD2D8AD04D30C23B37CA98B969ECB5CA0D9A7C563636CB33377BB3DEB53D45DD0F3E333CD69EA3B53D63C91B303CFDF29F59C20776D4DC576C9C080B76AB60A21673EFC1F645BF33D33929C60> |-/w <1C60D8A8C9B6079F623B1BE11B16961396A063624588AB070AF82F2F6FEA646F6999B73C9332DE350CB17016778F548397735D109B5E72AA9A92DCB1D7264371419D7043A117419C0FAF4C> |-systemdict /gcheck known {setglobal} if end {end} ifendPWYLKF+ArialMT /Encoding getdup 73 /I putdup 82 /R putdup 85 /U putdup 119 /w putpop%ADOEndSubsetFont
/PWYLKF+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /.notdef /C /D /E /F /.notdef /H /I 3{/.notdef}rp /M 2{/.notdef}rp /P /.notdef /R /S /.notdef /U /.notdef /W 9{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v /w /.notdef /y /z 133{/.notdef}rp]PWYLKF+ArialMT nfPWYLKF+ArialMT*1 [10 0 0 -10 0 0 ]msf56.6227 275.756 mo(UltravioletInfraredMicrowaveRadio)[7.218 2.218 2.778 3.32793 5.558 4.998 2.218 5.558 2.21799 5.55801 48.053 2.778 5.558 2.778 3.32791 5.558 3.32793 5.558 47.607 8.32793 2.21799 4.998 3.32793 5.558 7.218 5.558 4.99799 49.497 7.21799 5.55801 5.55798 2.21799 0 ]xsh0 lj
340.658 273.088 mo
360.224 273.088 li
null null set_ucrbg
.167046 .159461 .162795 rgb
@
357.739 276.156 mo
357.227 275.607 li
359.936 273.09 li
357.227 270.571 li
357.739 270.022 li
361.038 273.09 li
f
295.246 273.088 mo
314.773 273.088 li
@
294.746 276.338 mo
295.746 276.338 li
295.746 269.838 li
294.746 269.838 li
cp
f
270.713 273.088 mo
295.246 273.088 li
@
198.504 273.088 mo
222.949 273.088 li
@
198.004 276.338 mo
199.004 276.338 li
199.004 269.838 li
198.004 269.838 li
cp
f
180.725 273.088 mo
198.504 273.088 li
@
128.864 273.088 mo
146.688 273.088 li
@
128.364 276.338 mo
129.364 276.338 li
129.364 269.838 li
128.364 269.838 li
cp
f
101.715 273.088 mo
120.715 273.088 li
@
120.215 276.338 mo
121.215 276.338 li
121.215 269.838 li
120.215 269.838 li
cp
f
37.641 273.088 mo
56.525 273.088 li
@
40.125 276.156 mo
40.637 275.607 li
37.928 273.09 li
40.637 270.571 li
40.125 270.022 li
36.827 273.09 li
f
gsave
121.219 276.332 mo
128.369 276.332 li
128.369 269.832 li
121.219 269.832 li
cp
clp
gsave
128.365 269.803 mo
121.215 269.803 li
121.215 276.403 li
128.365 276.403 li
cp
121.215 269.803 mo
cp
121.215 269.803 mo
121.2 269.803 li
121.2 276.403 li
121.215 276.403 li
cp
121.2 269.803 mo
cp
128.4 269.803 mo
128.365 269.803 li
128.365 276.403 li
128.4 276.403 li
cp
clp
121.188 269.731 mo
128.412 269.731 li
128.412 276.475 li
121.188 276.475 li
cp
null null set_ucrbg
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 311.203 ]ct
[7.224 0 0 -6.744 121.188 41.472 ]ct
snap_to_device
<<
/T 1
/W 15 
/H 14 
/M[15 0 0 -14 0 14 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~85</nGE&N;iS___YHG$!:/tbINMj\Qi5W.-Y-(;j<FL*2Vo%EN`jDqPY"2;f@X!g0_VsFm['-X885</o
GE&N;iS___YHG$!:/t_HNMjYPi5W.-Y-(;j<FU03Vo.KO`jDqPY"2;f@<[^/_VsFm['-X885</oGE&N;
iS___YHG$!:/tbINMjYPi5W.-Y-(;j<FL*2Vo%EN`jDqPY"2;f@X!g0_r9On['-X885</nGE&N;iS___
YHG$!:/tbINMjYPi5W.-Y-%~>
<~5>bj2OK6:HildE]0J>%C;.4R.X2NHGbE,UU0.oId@<@U3_pRJeOA[bc/jE3AFHEQ@dGi?2;D9aV5>bj2
OK6:HildE]0J>%C;.4R.X2E?EbE,UU0.oId@<@U3`7!YgOA[bc/jE3AFHEQ@dGi?2;D9aV5>bj2OK6:H
ildE]0J>%C;.4R.X2E?EbE,UU0.oId@<@U3_pRJeOA[bc/jE3AFHEQAdc/H3;D9aV5>bj2OK6:HildE]
0J>%C;.4R.X2E?EbE,UU0.m~>
<~NL6N7L1XLd:e3`*0/"u<R&$C0Alhu/83Ja^0/&<PUnEHS=&`!e4Yn`E09)?pTS@&[<)?+K1G:C7NL6N7
L1XLd:e3`*0/"u<R&$C0Alhr.83Ja^0/&<PUnEHS=&i'f4Yn`E09)?pTS@&[<)?+K1G:C7NL6N7L1XLd
:e3`*0/"u<R&$C0Alhr.83Ja^0/&<PUnEHS=&`!e4Yn`E09)?pTS@&[<DZ4L1G:C7NL6N7L1XLd:e3`*
0/"u<R&$C0Alhr.83Ja^0/!~>
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/PWYLKF+ArialMT*1 uf/PWYLKF+ArialMT uf/QAHAAA+ArialMT uf/PWYLKH+*1 uf/PWYLKH+ uf/ ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
