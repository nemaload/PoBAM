%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Fig6_temporal.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Adam Marblestone
%%CreationDate: 6/20/13
%%BoundingBox: 0 0 372 297
%%HiResBoundingBox: 0 0 371.5000 297
%%CropBox: 0 0 371.5000 297
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 13676 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFD8EFFA8A87D7DA8FFCFFFA8FFCFFFA8FFCFFFA8FFCFFFA8%FFCFFD19FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCA%FFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFD20FF7DA853%FFA87D7D837D7D7C83FD067D7CFD047D847DA87DA87D847DA87DA87DA87D%7E7D847D7D7DA87DA17DA17DA17DA17D7D7DA1FD057DA17DA17D7D7DA17D%7D7DA17D7D7DA17D7D7DA17DA17DA17DA17DA17D7D7DA17D7D7DA17D7D7D%A87D847DA87D7E7DA87D7E7DA87D7D7DA8FD0BFFA8A87D7DFF7D57825882%7C7C588258825882587C5882587C7DFFFD10A87DA8A8FFA1A1A0C3FD06A1%A0A1A1A176FD04A1C3FD06A1A0A1A1A1A0A1A17DA0C3FD06A1A0C3A1A1A0%A1A1A1A0A1767E597E5A5A597E597E597E597E597E598452FD10FF7DFD12%82FD16FFCAC3C9C3CAC3C9C3CAC3C9C3C9C3C9C3CAC3C9C3C9C3C9C3CAC3%C9C3CAC3C9C3C9C3C9C3CAC3C9C3CAC3C9C3CAC3C9C3C9C3C9C3A87E855A%857E855A857E855A857E855A857E7DA8FD0FFF7D57828282818282828182%82828182828281A7FD16FFCAC3C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3%C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1%C9C3C359845A845A845A845A845A845A845A845A8452A8FD0FFF7DFD0482%A6828282A6828282A6FD0582FD17FFC3C9C3CAC3CAC3CAC3CAC3CAC3CAC3%CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3%CAC3CAC3C9A1847E857E857E857E857E857E857E857E855A7DA8FD0FFF7D%5782828281828282818282828182828281A7FD17FFCAC3C9C3C9C3C9C3C9%C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9%C3C9C3C9C3C9C3C9C3C9C3A15A845A845A855A845A855A845A855A845A84%53A8FD0FFF7DFD04827C5883587C58827C7C7CFD0482FD17FFCAC9C3C9C3%CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3%C9C3CAC3C9C3CAC3C9C3CAC3C9C3C9A1847E857E855A857E855A857E855A%857E855A7DA8FD0FFF7D58828182FD0652517C7C5881828282CFFD16FFCA%A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9%C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1CA5A7E5A845A845A845A84%5A845A845A845A7E52FD10FF7D8282A6827C525252827C7C588252FD0482%FD18FFCAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3C9C3CAC3CA%C3CAC3C9C3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAA1847E857E857E85%7E857E857E857E857E855A7EA8FD0FFF7D58828282587C588281827C7C52%FD048283FD18FFC3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3A1A1C9C3%C3C3C9C3C3A1A1A1C3A1C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3CA7E845A%855A845A855A845A855A845A855A8452FD10FF7DFD1282FD18FFCAC3CAC3%C9C3CAC3C9C3CAC3C9C3CAC3C9C3CA527D76FD04A1C9A1C9527DA176A1CA%C3C9C3CAC3C9C3CAC3C9C3CAC3C9A1847E855A857E855A857E855A857E85%5A855A7DA8FD0FFF7D7C82828281827C52527C58828182828281A7FD18FF%CAC3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A17D767C527D5252277DC3A1%76C376A1A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3A159845A845A845A845A84%5A845A845A845A8453A8FD0FFF7DA9838282A6828252837C587CA6FD0582%FD19FFC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CA7C7D767D76A1767DA1%C9A1A1C3A1A1CAC3CAC3CAC3CAC3CAC3CAC3CAC3C9A1847E857E857E855A%857E855A857E857E855A7DA8FD0FFF7DA8FFFD048281587C7C52FD058281%A7FD19FFCAC3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9A1C3C3C9C3C3C3%C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3A15A845A845A7E5A%8459845A7E5A845A845A8459A8FD0FFF7DFFFFFFFD04827C82527CFD0782%FD19FFCAC9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3%CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3C9A1847E857E7D527D53%595959537E527D7E855A7DA8FD0FFF7DA8FFFFCF82828182828257828282%81828282CFFD19FFC3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3%A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1CA5A7E5A84%525A5953537E53595A595A845A7E52FD10FF7DAFFFFFFFCF82A6828282A6%828282A6828282FD1AFFCAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3%CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAA1847E%857E7D537D537D597D528459847E855A7DA8FD0FFF7EA8FD04FFAE81FD0A%8283FD1AFFCAC3C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3%C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9C3CA7E845A855A7E5A%84597E5A7E5A7E5A855A7E53FD10FF7DFD06FFAEFD0B82FD1BFFC3C9C3CA%C3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9%C3CAC3C9C3CAC3C9C3CAC3C9A1847E855A857E855A857E855A857E855A85%5A7DA8FD0FFF7DA8FD06FFA7578282828182828281A7FD1AFFCAC9C3C3A1%C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3C3A1C9C3%C3A1C9C3C3A1C9C3C3A1C9C3A159845A845A845A845A845A845A845A845A%8453A8FD0FFF7DFD08FFAD828282A6FD0582FD1BFFCAC9C3CAC3CAC3CAC3%CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3CAC3%CAC3CAC3CAC3C9A1847E857E857E857E857E857E857E857E855A7DA8FD0F%FF7DA8FD07FFCFA7FD0782A7FD1BFFCFC3C9C3C9C3C9C3C9C3C9C3CAC3C9%C3CAC3C9C3CAC3C9C3CAC3C9C3CAC3C9C3C9C3C9C3C9C3C9C3C9C3C9C3C9%C3A15A845A845A855A845A855A845A855A845A8453A8FFFFFFA8A8FD0AFF%7DFD09FFCFA7FD0782FD1BFFCFCAC3C9C3CAC3C9C3CAC3C9C2C3C2C3C2C3%C2C3C2C3C2C3C2C3C2C3C3CAC9CAC3CAC3C9C3CAC3C9C3CAC3C9C3C9A184%7E857E855A857E855A857E855A857E855A7DA8FFA87DA87DA8FD09FF7DA8%FD09FFA882828281828283AEFD1BFFA1C9C3C3A1C9C3C3A1C3939392B593%B592B593B592B593B592B593B593C2C3C9A1C9C3C3A1C9C3C3A1C9C3C3A1%CA5A7E5A845A845A845A845A845A845A845A7E53AFFFFFA87DA8FD0AFF7D%FD0BFFAE8282A6828282FD1CFFCFC3CAC3CAC3CAC3CABBB593BB93BB93BB%93BB93BB93BB93BB93BB93BB93BBC2CAC3CAC3CAC3CAC3CAC3CAC3CAA184%7E857E857E857E857E857E857E857E855A7EA8FFFF7D527DFD0AFF7EA8FD%0BFFA7FD0582FD1CFFCAC9C3C9C3C9C3C9C2BB93B593B593B593B593B593%B593B593B593B593B593B599CAC3C9C3C9C3C9C3C9C3C9C3CA7E845A855A%845A855A845A855A845A855A7E53FFFFA87E7DA8A8FD09FF7DFD0DFFA7FD%0482FD1DFFC3CAC3C9C3CAC9C393BB93BB93BB93BB93BB93BB93BB93BB93%BB93BB93BB93B599C9C9C9C3CAC3C9C3CAC3C9A1847E855A857E855A857E%855A857E855A855A7DA8FFFFA8A8A8FD0AFF7DA8FD0DFF838257A7FD1DFF%CAA1C9C3C3A1CA9A9392B593B592BB93B592B593B592B593B593B593B592%B5939393C3C3C9A1C9C3C3A1C9C3C37D845A845A845A845A845A845A845A%845A8459A8FFFFFFA8FD09FFA8FF7DFD0FFFA7ADCFFD1DFFCACAC3CAC3CA%C9C393BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93C2%C3CAC3CAC3CAC3CAC3CA84855A855A855A855A855A855A855A85A9A8A8FF%FF7D7D7DFD07FF7D7DFF7D7DFD2FFFC3C9C3C9C3CAC2B593B593B593B593%B593B593B593B593B593B593B593B593B593B593BCC3CAC3C9C3C9C3C9C3%CFA9A984A984A984A984A984A984A9A8FF52FFFFFFA852A8FD08FF7DFF7D%A8FD2FFFCAC3CAC3C9C3C393BB93BB93BB93BB93BB93BB93BB93BB93BB93%BB93BB93BB93BB93BB93BBC3CAC3C9C3CAC3C9CAFD10FF7DA8FFFF7D7D7D%FD07FFAFFFFF7DA8FD2FFFC9C3A1C9C3C99AB593B592B593B592B593B592%B593B592B593B592B593B592B593B592B593B59ACAC3C3A1C9C3CAFD10FF%59FFFFFFA87DA8FD0AFF7DA8FD30FFC3CAC3CAC3C393BB93BB93BB93BB93%BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BBBCCAC3CAC3C9CA%FD10FF7DA8FFFFA87D7EFD0AFF7DA8FD30FFC9C3C9C3C99AB593B593B593%B593B593B593B593B593B593B593B593B593B593B593B593B593B599C3C3%C9C3CAFD10FF7DFFFFA87D53A8FD0AFF7DA8FD30FFCAC9C3CAC9C393BB93%BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93%B593C2C3CACAFD10FF7DA8FFFF7D527DFD0AFF7DA8FD30FFCAC3C3A1CAA0%B592B593B592B593B592B593B592B593B592B593B592B593B592B593B592%B593B592B593BCA1CFFD10FF7DA8FFFFFF7D7DFD0AFF7DA9FD31FFC9C3CA%C9C393BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB%93BB93BB93BB93BB93C2CFFD10FF7DA8FFFF7D7D7DFD0AFF7DA8FD31FFC3%C3C3CAC2B593B593B593B593B593B593B593B593B593B593B593B593B593%B593B593B593B593B593B593CAFD10FF7DA8FFA8A859A8FD0AFF7DA8FD31%FFCAC3C9C3C393B593BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB%93BB93BB93BB93BB93BB93BB93B5C2FD10FF7DA8FFFF7D7D7DFD0AFF7DA8%FD31FFCAC9C3C99AB593B592B593B592B593B592B593B592B593B592B593%B592B593B592B593B592B593B592B58DC2FD10FF7DFFFFFFAF7DA8FD0AFF%7DFD33FFC3C9C3C393BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB%93BB93BB93BB93BB93BB93BB93BB93B5C2FD10FFA8A8FFFF7D5253FD0AFF%7DA8FD32FFCAC3C99AB593B593B593B593B593B593B593B593B593B593B5%93B593B593B593B593B593B593B593BB93C2FD10FF59FFFFFFA852A8FD0A%FF7DFD33FFCAC9C9C393BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93%BB93BB93BB93BB93BB93BB93BB93BB93B5C2FD10FF7EA8FFFF7D527DFD0A%FF7DA8FD33FFA1C9A0B592B593B592B593B592B593B592B593B592B593B5%92B593B592B593B592B593B592B593B58CC2FD10FF7DA8FFFFA85284FD0A%FF7DFD34FFCAC3C393BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB%93BB93BB93BB93BB93BB93BB93BB93B5C2FD10FF7EA8FFFF7D7D7DFD0AFF%7DA8FD33FFC9C9C2B593B593B593B593B593B593B593B593B593B593B593%B593B593B593B593B593B593B593B58CC2FD10FF7DA8FF7D7D52FD0BFF7D%FD34FFCFC3C393B593BB93BB93BB93BB93BB93B593BB93BB93BB93BB93BB%93B593BB93BB93BB93BB93BB93B59AFD10FFA8A8FFA8527D7EFD0AFF7DA8%FD33FFCAC99AB593B592B593B592B593B592B5939992B593B592B593996F%B5939392B593B592B593B592B58DC2FD10FF7DAFFD0FFF7DFD35FFCAC393%BB93BB93BB93BB93BB93BB9976759A99BB999A75BB5176757693BB93BB93%BB93BB93BB93B5C2FD10FFA8A8FFA87DA8A8FD0AFF7DA8FD34FFCA9AB593%B593BB93B593B593B593994B996F524B524B768D996FBB4B9993B593B593%B593B593B593C2FD10FF7DFFFFFF84527DFD0AFF7DA8FD35FFC393BB93BB%93BB93BB93BB93B56F9A93764B76517675B5759A937693B593BB93BB93BB%93BB93B5C2FD10FF7DA8FFFF7D5252FD0AFF7DA8FD35FFA09392B593B592%B593B592B5939393B5939993999399929993B593B593B592B593B592B593%B58CC2FD10FF7DA8FFFFA87DA8FD0AFF7DFD36FFC993BB93BB93BB93BB93%BB93BB93BB93B593BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93B5C2%FD10FFA8A8FFFF7D527DFD0AFF7DA8FD35FFC3B593B593B593BB93B593B5%93B593B593B593B593B593B593B593B593B593B593B593B593B58CC2FD10%FF7DA8FFFFA87D7DFD0AFF7DFD36FFCA93B593BB93BB93BB93BB93BB93BB%93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93B59AFD10FFA8A8%FFFF7D7D7DFD0AFF7DA8FD35FFCABB93B592B593B592B593B592B593B592%B593B592B593B592B593B592B593B592B593B592B58DC2FD10FF7DAFFFFF%A852A8FD0AFF7DFD37FFC3B593BB93BB93BB93BB93BB93BB93BB93BB93BB%93BB93BB93BB93BB93BB93BB93BB93BB93B5C2FD10FFA8A8FFFF7D7D52A8%FD04FFA8FFA8A8FF7EA8FD37FF99B593BB93B593B593B593B593B593B593%B593B593B593B593B593B593B593B593B593B593C2FD10FF7DFFFFFFA852%7DA8FFFFFF7D7DA8A87DFF7DA8FD38FFC2B593BB93BB93BB93BB93BB93BB%93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93B5C2FD10FF7DA8FFFF%7D7D7DFD04FFA852A8A8A8FF7D7DFD39FFC9BB8CB593B592B593B592B593%B592B593B592B593B592B593B592B593B592B593B58CC2FD10FF52A9FFFF%7D59A8FD04FFA8A8A8FFFFFF7DFD3CFFC993B593BB93BB93BB93BB93BB93%BB93BB93BB93BB93BB93BB93BB93BB93BB93B5C2FD10FF7DA8FFFF7D7D7D%FD0AFF7DA8FD3CFFCF99B593BB93B593B593B593B593B593B593B593B593%B593B593B593B593B58CC2FD10FF7DA8FFFFA8527DFD0AFF7DA8FD3EFFC3%BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93B59A%FD10FF7DA8FFFF7D527DFD0AFF7DA8FD3FFFCAC28CB593B592B593B592B5%93B592B593B592B593B592B593B592B58DC2FD10FF53FFFF7D7D7DA8FD0A%FF7DFD42FFCA99B593BB93BB93BB93BB93BB93BB93BB93BB93BB93BB93BB%93B5C2FD10FFA8A8FF7D7DA8A8FD0AFF7DA8FD43FFA0B58DB593B593B593%B593B593B593B593B593B593B593B593C2FD10FF59FFFFA8FD0DFF7DFD45%FFCABC8DB593BB93BB93BB93BB93BB93BB93BB93BB93BB93B5C2FD10FF7E%A8FD0FFF7DA8FD46FFC392B593B592B593B592B593B592B593B592B593B5%8CC2FD10FF7DA8FD0FFF7DFD48FFCFBCB593BB93BB93BB93BB93BB93BB93%BB93BB93B5C2FD10FF7DA8FD0FFF7DA8FD49FFC3B58CB593B593B593B593%B593B593B593B58CC2FD10FF7DA8FD0FFF7DA8FD4AFFCAC293B593BB93BB%93BB93BB93BB93BB93B59AFD10FF7DA8FD0FFF7DA8FD4CFFC993B593B592%B593B592B593B592B58DC2FD10FF7DFD10FF7DFD4FFFC2B593BB93BB93BB%93BB93BB93B5C2FD10FFA8A8FD0FFF7DA8FD4FFFC9BB8CB593B593B593B5%93B593C2FD10FF7DFD10FF7DA8FD51FFC393B593BB93BB93BB93B5C2FD10%FF7DA8FD0FFF7DA8FD52FFCA99B593B592B593B58CC3FD10FF7DA8FD0FFF%7DFD55FFC2BB93BB93BB93B5C9FD10FFA8A8FD0FFF7DA8FD55FFCABC93B5%93B593CFFD10FF7DA8FD0FFF7DFD58FFC993B593C3FD11FFA8A8FD0FFF7D%A8FD58FFCFA1CAFD12FF52FD10FF7DFD6EFFA8A8FD0FFF7EA8FD6DFF7DFD%10FF7DFD6EFF7EA8FD0FFF7DA8FD6DFF7DA8FD0FFF7DFD6EFFA8A8FD0FFF%7DA8FD6DFF7DA8FD0FFF7DFD6EFFA8A8FD07FFA853FF7D7D7DA8FF7D7DAF%A8FFA8A8A8AFFD06A884A8A8A87DFFFD0EA87EA87DA8A8FFA8A8A8FFFD0A%A87D7DA8A8A8FFFD0DA87D84FFFD07A8A9FD08A87DFFA8AFA8A8A8FFFD0A%A852FD08FF7D7DA8A87D7D7DFFA87E7DA87D847DA87D7D7DA87D7E7D847D%A87DA87D7D7DA87D847DA87DA87DA87D7E7DA87D7D7DA87DA87DA87DA87D%A87D847DA87D847DA87DA87DA87D7E7DA87D7E7DA87D7E7DA87D847DA87D%A87DA87DA87DA87D7E7DA87D7D7DA87DA87DA87DA87DA87D7E7DA87D847D%A87DA87D84FD08FFA87DA87D7DA87D7DA87DA87DFD0DFFA8A87DFF7DFD0D%FF7DA87DA87DA8FD0DFFFD04A87DFD0DFFFD05A87DFD0DFF7DA87DFF7DFD%0BFF7DFF7DFF7DFD0EFFA8FD047D84FD0CFFA8FD047DFD0EFF7E597D7DA8%7EFD0DFF7D7D7DA87DFD0DFF7D7E7D7E7DA8FD0CFFA9847D7D7D84A8FD0A%FFFD057DA8FD0EFF7D847DFD0FFF7DA87DFD0FFFA8A859A8FD0FFFA87D7D%A8FD0EFFAF7D7D7DFD0FFFA8A852FD0DFFA8A852FDB7FFA8A8FD12FFA8FD%07FFA8FFA9FD61FF7D7DA8A8FFA8A8FFA8A8FFFFA8A87DFD04A87DA8A8FF%A8A8FFFF7D52A87D7DA8FD5EFFA87DFFFD047D527D7D7D527D527D527D7D%5252FD057D52A8A8A8525352A87DFD5FFF7D7D847D7D7DA87D847D7D7DA8%7D7D7DA852FD067DA8A8FF7DA8527DA8A8FD60FFA8FFFFA9FFFFFFA8FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8FFFFFFA8A8FDFCFFFD2EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2013-06-20T23:47:03-04:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUNqGpafp0Cz31w&#xA;ltC8iQo8jBQZJWCIgr1LMaAYqp6frekajNdQ2F3Fcy2T+ldJGwYxuCVo3+yVh8wR2OKo3FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgda0mLVbH&#xA;6rIQlJI5Uk4hirROH2r4gU+nFWHa55Zk8t+UfOmqW19IbiXSLpbR0HovbxwC8uoqOh5M6yXj/Hts&#xA;F2rUlKsITR4iik3upVIB21LUB+ufOWOryX0+Uf1OF4hbGiRAk/XtTNTWh1O/22pQfv8AH85k8vkP&#xA;1L4haGhxfD/p+p7Ek/7k7/frsf33vj+dyeXyH6l8QtfoKP8A6uGqda/8dO+/mrT+++j5YfzuTy+Q&#xA;XxSyfyP5MtLuW4mn1PV2iiHAwDVdRQMz8SrEpOp+Dg1B/lH2za9m5pZBK6b8MiWWyeQdFeNlF5rC&#xA;FgQHXWtV5LUdRW5IqPcZs25p/IOisBS81hKEE8da1XenY1uTscVaP5faMeX+nayOTqwprOqbBaVU&#xA;f6T0bjvXfc79KKqbfl1pBH/HT1wdems6n3r/AMX+/wCGKt235eaTHAY59Q1i4YvIfUfWNUU8XdmV&#xA;KLcgfApC+9N8VBYVc+VreG6eNr3VKxFkK/pTUaEg9f7/ANs1sskga/Q9FDT45AHffzP61I+W7U8v&#xA;9O1UchQf7lNQ29x+/wAHiyZflYefzLR8tWpP+9+qj7P/AEtNQ/ZNT/u/9rocPjSR+Uh5/Mqb+VYS&#xA;F4apq6kMpJ/Sl+ahWBZf779oAj6cfGKDpI+fzKv/AIdtP+WzU/8AuKaj/wBlGDxZfgBl+Vh5/M/r&#xA;Wjy3ahSPr2qGpJqdU1Coqa/7/wC2Piy/AX8rDz+ZcPLdqOP+naqeIof9ymob+5/f4+LJfysPP5lb&#xA;/he2oB+kdW2AFf0pf12rv/fdTXD4xR+Uh5/MtR+WIEmd21LVXRlULG2qX9FILEkETg78gPox8YqN&#xA;JC+vzKo3ly1IoL3VF3BqNU1Hsa03n74PFl+An8rDz+Z/W4+XLUkH67qgp2GqajQ/P9/j4svwF/Kw&#xA;8/mf1tf4ataj/T9V2YtT9KahvUHb+/6b4fFkv5WHn8ys/wAMWwArqWrbAVP6Uv8AtTf++9sfFkx/&#xA;KQ8/mUthtZo4Ujj1XVqIApf9KagpcgULsBPQFuu2dFg0kRH1c3kdVq5Gfp5Lvq93yJ/S+r7gCn6V&#xA;1Gm3/PfLvyuPucb81k72vq13Qj9Maxua1/Suobe39/j+Vx9y/mp97Rtbw1/3MawKmu2q6h4Up/f/&#xA;AE4/lcfcv5qfemflma4t/N3luFdR1KV7i9nSdLjUL25ikhGnXT8WimlePaREb7PUCmYmpwCG4cvT&#xA;ZzOwXsmYjlOxV2Ksd/Mj/wAl35p7f7iL/p1/3mkxV52m6LuTsN2FCfmKDONPN17HG882IgmmW2lZ&#xA;Ipo7cEPBvJJOLcBv3n7shmBIk4mn05m/kZXz+/3/AB+DZ4ZVovOFk8TOLab1Q3prAvpuzyet6ARG&#xA;Vyhqx68qAfapQ4JaKQ6ivj3WjwymWm6kt6J1MMlvPbSelPBLx5K3EOCChZWVlcEEH8ajMbJj4a3s&#xA;FiRT0L8vP7m+/wBaP9TZt+yOUvg34OrL83DkOxV2KuxV2KsL8023o6qzgfDOocfP7J/Vmv1Eak7/&#xA;ALPycWOu5J8oc12KuxV2KuxV2KuxV2KuxV2KuxVZL/dP/qn9WTx/UPewy/Qfcx2L+7GdfB8+y81+&#xA;TanYq7FVXQz/AM715VFT/vbc7AbH/cbd9TTb78w9b9I97maP6j7ntOa12LsVdirHfzH/APJeeaP+&#xA;2Rf/APUNJirz5opImMUoIkT4XDChqNjUZxshRrk68sU1Py3oFtxvtW1GUQxPH6L3LxBUWKZLkRF/&#xA;TDOpMAr6jMeNaEVOZ2PUZJemA+V+6+fn0bBMnYIuaLy3qk8UcN8i3DRr9VS3kRXX0pDIrxrQ7hkP&#xA;YggGopXIiWbGDY2ve/MUi5BMtM0uKwSakslxPcyerc3MxUySPxVATwVEFFQABVAzGyZTKugDEm3o&#xA;X5ef3N9/rR/qbNv2Ryl8G/B1Zfm4ch2KuxV2KuxVIPOFtzs4rgDeJ+J+T/2gZjaqO1uy7NnUjHvY&#xA;lmC7p2KuxV2KsZ1PzZeWOsS2b2araptFPI0i+qfRMlY39MxVDDhwL8+9KUrdHECHEy6kxlVbfs+S&#xA;9PPeiiOJ7j1IY5PhE5X9yXDpFIoev7Esioajr0rvicJUayNb2rQeaItS0W41HR4/VNuiuUuOUQqY&#xA;lmZCQHIZUcVFOu2Dw6NFkNRxQMo9O92n67qc0ejvc2SImqjk0scvJI+ULTItGVWZiENdqDGUBvR5&#xA;LDNI8Nj6v1WnuVOS7FXYqsl/un/1T+rJ4/qHvYZfoPuY7F/djOvg+fZea/JtTsVdiqtoQP8Ajjys&#xA;a0Avbio8f9xt3mJrfpHvcvR/Ufc9ozWOydirsVY7+ZFP+VeeaK9P0Rf1r/zDSYqoeZ/LMN5bLe6c&#xA;iiWNB+7jA4yRgbcQNqgdPbNZr9Fxjjj9X3tOXHe4eaeYNPn1DQtS06Eqk95az28bPUKHljZAWoCa&#xA;VO+2aPFLhmCehDjRNG0HNp2rTeZIbqSC2bS7c84SJmWb1jGUMrx+iQ7AMUX96AASdzSlwyxGPh34&#xA;vxtz289mVivNO8xWtm35ef3N9/rR/qbN32Ryl8HJwdWX5uHIdirsVdirsVQ2p231nT54KVLoeI/y&#xA;huv4jIZI3Ehu0+TgmC88zVvTOxV2KuxVLJ/LWiz3r3stuWnlPKUCSQRu4QIHeIMI2cIAocryA6HJ&#xA;jIQGqWCBNkKL+T/LcgmElisiTxtDJG7Oyem5VnCoWKrzMaluIFaCuHxZd7H8tj7kdbaTp1rbT21v&#xA;AsUFy8ss8a1AZ5yWkY/6xORMid2wY4gEAbFelhaRx2saRgJZ0+rLv8FEMYp/sGI3wcRSIAV5IjAy&#xA;dirsVWS/3T/6p/Vk8f1D3sMv0H3Mdi/uxnXwfPsvNJJPMWoLYzagNPQ2PptJaymejMAQF9VPTJjD&#xA;1qOPPbqBlZzGuKtmYwi+G90Pcea9St7WKeSwtyHaTnKtzL9XRYwhAaVrZOLvyPEMoTbd+2A5yBdf&#xA;j5JGAE1f4+aNs9X1efXJtPksreO2hijuGuVuXdzFO0qxUj9BV5VgPIepQV2LZZGZJqmuUABd/Yn+&#xA;hhP8c+VSacxe3HEnr/xzbutMx9b9I97fo/qPue0ZrXYuxV2Ksd/Mf/yXnmj/ALZF/wD9Q0mKsiAA&#xA;AAFANgBirDfOHln7ep2Sf5VzEv4uB/xL7803aGi/jj8f1uPlx9QwzNK4zsVZt+Xn9zff60f6mzd9&#xA;kcpfBycHVl+bhyHYq7FXYq7FXYq8/wBXtvq2pXEIFFDkr/qt8Q/A5q8sakQ9NpsnHjBQeQbnYq7F&#xA;XYq7FXYq7FXYq7FXYqsl/un/ANU/qyeP6h72GX6D7mOxf3Yzr4Pn2XmlzeWtIYyExv8AGHUL6svF&#xA;PUbk/pLypHUj9mmROGKjNJuXy7p8yKsrXDlQ6+p9YnD8JAA6Fg4bieI2wnED3/NRlPl8kXFY2sN0&#xA;9zGnGaSKKBiCaenCXaNadBQytkxEBgZEo/QgP8b+Vj3+u3H/AHTbvMXW/QPe5Oj+o+56nq3mK002&#xA;ZLc291eXUi+oILO3knIStOTso4JUjbkwr2zWOyV9J1iy1SGSS29VGif05oZ4pIJUcAGjRyqrdDUG&#xA;lD2xVG4qx38x/wDyXnmj/tkX/wD1DSYqyGNeCKnItxAHJupp3PvireKsB82+WvqTm+tF/wBEc/vE&#xA;H+62P/Gp/DOf1+i4Dxx+n7nFy463DGelM1jSzX8vP7m+/wBaP9TZu+yOUvg5GDqy/Nw5DsVdirsV&#xA;dirsVYp5xtuNzBcAbSKUb5qa/qOYWqjuC7nszJcTHuY9mK7NokKCSaAbknoBilj83nvy7FKYxK8l&#xA;DQuiEr9BNMpOeLnR7OykXSz/AB/5d/nl/wCRZx8eKf5Ny+Xzd/j/AMu/zy/8izj48V/kzL5fNo/m&#xA;B5eFPilPyT+3B48V/kzL5Iuy84+XrtgiXQjc7BZQU/4Y/D+OSGaJa8mhyx3r5JyCCAQag9Dlrht4&#xA;q7FVkv8AdP8A6p/Vk8f1D3sMv0H3Mdi/uxnXwfPsvNfk2p2KuxVW0If87x5WNTte3G3Y/wC427zE&#xA;1v0j3uXo/qPuZl+ZmnajqdtZ2kKahHaJIZJ7jT1WbmrRyQyQyRCaCX4kkqrryAPUdM1odknHkmC9&#xA;tfL1rZXNvPD9UQRRtc8BLIAPtemkk/prXZVMhIWlcCp9irHfzG/8l75o/wC2Rf8A/UNJirIsVdiq&#xA;2SNJI2jkUMjgqyncEHYg4CARRV5x5n8vPpdx6kQLWUpPpt14n+Q/wzm9bpPCNj6S4eTHw+5O/wAv&#xA;EYW969PhLoAfcAk/rzO7IHpkWzByLLs27kOxV2KuxV2KuxVKfM9t62kuwFWhIkH0bH8DlGojcXN0&#xA;E+HIPNhOa936QeeLqS38uz+mSrTMsRI8GNW+8CmVZjUXO7PgJZRfR5XmE9KuYbA+I/jTFAW4pb2x&#xA;Q6h+jxxVkHlvzbeaSwim5T2B/wB1HqvuhP6ssx5TH3ODq9FHLuNpfjm9KsNQs7+2W5tJBLE3cdQf&#xA;AjsczIyBFh5/JilA1IbojJNa115IyjqQRkomiCxnG4kMdjUqvEihBII9651+M2LD59nBEqK7LGl2&#xA;KuxVE6Cjnzn5YkCngt/MrN2BbTLwgfTxOYetPpHvczRj1H3M0/M7VdR0zStPnsrieIPeiO4is+P1&#xA;maMwStwiBhuiSGVXIWOtAdwK5rXYp55VvPrnl2wuvVef1og4lldJXavdnjWNSfkoxVNcVYN5rg1S&#xA;HyP+Yf12eaeN7e/ksGmC0W3bTEPCMIF+BJOajuTWpJ3xVmVgbo2cRupElnK1eSOJ4FNdx+6kaR02&#xA;7FsVV8VdiqncW8FxC0M6CSJxRkYVByM4CQo7hBFrbSztbSEQ20axRA1Cr4nvgx44wFRFBQAOStk0&#xA;uxV2KuxV2KuxVbNEssTxN9mRSrfIihwEWKZRlRBHR5vLG0UrxtsyMVYe4NM1RFPUxlYsMZ8/mnl1&#xA;/wDjKn68oz/S7Hs3+9+DzGg8fozDeidilrFXYq7FXYqjtI1m/wBKuRPaPSu0kZ3Rx4MMlGRidmnP&#xA;gjlFSem+X/M1hrEVIz6V0orJbsdx7r/MMzMeQSed1OkliO+8e9OMscROtJ8q6TqtgZrhXSYSMpki&#xA;ahIAHUEMPwzbaLUzjCnm+1dNCWW/JE/8q60T/f8Ac/8ABR/80ZmfnZ9wdZ+Th3l3/KutE/3/AHP/&#xA;AAUf/NGP52fcF/Jw7y2Py60MEEzXJ9i6fwTH87PyX8nDzQesaZHpnmPybb2YSOxbU5y0XpO0rSjS&#xA;r742n58QOJpwKV8DtTMeeQyNlyIQERQS/wDN/VmsLfTTPH6do1yPS1MTwWht5xDNUJPLqWltzkTb&#xA;iDTjyqTUDIM2TeRJI5PJ+kvEkMcbQLwS2kWaICppSVJblXP8zeq9TX4j1xVPsVY7+ZH/AJLvzT/2&#xA;yL/2/wCPaTFU/gUrBGrAqQoBUsXIIHQud2+Z64qvxV2KuxV2KuxV2KuxV2KuxV2KuxVhHma29DVp&#xA;CBRZgJB9Ox/EZrtRGpPQaCfFiHlswbz/AP8AKOv/AMZY/wBeYef6Xedmf3vwLzDMN6N2KuxV2Kux&#xA;V2KuxVVt5ZYZllhdo5I/iV1NCCN9jjbGUQRR5M78vefo53jtNUAjkairdDZSenxj9n59PlmTjz9C&#xA;6TVdmmI4ofJ7L5S/45Tf8ZW/UM3Gm+l4ztL+8+CdZkOA7FXYqxnzUrHzH5MahKjVZwW5EAV0m96p&#xA;0bp1PT6cVQv5iahrdtb2UOmySpJdz+nBHZsPrcsqxySMgDxSx+mI0LEsRuOviQqZ+Rfqn+ENJFoS&#xA;bf6uvDkWLDxDcwpqD1FAB22wKnuKsd/Mj/yXfmnav+4i/wBv+jaTFU/gVVgjVY/RUKAsPwjgKfZ+&#xA;Eldum22Kr8VdirsVdirsVdirsVdirsVdirsVY75xtuVvBcgboxRvkwqP1Zi6qOwLtOzJ+oxeY+f/&#xA;APlHX/4yx/rzWZ/peo7M/vfgXmGYb0bsVdirsVdirsVdirYxV2KvoH8l9Xkv/KTRzNyms52hLHqV&#xA;4KUJ+g0+jN12fO4V3F8/9o8AhqLHKUb+9nuZ7oHYq7FWM+alU+Y/JrGLkw1WcCai/CDpN7Vak8vi&#xA;9h237Yqkn51Ow8uWMZltoopr1Yna4iEzgvDKFeBfTnPOM/H8K1oDvxrUhWR+QuX+DNG5SRS0tIwH&#xA;gRY4+IFFAREiVeI2ICKK9h0wKn2Ksd/Mf/yXnmj/ALZF/wD9Q0mKshjVlRVZubAAM5AFSO9BireK&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KoPWLb6zplxEBVuBZfmvxD9WV5Y3Ehv00+HIC8b8/wD/ACjr/wDG&#xA;WP8AXmmz/S9r2Z/e/AvMMw3o3Yq7FXYq7FXYq7FXYq2DTFXuH5Cn/nXdR/5i/wDmUubfs36T73h/&#xA;aj++j/V/SXp2bJ5h2KuxVjfmlWOv+TmDUUatMClBuTpN9Q167Yqw385NYQ31pot1HZPaBYLhFunu&#xA;beRpbiWS29SK6tpI2hW3X45Phbkppt1wqz3ybbQW3lbTLe3uYryGKBVS5t1KRPTugZpGp/rMT4kn&#xA;fAqc4qx38x//ACXnmjt/uIv9/wDo2kxVkMalUVWYuVABdqVYjueIA39hireKuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV4x+aNt9W0y6gpQJcJx/1Sar+BzSauNWPN7fsbJxyifJ5RQ0r28cwXqGsVdirsVdi&#xA;rsVdirsVdir3H8hP+Ue1H/mL/wCZS5t+zfpPveH9qf76P9X9JenZsnmHYq7FWN+aVY6/5ObmQo1a&#xA;YFBShrpN9udq7U7HFUu/MrzVrnlq3tLyxnhEFw5g+rNY/W5S4R5Wf1H1DTYlRUj6Gp/gqn3lHVrn&#xA;V/LdhqV0FFzcxcpgsfpANUgj0xLc8aU6eo3zxVN8VY7+Y9f+VeeaKdf0Rf8A/UNJirIYy5RTIArk&#xA;DmqnkAe4BIWv3Yq3irsVdirsVdirsVdirsVdirsVdirsVeXfndbLHpS3HQTPGp92Qn+FM1faMaov&#xA;VezWS58PdbxKuap7Vx67dMVcOowjm15QTAgdxStNPaysVWxgWO4ZR6xhSJCxWNqcq8Q3x+/4VzN8&#xA;WEpky5ed97zktFqMOCIxfUavhEYkbcj379bRIF4ZTy5cA6kUKAUrQjqagdT09gTiZYgNquj3oji1&#xA;kpgz4uESif4fsH9nuXfo+z+t/Wvq8fr0/v8AivqVpT7X2um2UDMRCr6uznoYy1JlwijDnQvivn7/&#xA;ADVLaL0ovT3orNSpLGhYkVJJJ28cjmlxSv3fc39nYjjwiJFUZf7oqmVOc7FXuP5Cf8o9qP8AzF/8&#xA;ylzb9m/Sfe8P7U/30f6v6S9OzZPMOxV2Ksb80mT9P+TgFBj/AEtNyYk1B/RN9Sgpv374qk/5uySR&#xA;6XpLxXENtMNQokl9JHFYHlaXCsl28yTRhGU0WqE8+NMVZD5JufrPlLSbjgsYktkZUREjQLTbgsYC&#xA;cKfZ4ihGKp3irHfzG/8AJe+aP+2Rf/8AUNJirIsVdirsVdirsVdirsVdirsVdirsVdirsVYJ+c9g&#xA;9z5JmmRam0mjlbx4FuB/FhmD2hG8d9xd97O5RHUgH+IF895pH0Ftq132pt922KA1il2KuxV2KuxV&#xA;2KuxV7j+Qn/KPaj/AMxf/Mpc2/Zv0n3vD+1P99H+r+kvTs2TzDsVdirHfNH/AB3PKH/bXl/7pN/i&#xA;qV/mp6zadpUERklM9/wewj+sAXS/Vpm9NmtmjkHEgP8AaoeNCDthCpt5Dh12DyxZw60/qXUa8Edh&#xA;IJTEAAvreqWbmN6kk1FKmtcCobVfOFzY+cbTRfRh+pzCD1pnkKzVuEu3DInThH9S+In+btx3VQPm&#xA;zVb698i/mBDd2yW/6OttQtYAjmQyQ/o5ZkkbZaM3rfZHTxxVmNncrdWyTrHJEHBIjmQxuKGnxK24&#xA;xVWxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN7Z217aTWdygkt7hGiljPQq4oRkZREhRZ48koSEo7Eb&#xA;vn3zt+V+s+XpZbm1Rr3SQSVnUVaNa9JVHh49M0Wo0kse/OL6D2b21j1AEZHhyd3f7mEZiu7dirsV&#xA;dirsVdirsVdir3H8hP8AlHtR/wCYv/mUubfs36T73h/an++j/V/SXp2bJ5h2KuxVi/mm6UeZ/J9r&#xA;6cnI6nNJ6vA+lQaVfjjz6cvbFWPfnjdaVBoOmvfejL6N+jiC6WCS2POCZAbhLgPHx68DxrzAp3wq&#xA;yvyJJDJ5P0mSCFLeF7dWSGKKOGNQdxwSIKgX+XiKEb4FTefT7C4lEs9tFNKEaISSIrMI5NnSpFeL&#xA;dx3xVIvzGjjX8vPNZVQpfSb9nNKVP1R1qfHYAYqn9px+qw8eJX014lKhaUH2a70xVVxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxVxAIodweoxV5150/J3SdW53mjcdO1A1JiApbyH3UfYPuv3Zr8+gEt47&#xA;H7Ho+zvaHJi9OX1w+0freK61oOraJetZ6nbPbTjcBvssP5kYbMPcZqZ45QNEU9pptVjzR4oGwl+Q&#xA;ch2KuxV2KuxV2KvcfyE/5R7Uf+Yv/mUubfs36T73h/an++j/AFf0l6dmyeYdirsVYv5r4/4n8l1K&#xA;8v0pc0Bryp+ir2tO1PHFV+r+TW1PzFJqkmoXFrA1lFaelaSemzNHLJIS9QwI/eCmKp/ZWv1W0it/&#xA;Wkn9McfWnbnI3uzbVOKq2Ksd/Mj/AMl55o3p/uIv9/8Ao2kxVP4TWFCXEhKg+ouwbb7QpXriq/FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUBrWhaTrVk1lqdslxA3QMPiU/zIw+JT7jK8mKMxUg5&#xA;Gm1WTDLigaLxXzp+TuraT6l5o3LUdPG5iArcRj3UfbA8V39s1GfQyhvHcfa9p2d7QY8tRy+if+xP&#xA;6vxu86IIND1zBejaxV2KuxV2KvcfyE/5R7Uf+Yv/AJlLm37N+k+94f2p/vo/1f0l6dmyeYdirsVY&#xA;15qJ/wAReTR6gAOqz/uz1amk3243/Z/jirJcVdirsVY7+Y//AJLzzRtX/cRf7f8ARtJirIIjWJDw&#xA;MdVH7s0qu32TxJG3scVXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwrzp+VmheYg91A&#xA;BYaqan6zGPgkP/Fqd/8AWG/zzD1GijPcbSd12d23l0/pPrx93d7nhvmTynrnl27+r6nbmMMT6M6/&#xA;FFIB3R/4dfbNNlwygakHudHrsWojcD8OoSfK3MdirsVe4/kJ/wAo9qP/ADF/8ylzb9m/Sfe8P7U/&#xA;30f6v6S9OzZPMOxV2Ksb80n/AJ2DycPTJrqs/wC82ov+4m+23PLf2HbFWSYq7FXYqx38x6/8q880&#xA;U6/oi/8A+oaTFWQxlyimQBXIHNVPIA9wCQtfuxVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqh9Q06w1G0e0voEubaQUeKQcgff2PvkZwEhRFhsxZp45cUDUg8c86fkrd2nqXvlstc2w+&#xA;JrBzWZf+Mbftj2+1881Oo0BjvDcPY9ne0cZ1HN6T/O6fHu+73PLZI5I5GjkUpIhKujAggjYgg5rn&#xA;qQQRYarToaDFXuX5DKw8uX7EUDXdVPjSNQc2/Zv0n3vD+1B/fR/q/pemZsnmXYq7FWN+aTJ+n/Jw&#xA;Cgx/pabkxJqD+ib6lBTfv3xVkmKuxV2Ksd/Mc0/LzzQT/wBWi/8A+oaTFWQxukiLIh5I4DKw7g7g&#xA;4q3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYt5x/LrQfM0bSzJ9W1KlI76I&#xA;Dlt0Ei9HHz38CMxc+kjk35S73a9n9r5dMaHqh/NP6O541q35U+dLG9NvFYtexkgR3FvRkYHoTUgr&#xA;035dM1M9Jkiaq3ssHbmmnGzLhPcXtf5feWp/Lvli30+4IN0WaW44moDuegPegAGbfS4TjhR5vFdr&#xA;awajOZx+nkGR5kutdirsVY35pkQa/wCToyfjbVpiq+IXSb6v6xirJMVdirsVY7+Y3/kvfNH/AGyL&#xA;/wD6hpMVZFirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rHfNH/Hc8of9teX/ALpN/irIsVWTzw28ElxO6xQQq0ksjGiqiirMSegAGKpTL5x8sRaTHq8uoxJp&#xA;0sjQpcMSF9SPkXUgioKCNy1RsASdhiqW+edT06+8gecks7iO4ay0/ULW7EbBvTnWzLtG1OjBZFqO&#xA;2KsrxVpZEYsqsGKHi4BqVNA1D4bEHFVongIQiRSJCVjII+JgCSB4kcT92KrfrdrWnrJUniByHUP6&#xA;dOv8/wAPz2xVTTUrCS6S1jnR55EeREQ8qrEYw5qNtvWT78VREkiRo0kjBEQFndjQADckk4q55ESn&#xA;NgvIhVqaVJ6D5nFVpngHKsijgyxtuNnanFT7nkKD3xVYb2yG5uIwDvu69qjx/wAk/dirrS8tbyEz&#xA;W0gliDyRFxWnOGRopBv/ACuhGKqpkQOIywDsCypXchaAkD25DFVpmhHMF1BjHKSpHwg71bw6Yq0b&#xA;i3BoZUB+A0LD/dh4p/wTbDxxVQm1bTIUVpLmMB3jiSjBiXmdY4xRa/aaRR9OKovFVqyxMhdXUopY&#xA;MwIIBUkMCfYihxVoTQngA6kyDlHQj4gN6r49cVWG9swoYzx8SquDzWhVgSrdehCmnyxVbDqFlPdS&#xA;2sMyyTwokkqKa8VkZ1Q1G27RMPoxVXeREHJ2CgkKCTQVY8VG/iTQYq5pEVlVmAZ6hFJoTQVNMVWi&#xA;eAkASKSzGNRUbuoJKj3AU7Yqpi/sSARcREMAV+NdwwBBG/fkMVXWd3b3lpBeWziS2uY1mgkFQGR1&#xA;DK29DuDiqoJELmMMC6gMyV3AaoBI9+JxVaZ4ArMZFCo3FzyFA22x8DuMVaa5tkqHlRSp4tVgKME9&#xA;Qg+/D4vlvirHfMt1bSa/5RSOVHcavLVVYEj/AHEX53AxVk2KoPWtKttX0e/0m6r9W1C3ltZ+Ozen&#xA;OhjanvRsVYxefl015pbWk2qMLmWa4uJ7tYUBZ7yKW3uKISVUGKYBf5SoO+4wqlnmxdT0C6vrWwht&#xA;ZtF1izu7q5tZ4DKFkiitbZvUBPF4vSq7KRVzWuKoPyv5KsdTn068uPLOgPopS6SaeOwtle59OZo4&#xA;LgIYqxiREV1CswIYk02GKsw/5Vx+Xn/Ur6R/0gW3/VPArv8AlXH5ef8AUr6R/wBIFt/1TxVTufy3&#xA;8h/V5fq3lfRfrPBvQ9Swt+HOnw8uKVpy60xV57o+i6Rearo1lJ5Z0H1L6wtZbi3XTLeJv31m0012&#xA;rmOXiqTIIwhUipAPWuFWdaN+Wfk6PSbSPVPLukXGoCJfrcv6PtADIRV6BIlWgO2wwKjP+Vcfl5/1&#xA;K+kf9IFt/wBU8Vd/yrj8vP8AqV9I/wCkC2/6p4qkPmryT5TsH0g6d5U0R47i/it7xH0+3LtFIrbI&#xA;eFFJYbscVY15W8sQ65Z200Plny+0cN/bfpCf9GW8JNvJbRTXNusbo3xQSyshavL4eJHLkcKvQ/8A&#xA;lXH5ef8AUr6R/wBIFt/1TwK7/lXH5ef9SvpG/X/QLb/qnirv+Vb/AJef9SvpH/SBbdv+eeKvPfOG&#xA;haLpM9+sHlry/FDFLGbWU6VDIFQ2dzMkb0UcnmuII46in2uI+KhJVlGh/lzoT6lqM+q+WNFSwmW3&#xA;Om2yWNoTF+7Prhm9JXYl6GrfIDbkwVOv+Vcfl5/1K+kf9IFt/wBU8Vd/yrj8vP8AqV9I26f6Bbf9&#xA;U8VQesfl35Jj0q7ksPK+iLeJExgabT7dowwBoWVUUkDwqMVYTpeh6Xe63Jp9v5V8vtK9mJI4Z9Ni&#xA;iEbfVbSVbl3SN6o81zKnGgrwoCCGwqzfSPy38m/omyGqeV9GOpCCL66UsbUr6/AepxpGBTnWm2BU&#xA;X/yrj8vP+pX0j/pAtv8Aqnirv+Vcfl5/1K+keP8AvBbf9U8VYt508oeXNKCzaX5T0OWP6pfSCFtN&#xA;gd3uILZ5YF+FNk5IAQNziqh5a8m6Rqn6NuV8t6DPpSXN7Dd3sen20f1m3jMiW8qRGI8SWVN0fi3x&#xA;HYUwqzD/AJVx+Xn/AFK+kf8ASBbf9U8Cu/5Vv+Xn/Ur6R/0gW3/VPFWN+cfJ3lrTPqk2meUtEnjk&#xA;F2JIG06BpJJY7GeeFVIQAKXhAPc1GKoXyVoMT32mappeh6PHBa3V1HLrVlZW9rJLCI2RWRfT5qCX&#xA;Klo5N99qbEq9QwK7FXYq7FXYq7FXYq7FXYq7FXYq7FVssiRRPLIaIilnPWgAqemKsP07z3qLaba6&#xA;tq2lLa6ZqcMM+lC1uPrVy7XDosMEkHCP946yq3wFkXerbBmVXP8Amt5RjQyySXCW6IzTXBgk4Rsk&#xA;Mk5ic0qJONvIONPtCnUirSr7j80PK1pf22n35uLC/uePG1uoWikX1ZDFESG6iWRSqFKjFUDJ+b+g&#xA;AW0sdneNayxPczyNEUeOFbdbmNxGd39VH+EDfDSr73829CgvP0fFaXcmqCS2R7F0EUipc3dvaMxD&#xA;E04PeJsacv2TSpAVu2/Nny4NMW8vPVUrFWZ7eKSWH1xbfXGt0cqpaX6v+848RthVNZvOdq2kfXbO&#xA;3la4a+TTEtJ19F1uZJlho9a0VOXMkV+EbYFYxpf5vS6k+lWUGmquq6hqF7YTQPIfTgW1iMsUrMFr&#xA;SZXhIFP2j144VZ1oGsQ6zotlqsKNEl5CkvovQshYfEjU2qrVBpgVH4q7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxiP8tfJkasqWMiigWD/SrqtuqyLKq2h9WtqBIitSDh&#xA;0GKqn/KvPJv1JrFtNV7R6epE8kzh6RSQVfk5LExzOGLfaJqanfFV0XkDytFKsy285mBrJI95du0p&#xA;DmRfXZpSZuDMSnqcuPamKtSfl95RkaBmsmBt0SKLjcXCfu44fQRW4yDkBHtRq+PXfG1U7n8tvJtx&#xA;ezX0tlIbqd3kZ1urpAskk0c7vGqyhYmMtvG/JADVRirX/Ks/JNOP6OPAJ6Yi9e49P+5+r8+HqcfV&#xA;9D936lOfH4eVMVR9/wCV7Ceymt7Ym0lkvE1ITqS5F1HKsoejH7LGMBlFARUbYqg4fy98rWlyb7T7&#xA;JbbUgEMN2Wlk4PEsoiYqz0bj9Yeo77V6LRVONH0yDStJs9MgZmhs4UgR3NXYRqF5Me7NSp98VRmK&#xA;uxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>42.000000</stDim:w>
            <stDim:h>46.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -297 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 297 li
371.5 297 li
371.5 0 li
cp
clp
[1 0 0 1 0 0 ]ct
317.296 14.9434 mo
317.296 233.99 li
317.232 234 li
316.878 231.102 314.65 228.882 311.955 228.882 cv
309.011 228.882 306.614 231.548 306.614 234.845 cv
306.614 237.102 307.748 239.071 309.42 240.074 cv
309.179 240.474 li
215.459 183.211 li
216.741 183.769 218.097 184.066 219.499 184.066 cv
228.035 184.066 234.946 173.152 234.946 159.684 cv
234.946 146.216 228.035 135.302 219.499 135.302 cv
210.973 135.302 204.063 146.216 204.063 159.684 cv
204.063 161.198 204.146 162.674 204.322 164.105 cv
161.8 12.6221 li
317.296 12.6221 li
317.296 14.9434 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .365 .314 0 cmyk
f
317.23 234 mo
317.277 234.278 317.295 234.557 317.295 234.845 cv
317.295 238.133 314.909 240.799 311.955 240.799 cv
311.036 240.799 310.171 240.538 309.419 240.074 cv
307.748 239.071 306.614 237.102 306.614 234.845 cv
306.614 231.548 309.01 228.882 311.955 228.882 cv
314.648 228.882 316.877 231.102 317.23 234 cv
f
215.459 183.211 mo
209.773 180.787 205.391 173.365 204.322 164.105 cv
204.146 162.674 204.063 161.198 204.063 159.684 cv
204.063 146.216 210.973 135.302 219.499 135.302 cv
228.035 135.302 234.946 146.216 234.946 159.684 cv
234.946 173.151 228.035 184.064 219.499 184.064 cv
218.097 184.064 216.741 183.769 215.459 183.211 cv
f
304.965 109.622 mo
307.557 110.514 310.604 112.762 313.24 115.957 cv
316.584 119.997 318.313 124.418 317.932 127.27 cv
317.811 128.255 317.43 129.054 316.779 129.592 cv
314.235 131.691 308.541 128.979 304.045 123.536 cv
299.559 118.102 297.98 111.991 300.516 109.901 cv
301.566 109.037 303.153 108.991 304.965 109.622 cv
.071 .886 1 .012 cmyk
f
317.932 127.27 mo
317.932 231.318 li
317.002 231.318 li
317.002 225.568 313.919 220.915 310.12 220.915 cv
306.313 220.915 303.229 225.568 303.229 231.318 cv
303.229 235.628 304.965 239.334 307.436 240.913 cv
307.119 241.395 li
210.939 179.471 li
211.107 179.22 li
212.017 179.805 213.001 180.121 214.023 180.121 cv
218.704 180.121 222.494 173.471 222.494 165.259 cv
222.494 157.048 218.704 150.398 214.023 150.398 cv
209.732 150.398 206.184 155.98 205.626 163.234 cv
205.626 89.1318 li
205.626 95.4849 209.797 100.631 214.952 100.631 cv
220.098 100.631 224.278 95.4849 224.278 89.1318 cv
224.278 83.3457 220.803 78.562 216.289 77.7627 cv
216.308 77.6431 li
253.257 77.6431 li
249.662 77.772 247.052 78.8779 246.449 80.8291 cv
245.39 84.2559 250.879 89.0117 258.729 91.436 cv
266.577 93.8779 273.803 93.0698 274.862 89.6519 cv
275.288 88.2588 274.639 86.6519 273.189 85.064 cv
304.965 109.622 li
303.154 108.991 301.566 109.037 300.516 109.901 cv
297.98 111.991 299.559 118.103 304.045 123.536 cv
308.541 128.979 314.235 131.691 316.78 129.592 cv
317.43 129.054 317.811 128.255 317.932 127.27 cv
f
310.12 220.915 mo
313.919 220.915 317.002 225.568 317.002 231.318 cv
317.002 237.066 313.919 241.73 310.12 241.73 cv
309.172 241.73 308.262 241.442 307.436 240.913 cv
304.965 239.334 303.227 235.628 303.227 231.318 cv
303.227 225.568 306.311 220.915 310.12 220.915 cv
f
273.189 85.064 mo
274.638 86.6519 275.289 88.2588 274.862 89.6519 cv
273.802 93.0698 266.577 93.8779 258.729 91.436 cv
250.879 89.0117 245.39 84.2559 246.449 80.8291 cv
247.052 78.8779 249.663 77.772 253.257 77.6431 cv
254.483 77.6431 li
256.917 77.6982 259.703 78.1631 262.573 79.0449 cv
267.236 80.4849 271.063 82.751 273.189 85.064 cv
f
254.482 77.6426 mo
253.256 77.6426 li
253.656 77.6338 254.064 77.6338 254.482 77.6426 cv
f
216.289 77.7632 mo
220.803 78.562 224.277 83.3462 224.277 89.1323 cv
224.277 95.4854 220.098 100.631 214.951 100.631 cv
209.797 100.631 205.626 95.4854 205.626 89.1323 cv
205.626 82.7881 209.797 77.6421 214.951 77.6421 cv
215.406 77.6421 215.852 77.6802 216.289 77.7632 cv
f
214.023 150.398 mo
218.704 150.398 222.495 157.048 222.495 165.259 cv
222.495 173.471 218.704 180.121 214.023 180.121 cv
213.001 180.121 212.016 179.805 211.107 179.22 cv
207.865 177.139 205.542 171.678 205.542 165.259 cv
205.542 164.572 205.57 163.894 205.626 163.234 cv
206.184 155.98 209.732 150.398 214.023 150.398 cv
f
356.496 96.9141 mo
324.142 96.9141 li
321.561 96.9141 319.186 96.0513 317.296 94.6025 cv
317.296 15.8145 li
319.186 14.3662 321.561 13.5034 324.142 13.5034 cv
356.496 13.5034 li
362.652 13.5034 367.643 18.4131 367.643 24.4712 cv
367.643 85.9453 li
367.643 92.0034 362.652 96.9141 356.496 96.9141 cv
.439216 .197647 0 0 cmyk
f
317.296 94.6025 mo
314.679 92.5952 312.996 89.4639 312.996 85.9453 cv
312.996 24.4712 li
312.996 20.9526 314.679 17.8213 317.296 15.8145 cv
317.296 94.6025 li
.439216 .270588 .0627451 0 cmyk
f
98.0547 12.623 mo
98.0547 85.2393 li
97.9897 85.248 li
97.8877 84.2832 97.7109 83.2788 97.46 82.2671 cv
95.9189 76.0439 92.0635 71.6411 88.8496 72.4399 cv
85.6367 73.229 84.2705 78.9229 85.8125 85.146 cv
86.4717 87.793 87.5396 90.106 88.8037 91.834 cv
46.0396 43.0698 li
46.0396 12.623 li
98.0547 12.623 li
cp
.408 0 .882 0 cmyk
f
88.8032 91.834 mo
87.54 90.106 86.4722 87.793 85.8125 85.146 cv
84.2705 78.9229 85.6362 73.23 88.8501 72.4399 cv
92.0635 71.6411 95.918 76.0439 97.46 82.2671 cv
97.7109 83.2788 97.8872 84.2832 97.9902 85.249 cv
98.5103 90.2178 97.126 94.314 94.4321 94.9741 cv
92.5742 95.4287 90.5122 94.1748 88.8032 91.834 cv
f
.929 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
45.6079 13.5029 mo
368.067 13.5029 li
368.067 267.925 li
45.6079 267.925 li
45.6079 13.5029 li
cp
0 0 0 0 cmyk
@
45.6084 13.5029 mo
45.6084 16.6758 li
45.6084 267.925 mo
45.6084 264.674 li
45.6084 13.5029 mo
45.6084 15.0498 li
45.6084 267.925 mo
45.6084 266.3 li
45.6084 267.925 mo
45.6084 13.5029 li
45.6084 267.925 mo
368.067 267.925 li
368.067 267.925 mo
368.067 13.5029 li
45.6084 267.925 mo
45.6084 13.5029 li
45.6084 13.5029 mo
368.067 13.5029 li
45.6084 267.925 mo
368.067 267.925 li
0 0 0 1 cmyk
@
45.6963 272.126 mo
45.937 271.784 46.2593 271.613 46.6631 271.613 cv
47.0732 271.613 47.416 271.807 47.6909 272.194 cv
47.9658 272.582 48.1035 273.364 48.1035 274.543 cv
48.1035 275.715 47.9658 276.496 47.6909 276.887 cv
47.416 277.277 47.0762 277.473 46.6729 277.473 cv
46.269 277.473 45.9297 277.278 45.6548 276.889 cv
45.3799 276.5 45.2422 275.718 45.2422 274.543 cv
45.2422 273.367 45.3936 272.563 45.6963 272.126 cv
45.6963 272.126 li
45.6963 272.126 li
cp
45.0469 277.453 mo
45.4404 277.947 45.9824 278.195 46.6729 278.195 cv
47.1968 278.195 47.6309 278.055 47.9741 277.772 cv
48.3174 277.491 48.5752 277.093 48.748 276.576 cv
48.9204 276.061 49.0068 275.383 49.0068 274.543 cv
49.0068 273.833 48.9531 273.27 48.8457 272.851 cv
48.7383 272.433 48.5898 272.078 48.4014 271.786 cv
48.2124 271.495 47.9731 271.272 47.6836 271.117 cv
47.3936 270.963 47.0566 270.886 46.6729 270.886 cv
46.1519 270.886 45.7197 271.025 45.3765 271.306 cv
45.0332 271.586 44.7744 271.983 44.6001 272.499 cv
44.4258 273.016 44.3389 273.696 44.3389 274.543 cv
44.3389 275.887 44.5747 276.857 45.0469 277.453 cv
45.0469 277.453 li
45.0469 277.453 li
cp
42.0879 270.886 mo
41.5215 270.886 li
41.3682 271.195 41.1079 271.514 40.7402 271.843 cv
40.3721 272.172 39.9424 272.451 39.4512 272.683 cv
39.4512 273.532 li
39.7246 273.432 40.0332 273.279 40.3765 273.078 cv
40.7197 272.876 40.9971 272.674 41.209 272.473 cv
41.209 278.073 li
42.0879 278.073 li
42.0879 270.886 li
42.0879 270.886 li
cp
f
52.4277 272.941 mo
52.5859 272.781 52.7856 272.702 53.0264 272.702 cv
53.2734 272.702 53.4785 272.782 53.6431 272.943 cv
53.8071 273.105 53.8892 273.31 53.8892 273.556 cv
53.8892 273.799 53.8096 273.999 53.6504 274.156 cv
53.4907 274.314 53.2886 274.393 53.0439 274.393 cv
52.8862 274.393 52.7393 274.355 52.6025 274.28 cv
52.4658 274.205 52.3628 274.1 52.2939 273.963 cv
52.2246 273.826 52.1895 273.686 52.1895 273.539 cv
52.1895 273.3 52.269 273.101 52.4277 272.941 cv
52.4277 272.941 li
cp
52.5483 271.162 mo
52.6777 271.037 52.8398 270.974 53.0352 270.974 cv
53.2285 270.974 53.3906 271.038 53.5205 271.166 cv
53.6504 271.294 53.7158 271.452 53.7158 271.641 cv
53.7158 271.82 53.6523 271.973 53.5264 272.097 cv
53.3999 272.222 53.2383 272.283 53.041 272.283 cv
52.8379 272.283 52.6729 272.221 52.5454 272.096 cv
52.4185 271.971 52.355 271.809 52.355 271.611 cv
52.355 271.438 52.4194 271.287 52.5483 271.162 cv
52.5483 271.162 li
cp
51.8696 272.854 mo
51.7319 273.037 51.6631 273.265 51.6631 273.536 cv
51.6631 273.9 51.7891 274.205 52.042 274.448 cv
52.2939 274.692 52.626 274.814 53.0381 274.814 cv
53.4497 274.814 53.7822 274.692 54.0342 274.45 cv
54.2866 274.207 54.4131 273.907 54.4131 273.551 cv
54.4131 273.292 54.3462 273.07 54.2124 272.884 cv
54.0786 272.698 53.8838 272.563 53.6274 272.479 cv
53.834 272.402 53.9883 272.291 54.0898 272.148 cv
54.1914 272.005 54.2422 271.837 54.2422 271.643 cv
54.2422 271.34 54.1313 271.082 53.9092 270.87 cv
53.687 270.658 53.394 270.553 53.0293 270.553 cv
52.667 270.553 52.3765 270.656 52.1582 270.863 cv
51.9404 271.07 51.8311 271.325 51.8311 271.629 cv
51.8311 271.83 51.8823 272.003 51.9849 272.146 cv
52.0874 272.291 52.2446 272.402 52.457 272.479 cv
52.2031 272.547 52.0068 272.671 51.8696 272.854 cv
51.8696 272.854 li
cp
51.2446 273.49 mo
51.2446 272.976 li
49.6704 272.976 li
49.6704 273.49 li
51.2446 273.49 li
51.2446 273.49 li
cp
f
99.3252 13.5029 mo
99.3252 16.6758 li
99.3252 267.925 mo
99.3252 264.674 li
99.3252 13.5029 mo
99.3252 15.0498 li
99.3252 267.925 mo
99.3252 266.3 li
96.8486 13.5029 mo
96.8486 15.0498 li
96.8486 267.925 mo
96.8486 266.3 li
94.1396 13.5029 mo
94.1396 15.0498 li
94.1396 267.925 mo
94.1396 266.3 li
90.9658 13.5029 mo
90.9658 15.0498 li
90.9658 267.925 mo
90.9658 266.3 li
87.4053 13.5029 mo
87.4053 15.0498 li
87.4053 267.925 mo
87.4053 266.3 li
83.1494 13.5029 mo
83.1494 15.0498 li
83.1494 267.925 mo
83.1494 266.3 li
77.9619 13.5029 mo
77.9619 15.0498 li
77.9619 267.925 mo
77.9619 266.3 li
71.2275 13.5029 mo
71.2275 15.0498 li
71.2275 267.925 mo
71.2275 266.3 li
61.7852 13.5029 mo
61.7852 15.0498 li
61.7852 267.925 mo
61.7852 266.3 li
@
97.9141 272.126 mo
98.1548 271.784 98.4771 271.613 98.8809 271.613 cv
99.291 271.613 99.6338 271.807 99.9087 272.194 cv
100.184 272.582 100.321 273.364 100.321 274.543 cv
100.321 275.715 100.184 276.496 99.9087 276.887 cv
99.6338 277.277 99.2939 277.473 98.8906 277.473 cv
98.4868 277.473 98.1475 277.278 97.8726 276.889 cv
97.5977 276.5 97.46 275.718 97.46 274.543 cv
97.46 273.367 97.6113 272.563 97.9141 272.126 cv
97.9141 272.126 li
97.9141 272.126 li
cp
97.2646 277.453 mo
97.6582 277.947 98.2002 278.195 98.8906 278.195 cv
99.4146 278.195 99.8486 278.055 100.192 277.772 cv
100.535 277.491 100.793 277.093 100.966 276.576 cv
101.138 276.061 101.225 275.383 101.225 274.543 cv
101.225 273.833 101.171 273.27 101.063 272.851 cv
100.956 272.433 100.808 272.078 100.619 271.786 cv
100.43 271.495 100.191 271.272 99.9014 271.117 cv
99.6113 270.963 99.2744 270.886 98.8906 270.886 cv
98.3696 270.886 97.9375 271.025 97.5942 271.306 cv
97.251 271.586 96.9922 271.983 96.8179 272.499 cv
96.6436 273.016 96.5566 273.696 96.5566 274.543 cv
96.5566 275.887 96.7925 276.857 97.2646 277.453 cv
97.2646 277.453 li
97.2646 277.453 li
cp
94.3057 270.886 mo
93.7393 270.886 li
93.5859 271.195 93.3257 271.514 92.958 271.843 cv
92.5898 272.172 92.1602 272.451 91.6689 272.683 cv
91.6689 273.532 li
91.9424 273.432 92.251 273.279 92.5942 273.078 cv
92.9375 272.876 93.2148 272.674 93.4268 272.473 cv
93.4268 278.073 li
94.3057 278.073 li
94.3057 270.886 li
94.3057 270.886 li
cp
f
105.964 271.116 mo
105.705 271.412 105.459 271.776 105.229 272.208 cv
104.998 272.64 104.821 273.088 104.698 273.553 cv
104.574 274.018 104.51 274.415 104.504 274.743 cv
105.031 274.743 li
105.059 274.327 105.125 273.945 105.227 273.596 cv
105.37 273.101 105.571 272.618 105.832 272.149 cv
106.093 271.681 106.356 271.305 106.622 271.022 cv
106.622 270.624 li
103.92 270.624 li
103.92 271.116 li
105.964 271.116 li
105.964 271.116 li
cp
103.462 273.49 mo
103.462 272.976 li
101.888 272.976 li
101.888 273.49 li
103.462 273.49 li
103.462 273.49 li
cp
f
153.044 13.5029 mo
153.044 16.6758 li
153.044 267.925 mo
153.044 264.674 li
153.044 13.5029 mo
153.044 15.0498 li
153.044 267.925 mo
153.044 266.3 li
150.565 13.5029 mo
150.565 15.0498 li
150.565 267.925 mo
150.565 266.3 li
147.856 13.5029 mo
147.856 15.0498 li
147.856 267.925 mo
147.856 266.3 li
144.761 13.5029 mo
144.761 15.0498 li
144.761 267.925 mo
144.761 266.3 li
141.122 13.5029 mo
141.122 15.0498 li
141.122 267.925 mo
141.122 266.3 li
136.866 13.5029 mo
136.866 15.0498 li
136.866 267.925 mo
136.866 266.3 li
131.681 13.5029 mo
131.681 15.0498 li
131.681 267.925 mo
131.681 266.3 li
124.946 13.5029 mo
124.946 15.0498 li
124.946 267.925 mo
124.946 266.3 li
115.503 13.5029 mo
115.503 15.0498 li
115.503 267.925 mo
115.503 266.3 li
@
152.131 272.126 mo
152.372 271.784 152.694 271.613 153.098 271.613 cv
153.508 271.613 153.851 271.807 154.125 272.194 cv
154.4 272.582 154.538 273.364 154.538 274.543 cv
154.538 275.715 154.4 276.496 154.125 276.887 cv
153.851 277.277 153.511 277.473 153.107 277.473 cv
152.704 277.473 152.364 277.278 152.089 276.889 cv
151.814 276.5 151.677 275.718 151.677 274.543 cv
151.677 273.367 151.828 272.563 152.131 272.126 cv
152.131 272.126 li
152.131 272.126 li
cp
151.481 277.453 mo
151.875 277.947 152.417 278.195 153.107 278.195 cv
153.632 278.195 154.065 278.055 154.409 277.772 cv
154.752 277.491 155.01 277.093 155.183 276.576 cv
155.355 276.061 155.441 275.383 155.441 274.543 cv
155.441 273.833 155.388 273.27 155.28 272.851 cv
155.173 272.433 155.025 272.078 154.836 271.786 cv
154.647 271.495 154.408 271.272 154.118 271.117 cv
153.829 270.963 153.492 270.886 153.107 270.886 cv
152.587 270.886 152.154 271.025 151.811 271.306 cv
151.468 271.586 151.209 271.983 151.035 272.499 cv
150.86 273.016 150.773 273.696 150.773 274.543 cv
150.773 275.887 151.01 276.857 151.481 277.453 cv
151.481 277.453 li
151.481 277.453 li
cp
148.522 270.886 mo
147.956 270.886 li
147.803 271.195 147.543 271.514 147.175 271.843 cv
146.807 272.172 146.377 272.451 145.886 272.683 cv
145.886 273.532 li
146.159 273.432 146.468 273.279 146.811 273.078 cv
147.154 272.876 147.432 272.674 147.644 272.473 cv
147.644 278.073 li
148.522 278.073 li
148.522 270.886 li
148.522 270.886 li
cp
f
158.912 272.737 mo
159.073 272.571 159.27 272.488 159.501 272.488 cv
159.734 272.488 159.928 272.571 160.082 272.737 cv
160.235 272.903 160.313 273.131 160.313 273.419 cv
160.313 273.719 160.234 273.956 160.079 274.131 cv
159.923 274.306 159.737 274.393 159.521 274.393 cv
159.373 274.393 159.231 274.351 159.097 274.267 cv
158.962 274.182 158.857 274.059 158.782 273.897 cv
158.707 273.736 158.67 273.567 158.67 273.391 cv
158.67 273.121 158.75 272.903 158.912 272.737 cv
158.912 272.737 li
cp
160.385 270.829 mo
160.175 270.645 159.906 270.553 159.578 270.553 cv
159.138 270.553 158.788 270.712 158.527 271.031 cv
158.229 271.397 158.081 271.983 158.081 272.79 cv
158.081 273.512 158.215 274.029 158.485 274.343 cv
158.754 274.657 159.103 274.814 159.529 274.814 cv
159.78 274.814 160.004 274.754 160.201 274.635 cv
160.398 274.516 160.554 274.343 160.667 274.118 cv
160.78 273.894 160.836 273.65 160.836 273.388 cv
160.836 272.989 160.716 272.664 160.476 272.413 cv
160.236 272.161 159.945 272.036 159.604 272.036 cv
159.408 272.036 159.221 272.081 159.043 272.173 cv
158.864 272.264 158.713 272.403 158.59 272.591 cv
158.594 272.174 158.643 271.852 158.735 271.626 cv
158.828 271.4 158.956 271.229 159.117 271.11 cv
159.24 271.02 159.383 270.974 159.547 270.974 cv
159.75 270.974 159.92 271.047 160.059 271.193 cv
160.143 271.284 160.207 271.431 160.252 271.632 cv
160.762 271.592 li
160.72 271.268 160.595 271.013 160.385 270.829 cv
160.385 270.829 li
cp
157.679 273.49 mo
157.679 272.976 li
156.105 272.976 li
156.105 273.49 li
157.679 273.49 li
157.679 273.49 li
cp
f
206.838 13.5029 mo
206.838 16.6758 li
206.838 267.925 mo
206.838 264.674 li
206.838 13.5029 mo
206.838 15.0498 li
206.838 267.925 mo
206.838 266.3 li
204.361 13.5029 mo
204.361 15.0498 li
204.361 267.925 mo
204.361 266.3 li
201.575 13.5029 mo
201.575 15.0498 li
201.575 267.925 mo
201.575 266.3 li
198.479 13.5029 mo
198.479 15.0498 li
198.479 267.925 mo
198.479 266.3 li
194.841 13.5029 mo
194.841 15.0498 li
194.841 267.925 mo
194.841 266.3 li
190.583 13.5029 mo
190.583 15.0498 li
190.583 267.925 mo
190.583 266.3 li
185.398 13.5029 mo
185.398 15.0498 li
185.398 267.925 mo
185.398 266.3 li
178.663 13.5029 mo
178.663 15.0498 li
178.663 267.925 mo
178.663 266.3 li
169.22 13.5029 mo
169.22 15.0498 li
169.22 267.925 mo
169.22 266.3 li
@
205.926 272.126 mo
206.167 271.784 206.489 271.613 206.893 271.613 cv
207.303 271.613 207.646 271.807 207.921 272.194 cv
208.195 272.582 208.333 273.364 208.333 274.543 cv
208.333 275.715 208.195 276.496 207.921 276.887 cv
207.646 277.277 207.307 277.473 206.902 277.473 cv
206.499 277.473 206.159 277.278 205.885 276.889 cv
205.609 276.5 205.472 275.718 205.472 274.543 cv
205.472 273.367 205.623 272.563 205.926 272.126 cv
205.926 272.126 li
205.926 272.126 li
cp
205.276 277.453 mo
205.67 277.947 206.213 278.195 206.902 278.195 cv
207.427 278.195 207.86 278.055 208.204 277.772 cv
208.547 277.491 208.805 277.093 208.978 276.576 cv
209.15 276.061 209.236 275.383 209.236 274.543 cv
209.236 273.833 209.183 273.27 209.075 272.851 cv
208.968 272.433 208.82 272.078 208.631 271.786 cv
208.442 271.495 208.203 271.272 207.913 271.117 cv
207.623 270.963 207.287 270.886 206.902 270.886 cv
206.382 270.886 205.949 271.025 205.606 271.306 cv
205.263 271.586 205.004 271.983 204.83 272.499 cv
204.655 273.016 204.568 273.696 204.568 274.543 cv
204.568 275.887 204.805 276.857 205.276 277.453 cv
205.276 277.453 li
205.276 277.453 li
cp
202.317 270.886 mo
201.751 270.886 li
201.598 271.195 201.338 271.514 200.97 271.843 cv
200.602 272.172 200.172 272.451 199.681 272.683 cv
199.681 273.532 li
199.954 273.432 200.263 273.279 200.606 273.078 cv
200.949 272.876 201.227 272.674 201.438 272.473 cv
201.438 278.073 li
202.317 278.073 li
202.317 270.886 li
202.317 270.886 li
cp
f
212.31 274.495 mo
212.55 274.708 212.859 274.814 213.239 274.814 cv
213.702 274.814 214.067 274.646 214.335 274.308 cv
214.556 274.032 214.665 273.706 214.665 273.328 cv
214.665 272.932 214.54 272.607 214.289 272.354 cv
214.039 272.103 213.731 271.977 213.367 271.977 cv
213.092 271.977 212.829 272.063 212.579 272.238 cv
212.804 271.116 li
214.469 271.116 li
214.469 270.627 li
212.394 270.627 li
211.989 272.771 li
212.471 272.833 li
212.547 272.713 212.65 272.616 212.783 272.541 cv
212.916 272.466 213.065 272.429 213.23 272.429 cv
213.496 272.429 213.711 272.513 213.875 272.682 cv
214.039 272.851 214.121 273.082 214.121 273.374 cv
214.121 273.682 214.036 273.928 213.865 274.114 cv
213.694 274.3 213.486 274.393 213.239 274.393 cv
213.034 274.393 212.859 274.327 212.714 274.195 cv
212.568 274.063 212.477 273.866 212.437 273.604 cv
211.898 273.65 li
211.933 274.001 212.069 274.283 212.31 274.495 cv
212.31 274.495 li
cp
211.475 273.49 mo
211.475 272.976 li
209.9 272.976 li
209.9 273.49 li
211.475 273.49 li
211.475 273.49 li
cp
f
260.556 13.5029 mo
260.556 16.6758 li
260.556 267.925 mo
260.556 264.674 li
260.556 13.5029 mo
260.556 15.0498 li
260.556 267.925 mo
260.556 266.3 li
258.078 13.5029 mo
258.078 15.0498 li
258.078 267.925 mo
258.078 266.3 li
255.369 13.5029 mo
255.369 15.0498 li
255.369 267.925 mo
255.369 266.3 li
252.196 13.5029 mo
252.196 15.0498 li
252.196 267.925 mo
252.196 266.3 li
248.635 13.5029 mo
248.635 15.0498 li
248.635 267.925 mo
248.635 266.3 li
244.378 13.5029 mo
244.378 15.0498 li
244.378 267.925 mo
244.378 266.3 li
239.192 13.5029 mo
239.192 15.0498 li
239.192 267.925 mo
239.192 266.3 li
232.458 13.5029 mo
232.458 15.0498 li
232.458 267.925 mo
232.458 266.3 li
223.015 13.5029 mo
223.015 15.0498 li
223.015 267.925 mo
223.015 266.3 li
@
259.645 272.126 mo
259.885 271.784 260.207 271.613 260.611 271.613 cv
261.021 271.613 261.363 271.807 261.639 272.194 cv
261.914 272.582 262.051 273.364 262.051 274.543 cv
262.051 275.715 261.914 276.496 261.639 276.887 cv
261.363 277.277 261.024 277.473 260.621 277.473 cv
260.217 277.473 259.877 277.278 259.603 276.889 cv
259.327 276.5 259.189 275.718 259.189 274.543 cv
259.189 273.367 259.342 272.563 259.645 272.126 cv
259.645 272.126 li
259.645 272.126 li
cp
258.994 277.453 mo
259.389 277.947 259.931 278.195 260.621 278.195 cv
261.145 278.195 261.578 278.055 261.922 277.772 cv
262.266 277.491 262.523 277.093 262.695 276.576 cv
262.868 276.061 262.955 275.383 262.955 274.543 cv
262.955 273.833 262.9 273.27 262.793 272.851 cv
262.686 272.433 262.538 272.078 262.35 271.786 cv
262.16 271.495 261.921 271.272 261.631 271.117 cv
261.342 270.963 261.005 270.886 260.621 270.886 cv
260.1 270.886 259.668 271.025 259.324 271.306 cv
258.98 271.586 258.722 271.983 258.548 272.499 cv
258.373 273.016 258.287 273.696 258.287 274.543 cv
258.287 275.887 258.522 276.857 258.994 277.453 cv
258.994 277.453 li
258.994 277.453 li
cp
256.035 270.886 mo
255.469 270.886 li
255.316 271.195 255.056 271.514 254.688 271.843 cv
254.32 272.172 253.891 272.451 253.398 272.683 cv
253.398 273.532 li
253.672 273.432 253.98 273.279 254.324 273.078 cv
254.668 272.876 254.945 272.674 255.156 272.473 cv
255.156 278.073 li
256.035 278.073 li
256.035 270.886 li
256.035 270.886 li
cp
f
265.952 273.274 mo
267.259 271.393 li
267.259 273.274 li
265.952 273.274 li
265.952 273.274 li
cp
267.771 274.743 mo
267.771 273.744 li
268.335 273.744 li
268.335 273.274 li
267.771 273.274 li
267.771 270.57 li
267.353 270.57 li
265.448 273.274 li
265.448 273.744 li
267.259 273.744 li
267.259 274.743 li
267.771 274.743 li
267.771 274.743 li
cp
265.192 273.49 mo
265.192 272.976 li
263.618 272.976 li
263.618 273.49 li
265.192 273.49 li
265.192 273.49 li
cp
f
314.271 13.5029 mo
314.271 16.6758 li
314.271 267.925 mo
314.271 264.674 li
314.271 13.5029 mo
314.271 15.0498 li
314.271 267.925 mo
314.271 266.3 li
311.796 13.5029 mo
311.796 15.0498 li
311.796 267.925 mo
311.796 266.3 li
309.087 13.5029 mo
309.087 15.0498 li
309.087 267.925 mo
309.087 266.3 li
305.99 13.5029 mo
305.99 15.0498 li
305.99 267.925 mo
305.99 266.3 li
302.354 13.5029 mo
302.354 15.0498 li
302.354 267.925 mo
302.354 266.3 li
298.096 13.5029 mo
298.096 15.0498 li
298.096 267.925 mo
298.096 266.3 li
292.909 13.5029 mo
292.909 15.0498 li
292.909 267.925 mo
292.909 266.3 li
286.176 13.5029 mo
286.176 15.0498 li
286.176 267.925 mo
286.176 266.3 li
276.732 13.5029 mo
276.732 15.0498 li
276.732 267.925 mo
276.732 266.3 li
@
313.361 272.126 mo
313.602 271.784 313.924 271.613 314.328 271.613 cv
314.738 271.613 315.08 271.807 315.355 272.194 cv
315.631 272.582 315.769 273.364 315.769 274.543 cv
315.769 275.715 315.631 276.496 315.355 276.887 cv
315.08 277.277 314.741 277.473 314.338 277.473 cv
313.934 277.473 313.595 277.278 313.319 276.889 cv
313.044 276.5 312.907 275.718 312.907 274.543 cv
312.907 273.367 313.059 272.563 313.361 272.126 cv
313.361 272.126 li
313.361 272.126 li
cp
312.712 277.453 mo
313.105 277.947 313.647 278.195 314.338 278.195 cv
314.861 278.195 315.295 278.055 315.639 277.772 cv
315.982 277.491 316.24 277.093 316.413 276.576 cv
316.585 276.061 316.672 275.383 316.672 274.543 cv
316.672 273.833 316.618 273.27 316.511 272.851 cv
316.403 272.433 316.255 272.078 316.066 271.786 cv
315.877 271.495 315.638 271.272 315.349 271.117 cv
315.059 270.963 314.722 270.886 314.338 270.886 cv
313.816 270.886 313.385 271.025 313.041 271.306 cv
312.697 271.586 312.438 271.983 312.265 272.499 cv
312.091 273.016 312.004 273.696 312.004 274.543 cv
312.004 275.887 312.239 276.857 312.712 277.453 cv
312.712 277.453 li
312.712 277.453 li
cp
309.753 270.886 mo
309.187 270.886 li
309.033 271.195 308.772 271.514 308.405 271.843 cv
308.037 272.172 307.607 272.451 307.116 272.683 cv
307.116 273.532 li
307.39 273.432 307.697 273.279 308.041 273.078 cv
308.385 272.876 308.662 272.674 308.874 272.473 cv
308.874 278.073 li
309.753 278.073 li
309.753 270.886 li
309.753 270.886 li
cp
f
319.75 274.489 mo
319.992 274.708 320.297 274.817 320.663 274.817 cv
321.068 274.817 321.404 274.69 321.671 274.438 cv
321.937 274.184 322.069 273.875 322.069 273.511 cv
322.069 273.241 322.001 273.017 321.864 272.837 cv
321.728 272.658 321.536 272.54 321.289 272.482 cv
321.479 272.396 321.622 272.277 321.719 272.13 cv
321.815 271.981 321.864 271.817 321.864 271.638 cv
321.864 271.447 321.813 271.269 321.712 271.1 cv
321.61 270.931 321.464 270.797 321.271 270.699 cv
321.08 270.602 320.871 270.553 320.643 270.553 cv
320.313 270.553 320.036 270.647 319.814 270.836 cv
319.593 271.024 319.45 271.291 319.388 271.635 cv
319.9 271.726 li
319.938 271.475 320.023 271.287 320.156 271.162 cv
320.289 271.037 320.455 270.974 320.654 270.974 cv
320.855 270.974 321.02 271.035 321.146 271.159 cv
321.273 271.282 321.338 271.438 321.338 271.626 cv
321.338 271.863 321.25 272.039 321.075 272.152 cv
320.9 272.267 320.705 272.323 320.486 272.323 cv
320.465 272.323 320.438 272.321 320.404 272.317 cv
320.347 272.768 li
320.491 272.729 320.611 272.711 320.708 272.711 cv
320.945 272.711 321.141 272.787 321.295 272.939 cv
321.448 273.093 321.525 273.286 321.525 273.521 cv
321.525 273.769 321.442 273.976 321.276 274.143 cv
321.11 274.31 320.906 274.393 320.666 274.393 cv
320.463 274.393 320.29 274.329 320.148 274.201 cv
320.008 274.072 319.907 273.863 319.849 273.573 cv
319.336 273.642 li
319.37 273.988 319.509 274.271 319.75 274.489 cv
319.75 274.489 li
cp
318.909 273.49 mo
318.909 272.976 li
317.335 272.976 li
317.335 273.49 li
318.909 273.49 li
318.909 273.49 li
cp
f
368.067 13.5029 mo
368.067 16.6758 li
368.067 267.925 mo
368.067 264.674 li
368.067 13.5029 mo
368.067 15.0498 li
368.067 267.925 mo
368.067 266.3 li
365.592 13.5029 mo
365.592 15.0498 li
365.592 267.925 mo
365.592 266.3 li
362.804 13.5029 mo
362.804 15.0498 li
362.804 267.925 mo
362.804 266.3 li
359.708 13.5029 mo
359.708 15.0498 li
359.708 267.925 mo
359.708 266.3 li
356.071 13.5029 mo
356.071 15.0498 li
356.071 267.925 mo
356.071 266.3 li
351.814 13.5029 mo
351.814 15.0498 li
351.814 267.925 mo
351.814 266.3 li
346.628 13.5029 mo
346.628 15.0498 li
346.628 267.925 mo
346.628 266.3 li
339.895 13.5029 mo
339.895 15.0498 li
339.895 267.925 mo
339.895 266.3 li
330.45 13.5029 mo
330.45 15.0498 li
330.45 267.925 mo
330.45 266.3 li
@
360.157 272.126 mo
360.397 271.784 360.72 271.613 361.124 271.613 cv
361.534 271.613 361.877 271.807 362.151 272.194 cv
362.427 272.582 362.564 273.364 362.564 274.543 cv
362.564 275.715 362.427 276.496 362.151 276.887 cv
361.877 277.277 361.537 277.473 361.134 277.473 cv
360.729 277.473 360.391 277.278 360.115 276.889 cv
359.84 276.5 359.703 275.718 359.703 274.543 cv
359.703 273.367 359.854 272.563 360.157 272.126 cv
360.157 272.126 li
360.157 272.126 li
cp
359.508 277.453 mo
359.901 277.947 360.443 278.195 361.134 278.195 cv
361.657 278.195 362.092 278.055 362.435 277.772 cv
362.778 277.491 363.036 277.093 363.209 276.576 cv
363.381 276.061 363.468 275.383 363.468 274.543 cv
363.468 273.833 363.414 273.27 363.307 272.851 cv
363.199 272.433 363.051 272.078 362.862 271.786 cv
362.673 271.495 362.434 271.272 362.145 271.117 cv
361.854 270.963 361.518 270.886 361.134 270.886 cv
360.612 270.886 360.181 271.025 359.837 271.306 cv
359.494 271.586 359.234 271.983 359.061 272.499 cv
358.887 273.016 358.8 273.696 358.8 274.543 cv
358.8 275.887 359.035 276.857 359.508 277.453 cv
359.508 277.453 li
359.508 277.453 li
cp
356.549 270.886 mo
355.982 270.886 li
355.829 271.195 355.568 271.514 355.201 271.843 cv
354.833 272.172 354.403 272.451 353.912 272.683 cv
353.912 273.532 li
354.186 273.432 354.494 273.279 354.837 273.078 cv
355.181 272.876 355.458 272.674 355.67 272.473 cv
355.67 278.073 li
356.549 278.073 li
356.549 270.886 li
356.549 270.886 li
cp
f
366.775 274.25 mo
366.832 274.157 366.904 274.065 366.992 273.973 cv
367.079 273.881 367.276 273.706 367.584 273.447 cv
367.952 273.137 368.216 272.892 368.374 272.713 cv
368.532 272.535 368.646 272.365 368.714 272.204 cv
368.782 272.043 368.816 271.878 368.816 271.711 cv
368.816 271.383 368.7 271.107 368.467 270.886 cv
368.233 270.664 367.916 270.553 367.516 270.553 cv
367.119 270.553 366.803 270.655 366.567 270.861 cv
366.332 271.067 366.196 271.367 366.16 271.76 cv
366.688 271.813 li
366.689 271.552 366.764 271.347 366.912 271.199 cv
367.061 271.051 367.258 270.977 367.504 270.977 cv
367.738 270.977 367.927 271.047 368.072 271.186 cv
368.218 271.325 368.29 271.497 368.29 271.7 cv
368.29 271.894 368.21 272.099 368.051 272.316 cv
367.892 272.533 367.585 272.828 367.131 273.2 cv
366.839 273.439 366.615 273.65 366.461 273.832 cv
366.307 274.015 366.193 274.199 366.124 274.387 cv
366.08 274.501 366.061 274.619 366.063 274.743 cv
368.822 274.743 li
368.822 274.25 li
366.775 274.25 li
366.775 274.25 li
cp
365.705 273.49 mo
365.705 272.976 li
364.131 272.976 li
364.131 273.49 li
365.705 273.49 li
365.705 273.49 li
cp
f
368.067 267.925 mo
368.067 13.5029 li
45.6084 267.925 mo
45.6084 13.5029 li
45.6084 13.5029 mo
368.067 13.5029 li
45.6084 267.925 mo
368.067 267.925 li
368.067 13.5029 mo
364.816 13.5029 li
45.6084 13.5029 mo
48.7822 13.5029 li
368.067 13.5029 mo
366.442 13.5029 li
45.6084 13.5029 mo
47.1572 13.5029 li
368.067 17.3721 mo
366.442 17.3721 li
45.6084 17.3721 mo
47.1572 17.3721 li
368.067 21.707 mo
366.442 21.707 li
45.6084 21.707 mo
47.1572 21.707 li
368.067 26.583 mo
366.442 26.583 li
45.6084 26.583 mo
47.1572 26.583 li
368.067 32.311 mo
366.442 32.311 li
45.6084 32.311 mo
47.1572 32.311 li
368.067 38.9678 mo
366.442 38.9678 li
45.6084 38.9678 mo
47.1572 38.9678 li
368.067 47.25 mo
366.442 47.25 li
45.6084 47.25 mo
47.1572 47.25 li
368.067 57.7764 mo
366.442 57.7764 li
45.6084 57.7764 mo
47.1572 57.7764 li
368.067 72.7158 mo
366.442 72.7158 li
45.6084 72.7158 mo
47.1572 72.7158 li
368.067 98.2583 mo
364.816 98.2583 li
45.6084 98.2583 mo
48.7822 98.2583 li
368.067 98.2583 mo
366.442 98.2583 li
45.6084 98.2583 mo
47.1572 98.2583 li
368.067 102.128 mo
366.442 102.128 li
45.6084 102.128 mo
47.1572 102.128 li
368.067 106.463 mo
366.442 106.463 li
45.6084 106.463 mo
47.1572 106.463 li
368.067 111.417 mo
366.442 111.417 li
45.6084 111.417 mo
47.1572 111.417 li
368.067 117.067 mo
366.442 117.067 li
45.6084 117.067 mo
47.1572 117.067 li
368.067 123.801 mo
366.442 123.801 li
45.6084 123.801 mo
47.1572 123.801 li
368.067 132.006 mo
366.442 132.006 li
45.6084 132.006 mo
47.1572 132.006 li
368.067 142.61 mo
366.442 142.61 li
45.6084 142.61 mo
47.1572 142.61 li
368.067 157.549 mo
366.442 157.549 li
45.6084 157.549 mo
47.1572 157.549 li
368.067 183.092 mo
364.816 183.092 li
45.6084 183.092 mo
48.7822 183.092 li
368.067 183.092 mo
366.442 183.092 li
45.6084 183.092 mo
47.1572 183.092 li
368.067 186.962 mo
366.442 186.962 li
45.6084 186.962 mo
47.1572 186.962 li
368.067 191.296 mo
366.442 191.296 li
45.6084 191.296 mo
47.1572 191.296 li
368.067 196.251 mo
366.442 196.251 li
45.6084 196.251 mo
47.1572 196.251 li
368.067 201.9 mo
366.442 201.9 li
45.6084 201.9 mo
47.1572 201.9 li
368.067 208.635 mo
366.442 208.635 li
45.6084 208.635 mo
47.1572 208.635 li
368.067 216.839 mo
366.442 216.839 li
45.6084 216.839 mo
47.1572 216.839 li
368.067 227.443 mo
366.442 227.443 li
45.6084 227.443 mo
47.1572 227.443 li
368.067 242.382 mo
366.442 242.382 li
45.6084 242.382 mo
47.1572 242.382 li
368.067 267.925 mo
364.816 267.925 li
45.6084 267.925 mo
48.7822 267.925 li
368.067 267.925 mo
366.442 267.925 li
45.6084 267.925 mo
47.1572 267.925 li
@
76.0835 38.9683 mo
76.0835 30.3784 li
74.9468 30.3784 li
74.9468 38.9683 li
76.0835 38.9683 li
76.0835 38.9683 li
cp
67.8862 31.3921 mo
70.0835 31.3921 li
70.5991 31.3921 70.9526 31.4175 71.144 31.4683 cv
71.4409 31.5503 71.6802 31.7192 71.8618 31.9751 cv
72.0435 32.231 72.1343 32.5386 72.1343 32.8979 cv
72.1343 33.394 71.98 33.7788 71.6714 34.0522 cv
71.3628 34.3257 70.8413 34.4624 70.1069 34.4624 cv
67.8862 34.4624 li
67.8862 31.3921 li
67.8862 31.3921 li
cp
67.8862 38.9683 mo
67.8862 35.4761 li
70.0894 35.4761 li
71.3042 35.4761 72.144 35.2231 72.6089 34.7173 cv
73.0737 34.2114 73.3062 33.5933 73.3062 32.8628 cv
73.3062 32.437 73.2192 32.0464 73.0454 31.6909 cv
72.8716 31.3354 72.6421 31.0591 72.3569 30.8618 cv
72.0718 30.6646 71.7183 30.5308 71.2964 30.4604 cv
70.9956 30.4058 70.5601 30.3784 69.9897 30.3784 cv
66.7495 30.3784 li
66.7495 38.9683 li
67.8862 38.9683 li
67.8862 38.9683 li
cp
58.8306 37.7524 mo
59.1294 38.2075 59.5415 38.5483 60.0669 38.7749 cv
60.5923 39.0015 61.2437 39.1147 62.021 39.1147 cv
62.6343 39.1147 63.186 39.0024 63.6763 38.7778 cv
64.1665 38.5532 64.5425 38.2388 64.8042 37.8345 cv
65.0659 37.4302 65.1968 36.9995 65.1968 36.5425 cv
65.1968 36.0815 65.0776 35.6743 64.8394 35.3208 cv
64.6011 34.9673 64.2319 34.6753 63.7319 34.4448 cv
63.3882 34.2886 62.7544 34.106 61.8306 33.897 cv
60.9067 33.688 60.3354 33.4839 60.1167 33.2847 cv
59.894 33.0854 59.7827 32.8315 59.7827 32.5229 cv
59.7827 32.1675 59.9399 31.8638 60.2544 31.6118 cv
60.5688 31.3599 61.0698 31.2339 61.7573 31.2339 cv
62.4175 31.2339 62.9165 31.3726 63.2544 31.6499 cv
63.5923 31.9272 63.7905 32.3374 63.8491 32.8804 cv
64.939 32.7983 li
64.9194 32.2944 64.7788 31.8433 64.5171 31.4448 cv
64.2554 31.0464 63.8813 30.7446 63.395 30.5396 cv
62.9087 30.3345 62.3472 30.2319 61.7104 30.2319 cv
61.1323 30.2319 60.6069 30.3296 60.1343 30.5249 cv
59.6616 30.7202 59.3022 31.0063 59.0562 31.3833 cv
58.8101 31.7603 58.687 32.1655 58.687 32.5991 cv
58.687 32.9937 58.7876 33.3501 58.9888 33.6685 cv
59.1899 33.9868 59.4956 34.2534 59.9058 34.4683 cv
60.2222 34.6362 60.7749 34.8149 61.564 35.0044 cv
62.353 35.1938 62.8628 35.3335 63.0933 35.4233 cv
63.4526 35.5601 63.7104 35.729 63.8667 35.9302 cv
64.0229 36.1313 64.1011 36.3667 64.1011 36.6362 cv
64.1011 36.9019 64.02 37.147 63.8579 37.3716 cv
63.6958 37.5962 63.4487 37.7729 63.1167 37.9019 cv
62.7847 38.0308 62.4019 38.0952 61.9683 38.0952 cv
61.48 38.0952 61.0405 38.0103 60.6499 37.8403 cv
60.2593 37.6704 59.9712 37.4478 59.7856 37.1724 cv
59.6001 36.897 59.4819 36.5444 59.4312 36.1147 cv
58.3589 36.2085 li
58.3745 36.7827 58.5317 37.2974 58.8306 37.7524 cv
58.8306 37.7524 li
cp
f
79.7861 32.0337 mo
80.3662 31.481 81.0586 31.2046 81.8633 31.2046 cv
82.4297 31.2046 82.9404 31.3481 83.3955 31.6353 cv
83.8506 31.9224 84.1963 32.3267 84.4326 32.8481 cv
84.6689 33.3696 84.7871 33.98 84.7871 34.6792 cv
84.7871 35.7847 84.5107 36.6382 83.958 37.2397 cv
83.4053 37.8413 82.7012 38.1421 81.8457 38.1421 cv
81.0059 38.1421 80.3076 37.8442 79.751 37.2485 cv
79.1943 36.6528 78.916 35.8374 78.916 34.8022 cv
78.916 33.5093 79.2061 32.5864 79.7861 32.0337 cv
79.7861 32.0337 li
cp
78.2363 36.9292 mo
78.5645 37.605 79.0469 38.1382 79.6836 38.5288 cv
80.3203 38.9194 81.043 39.1147 81.8516 39.1147 cv
82.5977 39.1147 83.293 38.938 83.9375 38.5845 cv
84.582 38.231 85.0801 37.7104 85.4316 37.0229 cv
85.7832 36.3354 85.959 35.5562 85.959 34.6851 cv
85.959 33.8257 85.792 33.0571 85.458 32.3794 cv
85.124 31.7017 84.6387 31.1733 84.002 30.7944 cv
83.3652 30.4155 82.6504 30.2261 81.8574 30.2261 cv
80.6465 30.2261 79.6582 30.6294 78.8926 31.436 cv
78.127 32.2427 77.7441 33.3589 77.7441 34.7847 cv
77.7441 35.5386 77.9082 36.2534 78.2363 36.9292 cv
78.2363 36.9292 li
cp
f
74.3101 52.3545 mo
74.4272 52.1631 74.5757 51.9727 74.7554 51.7832 cv
74.9351 51.5938 75.3413 51.2334 75.9741 50.7021 cv
76.7319 50.0615 77.2739 49.5576 77.6001 49.1904 cv
77.9263 48.8232 78.1597 48.4736 78.3003 48.1416 cv
78.4409 47.8096 78.5112 47.4717 78.5112 47.1279 cv
78.5112 46.4521 78.271 45.8857 77.7905 45.4287 cv
77.3101 44.9717 76.6577 44.7432 75.8335 44.7432 cv
75.0171 44.7432 74.3667 44.9551 73.8823 45.3789 cv
73.3979 45.8027 73.1187 46.4189 73.0444 47.2275 cv
74.1284 47.3389 li
74.1323 46.7998 74.2866 46.3779 74.5913 46.0732 cv
74.896 45.7686 75.3022 45.6162 75.8101 45.6162 cv
76.2905 45.6162 76.6802 45.7598 76.979 46.0469 cv
77.2778 46.334 77.4272 46.6865 77.4272 47.1045 cv
77.4272 47.5029 77.2632 47.9258 76.9351 48.373 cv
76.6069 48.8203 75.9761 49.4268 75.0425 50.1924 cv
74.4409 50.6846 73.981 51.1182 73.6626 51.4932 cv
73.3442 51.8682 73.1128 52.249 72.9683 52.6357 cv
72.8784 52.8701 72.8374 53.1143 72.8452 53.3682 cv
78.5229 53.3682 li
78.5229 52.3545 li
74.3101 52.3545 li
74.3101 52.3545 li
cp
69.3999 53.3682 mo
69.3999 45.792 li
72.2417 45.792 li
72.2417 44.7783 li
65.4331 44.7783 li
65.4331 45.792 li
68.2632 45.792 li
68.2632 53.3682 li
69.3999 53.3682 li
69.3999 53.3682 li
cp
f
353.85 61.0122 mo
353.85 53.436 li
356.691 53.436 li
356.691 52.4224 li
349.883 52.4224 li
349.883 53.436 li
352.713 53.436 li
352.713 61.0122 li
353.85 61.0122 li
353.85 61.0122 li
cp
342.608 59.7964 mo
342.907 60.2515 343.319 60.5923 343.845 60.8188 cv
344.37 61.0454 345.021 61.1587 345.799 61.1587 cv
346.412 61.1587 346.964 61.0464 347.454 60.8218 cv
347.944 60.5972 348.32 60.2827 348.582 59.8784 cv
348.844 59.4741 348.975 59.0435 348.975 58.5864 cv
348.975 58.1255 348.855 57.7183 348.617 57.3647 cv
348.379 57.0112 348.01 56.7192 347.51 56.4888 cv
347.166 56.3325 346.532 56.1499 345.608 55.9409 cv
344.685 55.7319 344.113 55.5278 343.895 55.3286 cv
343.672 55.1294 343.561 54.8755 343.561 54.5669 cv
343.561 54.2114 343.718 53.9077 344.032 53.6558 cv
344.347 53.4038 344.848 53.2778 345.535 53.2778 cv
346.195 53.2778 346.694 53.4165 347.032 53.6938 cv
347.37 53.9712 347.568 54.3813 347.627 54.9243 cv
348.717 54.8423 li
348.697 54.3384 348.557 53.8872 348.295 53.4888 cv
348.033 53.0903 347.659 52.7886 347.173 52.5835 cv
346.687 52.3784 346.125 52.2759 345.488 52.2759 cv
344.91 52.2759 344.385 52.3735 343.912 52.5688 cv
343.439 52.7642 343.08 53.0503 342.834 53.4272 cv
342.588 53.8042 342.465 54.2095 342.465 54.6431 cv
342.465 55.0376 342.565 55.394 342.767 55.7124 cv
342.968 56.0308 343.273 56.2974 343.684 56.5122 cv
344 56.6802 344.553 56.8589 345.342 57.0483 cv
346.131 57.2378 346.641 57.3774 346.871 57.4673 cv
347.23 57.604 347.488 57.7729 347.645 57.9741 cv
347.801 58.1753 347.879 58.4106 347.879 58.6802 cv
347.879 58.9458 347.798 59.1909 347.636 59.4155 cv
347.474 59.6401 347.227 59.8169 346.895 59.9458 cv
346.563 60.0747 346.18 60.1392 345.746 60.1392 cv
345.258 60.1392 344.818 60.0542 344.428 59.8843 cv
344.037 59.7144 343.749 59.4917 343.563 59.2163 cv
343.378 58.9409 343.26 58.5884 343.209 58.1587 cv
342.137 58.2524 li
342.152 58.8267 342.31 59.3413 342.608 59.7964 cv
342.608 59.7964 li
cp
340.953 61.0122 mo
340.953 59.9985 li
335.68 59.9985 li
335.68 57.0747 li
340.432 57.0747 li
340.432 56.0669 li
335.68 56.0669 li
335.68 53.436 li
340.754 53.436 li
340.754 52.4224 li
334.543 52.4224 li
334.543 61.0122 li
340.953 61.0122 li
340.953 61.0122 li
cp
331.086 59.6353 mo
330.645 60.0024 330.105 60.186 329.469 60.186 cv
328.945 60.186 328.459 60.0513 328.01 59.7817 cv
327.561 59.5122 327.229 59.105 327.017 58.5601 cv
326.804 58.0151 326.697 57.3774 326.697 56.647 cv
326.697 56.0806 326.787 55.5308 326.967 54.9976 cv
327.146 54.4644 327.458 54.0396 327.901 53.7231 cv
328.345 53.4067 328.896 53.2485 329.557 53.2485 cv
330.131 53.2485 330.607 53.3911 330.986 53.6763 cv
331.365 53.9614 331.654 54.4165 331.854 55.0415 cv
332.973 54.7778 li
332.742 53.9849 332.334 53.3696 331.748 52.9321 cv
331.162 52.4946 330.439 52.2759 329.58 52.2759 cv
328.822 52.2759 328.128 52.4487 327.497 52.7944 cv
326.866 53.1401 326.38 53.646 326.038 54.312 cv
325.696 54.978 325.525 55.7583 325.525 56.6528 cv
325.525 57.4731 325.677 58.2407 325.979 58.9556 cv
326.282 59.6704 326.724 60.2163 327.304 60.5933 cv
327.884 60.9702 328.637 61.1587 329.563 61.1587 cv
330.457 61.1587 331.214 60.9136 331.833 60.4233 cv
332.452 59.9331 332.881 59.2212 333.119 58.2876 cv
331.982 58.0005 li
331.826 58.7231 331.527 59.2681 331.086 59.6353 cv
331.086 59.6353 li
cp
f
243.192 48.9404 mo
244.452 44.1533 li
244.692 45.2139 li
245.683 48.9404 li
246.778 48.9404 li
248.724 42.7178 li
247.698 42.7178 li
246.632 46.3154 li
246.274 47.5166 li
245.964 46.3271 li
245.032 42.7178 li
243.948 42.7178 li
242.958 46.3623 li
242.759 47.1514 242.651 47.5791 242.636 47.6455 cv
242.267 46.3096 li
241.276 42.7178 li
240.187 42.7178 li
242.091 48.9404 li
243.192 48.9404 li
243.192 48.9404 li
cp
235.481 44.042 mo
235.829 43.6475 236.267 43.4502 236.794 43.4502 cv
237.313 43.4502 237.748 43.6484 238.098 44.0449 cv
238.447 44.4414 238.622 45.0244 238.622 45.7939 cv
238.622 46.6104 238.448 47.2178 238.101 47.6162 cv
237.753 48.0146 237.317 48.2139 236.794 48.2139 cv
236.267 48.2139 235.829 48.0156 235.481 47.6191 cv
235.134 47.2227 234.96 46.626 234.96 45.8291 cv
234.96 45.0322 235.134 44.4365 235.481 44.042 cv
235.481 44.042 li
cp
234.682 48.2432 mo
235.219 48.8018 235.923 49.0811 236.794 49.0811 cv
237.337 49.0811 237.838 48.9541 238.297 48.7002 cv
238.756 48.4463 239.105 48.0898 239.346 47.6309 cv
239.586 47.1719 239.706 46.542 239.706 45.7412 cv
239.706 44.7529 239.435 43.9785 238.892 43.418 cv
238.349 42.8574 237.649 42.5771 236.794 42.5771 cv
236.024 42.5771 235.372 42.8076 234.837 43.2686 cv
234.196 43.8232 233.876 44.6768 233.876 45.8291 cv
233.876 46.8799 234.145 47.6846 234.682 48.2432 cv
234.682 48.2432 li
cp
232.634 48.9404 mo
232.634 40.3506 li
231.579 40.3506 li
231.579 48.9404 li
232.634 48.9404 li
232.634 48.9404 li
cp
223.818 47.7246 mo
224.117 48.1797 224.529 48.5205 225.055 48.7471 cv
225.58 48.9736 226.231 49.0869 227.009 49.0869 cv
227.622 49.0869 228.174 48.9746 228.664 48.75 cv
229.154 48.5254 229.53 48.2109 229.792 47.8066 cv
230.054 47.4023 230.185 46.9717 230.185 46.5146 cv
230.185 46.0537 230.065 45.6465 229.827 45.293 cv
229.589 44.9395 229.22 44.6475 228.72 44.417 cv
228.376 44.2607 227.742 44.0781 226.818 43.8691 cv
225.895 43.6602 225.323 43.4561 225.104 43.2568 cv
224.882 43.0576 224.771 42.8037 224.771 42.4951 cv
224.771 42.1396 224.928 41.8359 225.242 41.584 cv
225.557 41.332 226.058 41.2061 226.745 41.2061 cv
227.405 41.2061 227.904 41.3447 228.242 41.6221 cv
228.58 41.8994 228.778 42.3096 228.837 42.8525 cv
229.927 42.7705 li
229.907 42.2666 229.767 41.8154 229.505 41.417 cv
229.243 41.0186 228.869 40.7168 228.383 40.5117 cv
227.896 40.3066 227.335 40.2041 226.698 40.2041 cv
226.12 40.2041 225.595 40.3018 225.122 40.4971 cv
224.649 40.6924 224.29 40.9785 224.044 41.3555 cv
223.798 41.7324 223.675 42.1377 223.675 42.5713 cv
223.675 42.9658 223.775 43.3223 223.977 43.6406 cv
224.178 43.959 224.483 44.2256 224.894 44.4404 cv
225.21 44.6084 225.763 44.7871 226.552 44.9766 cv
227.341 45.166 227.851 45.3057 228.081 45.3955 cv
228.44 45.5322 228.698 45.7012 228.854 45.9023 cv
229.011 46.1035 229.089 46.3389 229.089 46.6084 cv
229.089 46.874 229.008 47.1191 228.846 47.3438 cv
228.684 47.5684 228.437 47.7451 228.104 47.874 cv
227.772 48.0029 227.39 48.0674 226.956 48.0674 cv
226.468 48.0674 226.028 47.9824 225.638 47.8125 cv
225.247 47.6426 224.959 47.4199 224.773 47.1445 cv
224.588 46.8691 224.47 46.5166 224.419 46.0869 cv
223.347 46.1807 li
223.362 46.7549 223.52 47.2695 223.818 47.7246 cv
223.818 47.7246 li
cp
f
263.732 40.3154 mo
263.053 40.3154 li
262.869 40.6865 262.557 41.0693 262.115 41.4639 cv
261.674 41.8584 261.158 42.1943 260.568 42.4717 cv
260.568 43.4912 li
260.896 43.3701 261.268 43.1885 261.68 42.9463 cv
262.092 42.7041 262.424 42.4619 262.678 42.2197 cv
262.678 48.9404 li
263.732 48.9404 li
263.732 40.3154 li
263.732 40.3154 li
cp
256.18 48.9404 mo
256.18 41.3643 li
259.021 41.3643 li
259.021 40.3506 li
252.213 40.3506 li
252.213 41.3643 li
255.043 41.3643 li
255.043 48.9404 li
256.18 48.9404 li
256.18 48.9404 li
cp
f
265.351 158.785 mo
265.194 158.785 265.074 158.76 264.99 158.709 cv
264.906 158.658 264.846 158.59 264.809 158.504 cv
264.771 158.418 264.753 158.225 264.753 157.924 cv
264.753 154.285 li
265.813 154.285 li
265.813 153.465 li
264.753 153.465 li
264.753 151.291 li
263.704 151.924 li
263.704 153.465 li
262.931 153.465 li
262.931 154.285 li
263.704 154.285 li
263.704 157.865 li
263.704 158.498 263.747 158.914 263.833 159.111 cv
263.919 159.309 264.067 159.467 264.278 159.588 cv
264.489 159.709 264.786 159.77 265.169 159.77 cv
265.403 159.77 265.669 159.738 265.966 159.676 cv
265.813 158.744 li
265.622 158.771 265.468 158.785 265.351 158.785 cv
265.351 158.785 li
265.351 158.785 li
cp
257.9 159.324 mo
258.324 159.66 258.94 159.828 259.749 159.828 cv
260.237 159.828 260.675 159.744 261.062 159.574 cv
261.448 159.404 261.744 159.164 261.949 158.854 cv
262.154 158.543 262.257 158.211 262.257 157.859 cv
262.257 157.5 262.173 157.199 262.005 156.957 cv
261.837 156.715 261.605 156.531 261.311 156.404 cv
261.016 156.277 260.495 156.113 259.749 155.914 cv
259.233 155.773 258.923 155.684 258.817 155.645 cv
258.634 155.57 258.499 155.477 258.413 155.363 cv
258.327 155.254 258.284 155.131 258.284 154.994 cv
258.284 154.779 258.388 154.592 258.595 154.432 cv
258.802 154.271 259.147 154.191 259.632 154.191 cv
260.042 154.191 260.359 154.281 260.584 154.461 cv
260.809 154.641 260.944 154.891 260.991 155.211 cv
262.022 155.07 li
261.956 154.668 261.835 154.348 261.659 154.107 cv
261.483 153.867 261.211 153.676 260.842 153.535 cv
260.473 153.395 260.044 153.324 259.556 153.324 cv
259.231 153.324 258.928 153.367 258.645 153.451 cv
258.361 153.535 258.138 153.637 257.974 153.758 cv
257.755 153.914 257.582 154.111 257.455 154.348 cv
257.328 154.584 257.265 154.84 257.265 155.117 cv
257.265 155.422 257.342 155.701 257.496 155.953 cv
257.65 156.205 257.877 156.402 258.176 156.545 cv
258.475 156.688 259.011 156.855 259.784 157.051 cv
260.358 157.195 260.718 157.314 260.862 157.408 cv
261.069 157.545 261.173 157.732 261.173 157.971 cv
261.173 158.236 261.056 158.469 260.821 158.666 cv
260.587 158.863 260.228 158.961 259.743 158.961 cv
259.263 158.961 258.889 158.85 258.621 158.627 cv
258.354 158.404 258.19 158.084 258.132 157.666 cv
257.089 157.83 li
257.206 158.49 257.477 158.988 257.9 159.324 cv
257.9 159.324 li
cp
254.81 156.951 mo
254.81 157.416 254.753 157.768 254.64 158.006 cv
254.491 158.314 254.259 158.559 253.942 158.736 cv
253.626 158.914 253.265 159.002 252.858 159.002 cv
252.448 159.002 252.137 158.908 251.924 158.721 cv
251.711 158.533 251.604 158.299 251.604 158.018 cv
251.604 157.834 251.653 157.668 251.751 157.518 cv
251.849 157.367 251.987 157.252 252.167 157.174 cv
252.347 157.096 252.653 157.025 253.087 156.963 cv
253.853 156.854 254.427 156.721 254.81 156.564 cv
254.81 156.951 li
254.81 156.951 li
cp
255.108 159.688 mo
256.21 159.688 li
256.077 159.449 255.988 159.201 255.943 158.941 cv
255.898 158.682 255.876 158.061 255.876 157.08 cv
255.876 155.674 li
255.876 155.205 255.858 154.881 255.823 154.701 cv
255.761 154.412 255.651 154.174 255.495 153.984 cv
255.339 153.795 255.095 153.637 254.763 153.512 cv
254.431 153.387 253.999 153.324 253.468 153.324 cv
252.933 153.324 252.462 153.398 252.056 153.545 cv
251.649 153.691 251.339 153.9 251.124 154.172 cv
250.909 154.443 250.755 154.799 250.661 155.24 cv
251.692 155.381 li
251.806 154.939 251.98 154.633 252.217 154.459 cv
252.453 154.285 252.819 154.197 253.315 154.197 cv
253.847 154.197 254.247 154.316 254.517 154.555 cv
254.716 154.73 254.815 155.033 254.815 155.463 cv
254.815 155.502 254.813 155.594 254.81 155.738 cv
254.407 155.879 253.78 156 252.929 156.102 cv
252.511 156.152 252.198 156.205 251.991 156.26 cv
251.71 156.338 251.457 156.453 251.232 156.605 cv
251.008 156.758 250.826 156.961 250.688 157.213 cv
250.549 157.465 250.479 157.742 250.479 158.047 cv
250.479 158.566 250.663 158.994 251.03 159.328 cv
251.397 159.662 251.923 159.828 252.606 159.828 cv
253.021 159.828 253.408 159.76 253.77 159.623 cv
254.131 159.486 254.507 159.252 254.897 158.92 cv
254.929 159.213 254.999 159.469 255.108 159.688 cv
255.108 159.688 li
255.108 159.688 li
cp
244.837 159.688 mo
244.837 155.785 li
248.868 155.785 li
248.868 154.771 li
244.837 154.771 li
244.837 152.111 li
249.495 152.111 li
249.495 151.098 li
243.7 151.098 li
243.7 159.688 li
244.837 159.688 li
244.837 159.688 li
cp
f
273.422 159.688 mo
273.422 152.111 li
276.264 152.111 li
276.264 151.098 li
269.455 151.098 li
269.455 152.111 li
272.285 152.111 li
272.285 159.688 li
273.422 159.688 li
273.422 159.688 li
cp
f
280.979 151.063 mo
280.299 151.063 li
280.115 151.434 279.803 151.816 279.361 152.211 cv
278.92 152.605 278.404 152.941 277.814 153.219 cv
277.814 154.238 li
278.143 154.117 278.513 153.936 278.925 153.693 cv
279.337 153.451 279.67 153.209 279.924 152.967 cv
279.924 159.688 li
280.979 159.688 li
280.979 151.063 li
280.979 151.063 li
cp
f
37.2109 10.9253 mo
37.4521 10.5835 37.7744 10.4126 38.1777 10.4126 cv
38.5879 10.4126 38.9307 10.6064 39.2056 10.9937 cv
39.4805 11.3809 39.6182 12.1641 39.6182 13.3423 cv
39.6182 14.5142 39.4805 15.2954 39.2056 15.686 cv
38.9307 16.0767 38.5913 16.272 38.1875 16.272 cv
37.7842 16.272 37.4443 16.0776 37.1694 15.6885 cv
36.8945 15.2998 36.7568 14.5176 36.7568 13.3423 cv
36.7568 12.167 36.9082 11.3613 37.2109 10.9253 cv
37.2109 10.9253 li
37.2109 10.9253 li
cp
36.5615 16.2524 mo
36.9556 16.7471 37.4976 16.9946 38.1875 16.9946 cv
38.7119 16.9946 39.1455 16.854 39.4888 16.5723 cv
39.832 16.291 40.0903 15.8921 40.2627 15.376 cv
40.4355 14.8604 40.5215 14.1821 40.5215 13.3423 cv
40.5215 12.6328 40.4678 12.0688 40.3604 11.6504 cv
40.2529 11.2324 40.105 10.8774 39.916 10.5859 cv
39.7275 10.2949 39.4883 10.0718 39.1982 9.91699 cv
38.9087 9.7627 38.5718 9.68506 38.1875 9.68506 cv
37.667 9.68506 37.2344 9.8252 36.8911 10.105 cv
36.5479 10.3848 36.2891 10.7832 36.1147 11.2988 cv
35.9404 11.8149 35.8535 12.4961 35.8535 13.3423 cv
35.8535 14.6865 36.0898 15.6567 36.5615 16.2524 cv
36.5615 16.2524 li
36.5615 16.2524 li
cp
33.6025 9.68506 mo
33.0361 9.68506 li
32.8833 9.99414 32.623 10.3135 32.2549 10.6421 cv
31.8872 10.9707 31.4575 11.251 30.9658 11.4819 cv
30.9658 12.3315 li
31.2393 12.2305 31.5479 12.0791 31.8911 11.8774 cv
32.2344 11.6758 32.5122 11.4736 32.7236 11.272 cv
32.7236 16.8726 li
33.6025 16.8726 li
33.6025 9.68506 li
33.6025 9.68506 li
cp
f
39.1626 94.8057 mo
38.5962 94.8057 li
38.4434 95.1147 38.1826 95.4336 37.8149 95.7627 cv
37.4473 96.0913 37.0176 96.3711 36.5259 96.6025 cv
36.5259 97.4521 li
36.7993 97.3511 37.1074 97.1997 37.4512 96.998 cv
37.7944 96.7959 38.0723 96.5942 38.2837 96.3926 cv
38.2837 101.993 li
39.1626 101.993 li
39.1626 94.8057 li
39.1626 94.8057 li
cp
f
34.5674 186.463 mo
34.5674 185.462 li
33.5664 185.462 li
33.5664 186.463 li
34.5674 186.463 li
34.5674 186.463 li
cp
28.8691 180.516 mo
29.1104 180.174 29.4326 180.003 29.8359 180.003 cv
30.2461 180.003 30.5889 180.197 30.8643 180.584 cv
31.1392 180.972 31.2764 181.754 31.2764 182.933 cv
31.2764 184.104 31.1392 184.886 30.8643 185.276 cv
30.5889 185.667 30.2495 185.862 29.8457 185.862 cv
29.4424 185.862 29.103 185.668 28.8281 185.279 cv
28.5527 184.89 28.415 184.107 28.415 182.933 cv
28.415 181.758 28.5664 180.952 28.8691 180.516 cv
28.8691 180.516 li
28.8691 180.516 li
cp
28.2197 185.843 mo
28.6138 186.338 29.1558 186.585 29.8457 186.585 cv
30.3701 186.585 30.8037 186.444 31.1475 186.163 cv
31.4907 185.881 31.7485 185.482 31.9209 184.967 cv
32.0938 184.45 32.1797 183.772 32.1797 182.933 cv
32.1797 182.223 32.126 181.659 32.0186 181.241 cv
31.9111 180.822 31.7632 180.468 31.5742 180.177 cv
31.3857 179.885 31.1465 179.662 30.8564 179.508 cv
30.5669 179.353 30.23 179.275 29.8457 179.275 cv
29.3252 179.275 28.8931 179.416 28.5498 179.695 cv
28.2061 179.976 27.9473 180.373 27.7734 180.89 cv
27.5991 181.405 27.5117 182.086 27.5117 182.933 cv
27.5117 184.277 27.748 185.247 28.2197 185.843 cv
28.2197 185.843 li
28.2197 185.843 li
cp
f
39.1626 179.275 mo
38.5962 179.275 li
38.4434 179.585 38.1826 179.904 37.8149 180.232 cv
37.4473 180.562 37.0176 180.842 36.5259 181.072 cv
36.5259 181.922 li
36.7993 181.821 37.1074 181.67 37.4512 181.468 cv
37.7944 181.266 38.0723 181.064 38.2837 180.862 cv
38.2837 186.463 li
39.1626 186.463 li
39.1626 179.275 li
39.1626 179.275 li
cp
f
39.1641 264.886 mo
38.5977 264.886 li
38.4443 265.195 38.1841 265.514 37.8164 265.843 cv
37.4482 266.172 37.0186 266.451 36.5273 266.683 cv
36.5273 267.532 li
36.8008 267.432 37.1089 267.279 37.4526 267.078 cv
37.7959 266.876 38.0732 266.674 38.2852 266.473 cv
38.2852 272.073 li
39.1641 272.073 li
39.1641 264.886 li
39.1641 264.886 li
cp
31.6494 266.126 mo
31.8901 265.784 32.2124 265.613 32.6162 265.613 cv
33.0264 265.613 33.3687 265.807 33.644 266.194 cv
33.9189 266.582 34.0566 267.364 34.0566 268.543 cv
34.0566 269.715 33.9189 270.496 33.644 270.887 cv
33.3687 271.277 33.0293 271.473 32.626 271.473 cv
32.2222 271.473 31.8828 271.278 31.6079 270.889 cv
31.3325 270.5 31.1953 269.718 31.1953 268.543 cv
31.1953 267.367 31.3467 266.563 31.6494 266.126 cv
31.6494 266.126 li
31.6494 266.126 li
cp
31 271.453 mo
31.3936 271.947 31.9355 272.195 32.626 272.195 cv
33.1499 272.195 33.5835 272.055 33.9272 271.772 cv
34.2705 271.491 34.5283 271.093 34.7012 270.576 cv
34.8735 270.061 34.96 269.383 34.96 268.543 cv
34.96 267.833 34.9063 267.27 34.7988 266.851 cv
34.6914 266.433 34.543 266.078 34.3545 265.786 cv
34.1655 265.495 33.9263 265.272 33.6367 265.117 cv
33.3467 264.963 33.0098 264.886 32.626 264.886 cv
32.105 264.886 31.6729 265.025 31.3296 265.306 cv
30.9858 265.586 30.7271 265.983 30.5532 266.499 cv
30.3789 267.016 30.292 267.696 30.292 268.543 cv
30.292 269.887 30.5278 270.857 31 271.453 cv
31 271.453 li
31 271.453 li
cp
29.0078 272.073 mo
29.0078 271.072 li
28.0068 271.072 li
28.0068 272.073 li
29.0078 272.073 li
29.0078 272.073 li
cp
23.3096 266.126 mo
23.5503 265.784 23.8726 265.613 24.2764 265.613 cv
24.6865 265.613 25.0288 265.807 25.3042 266.194 cv
25.5791 266.582 25.7168 267.364 25.7168 268.543 cv
25.7168 269.715 25.5791 270.496 25.3042 270.887 cv
25.0288 271.277 24.6895 271.473 24.2861 271.473 cv
23.8823 271.473 23.543 271.278 23.2681 270.889 cv
22.9927 270.5 22.8555 269.718 22.8555 268.543 cv
22.8555 267.367 23.0068 266.563 23.3096 266.126 cv
23.3096 266.126 li
23.3096 266.126 li
cp
22.6602 271.453 mo
23.0537 271.947 23.5957 272.195 24.2861 272.195 cv
24.8101 272.195 25.2437 272.055 25.5874 271.772 cv
25.9307 271.491 26.1885 271.093 26.3613 270.576 cv
26.5337 270.061 26.6201 269.383 26.6201 268.543 cv
26.6201 267.833 26.5664 267.27 26.459 266.851 cv
26.3516 266.433 26.2031 266.078 26.0146 265.786 cv
25.8257 265.495 25.5864 265.272 25.2969 265.117 cv
25.0068 264.963 24.6699 264.886 24.2861 264.886 cv
23.7651 264.886 23.333 265.025 22.9897 265.306 cv
22.646 265.586 22.3872 265.983 22.2134 266.499 cv
22.0391 267.016 21.9521 267.696 21.9521 268.543 cv
21.9521 269.887 22.188 270.857 22.6602 271.453 cv
22.6602 271.453 li
22.6602 271.453 li
cp
f
245.07 292.92 mo
245.475 291.936 245.677 290.916 245.677 289.861 cv
245.677 288.932 245.526 288.041 245.226 287.189 cv
244.874 286.201 244.331 285.217 243.597 284.236 cv
242.841 284.236 li
243.317 285.057 243.632 285.643 243.784 285.994 cv
244.022 286.533 244.208 287.096 244.341 287.682 cv
244.509 288.404 244.593 289.133 244.593 289.867 cv
244.593 291.746 244.009 293.623 242.841 295.498 cv
243.597 295.498 li
244.175 294.764 244.666 293.904 245.07 292.92 cv
245.07 292.92 li
cp
234.104 292.973 mo
234.104 285.66 li
236.589 292.973 li
237.614 292.973 li
240.11 285.783 li
240.11 292.973 li
241.206 292.973 li
241.206 284.383 li
239.677 284.383 li
237.62 290.359 li
237.413 290.965 237.261 291.424 237.163 291.736 cv
237.077 291.455 236.94 291.031 236.753 290.465 cv
234.72 284.383 li
233.009 284.383 li
233.009 292.973 li
234.104 292.973 li
234.104 292.973 li
cp
231.685 295.498 mo
230.517 293.623 229.933 291.746 229.933 289.867 cv
229.933 289.129 230.017 288.395 230.185 287.664 cv
230.321 287.078 230.509 286.516 230.747 285.977 cv
230.899 285.629 231.212 285.049 231.685 284.236 cv
230.929 284.236 li
230.194 285.217 229.651 286.201 229.3 287.189 cv
228.999 288.041 228.849 288.932 228.849 289.861 cv
228.849 290.916 229.05 291.936 229.452 292.92 cv
229.854 293.904 230.347 294.764 230.929 295.498 cv
231.685 295.498 li
231.685 295.498 li
cp
219.96 292.973 mo
219.96 289.574 li
219.96 288.777 220.123 288.236 220.449 287.951 cv
220.775 287.666 221.163 287.523 221.612 287.523 cv
221.894 287.523 222.139 287.587 222.348 287.714 cv
222.557 287.841 222.702 288.011 222.784 288.224 cv
222.866 288.437 222.907 288.758 222.907 289.188 cv
222.907 292.973 li
223.962 292.973 li
223.962 289.146 li
223.962 288.658 223.942 288.316 223.903 288.121 cv
223.841 287.82 223.731 287.561 223.575 287.342 cv
223.419 287.123 223.184 286.946 222.869 286.812 cv
222.555 286.677 222.21 286.609 221.835 286.609 cv
220.972 286.609 220.312 286.951 219.854 287.635 cv
219.854 286.75 li
218.905 286.75 li
218.905 292.973 li
219.96 292.973 li
219.96 292.973 li
cp
213.444 288.074 mo
213.792 287.68 214.229 287.482 214.757 287.482 cv
215.276 287.482 215.711 287.681 216.061 288.077 cv
216.41 288.474 216.585 289.057 216.585 289.826 cv
216.585 290.643 216.411 291.25 216.063 291.648 cv
215.716 292.047 215.28 292.246 214.757 292.246 cv
214.229 292.246 213.792 292.048 213.444 291.651 cv
213.097 291.255 212.923 290.658 212.923 289.861 cv
212.923 289.064 213.097 288.469 213.444 288.074 cv
213.444 288.074 li
cp
212.645 292.275 mo
213.182 292.834 213.886 293.113 214.757 293.113 cv
215.3 293.113 215.801 292.986 216.26 292.732 cv
216.719 292.479 217.068 292.122 217.309 291.663 cv
217.549 291.204 217.669 290.574 217.669 289.773 cv
217.669 288.785 217.397 288.011 216.854 287.45 cv
216.312 286.89 215.612 286.609 214.757 286.609 cv
213.987 286.609 213.335 286.84 212.8 287.301 cv
212.159 287.855 211.839 288.709 211.839 289.861 cv
211.839 290.912 212.107 291.717 212.645 292.275 cv
212.645 292.275 li
cp
210.626 292.973 mo
210.626 286.75 li
209.571 286.75 li
209.571 292.973 li
210.626 292.973 li
210.626 292.973 li
cp
210.626 285.596 mo
210.626 284.383 li
209.571 284.383 li
209.571 285.596 li
210.626 285.596 li
210.626 285.596 li
cp
208.071 292.07 mo
207.915 292.07 207.795 292.045 207.711 291.994 cv
207.627 291.943 207.566 291.875 207.529 291.789 cv
207.492 291.703 207.474 291.51 207.474 291.209 cv
207.474 287.57 li
208.534 287.57 li
208.534 286.75 li
207.474 286.75 li
207.474 284.576 li
206.425 285.209 li
206.425 286.75 li
205.651 286.75 li
205.651 287.57 li
206.425 287.57 li
206.425 291.15 li
206.425 291.783 206.468 292.198 206.554 292.396 cv
206.64 292.593 206.788 292.752 206.999 292.873 cv
207.21 292.994 207.507 293.055 207.89 293.055 cv
208.124 293.055 208.39 293.023 208.687 292.961 cv
208.534 292.029 li
208.343 292.057 208.188 292.07 208.071 292.07 cv
208.071 292.07 li
208.071 292.07 li
cp
203.53 290.236 mo
203.53 290.701 203.474 291.053 203.36 291.291 cv
203.212 291.6 202.979 291.843 202.663 292.021 cv
202.347 292.198 201.985 292.287 201.579 292.287 cv
201.169 292.287 200.857 292.193 200.645 292.006 cv
200.432 291.818 200.325 291.584 200.325 291.303 cv
200.325 291.119 200.374 290.952 200.472 290.802 cv
200.569 290.651 200.708 290.537 200.888 290.459 cv
201.067 290.381 201.374 290.311 201.808 290.248 cv
202.573 290.139 203.147 290.006 203.53 289.85 cv
203.53 290.236 li
203.53 290.236 li
cp
203.829 292.973 mo
204.931 292.973 li
204.798 292.734 204.709 292.485 204.664 292.226 cv
204.619 291.966 204.597 291.346 204.597 290.365 cv
204.597 288.959 li
204.597 288.49 204.579 288.166 204.544 287.986 cv
204.481 287.697 204.372 287.458 204.216 287.269 cv
204.06 287.079 203.815 286.922 203.483 286.797 cv
203.151 286.672 202.72 286.609 202.188 286.609 cv
201.653 286.609 201.183 286.683 200.776 286.829 cv
200.37 286.976 200.06 287.185 199.845 287.456 cv
199.63 287.728 199.476 288.084 199.382 288.525 cv
200.413 288.666 li
200.526 288.225 200.701 287.917 200.938 287.743 cv
201.174 287.569 201.54 287.482 202.036 287.482 cv
202.567 287.482 202.968 287.602 203.237 287.84 cv
203.437 288.016 203.536 288.318 203.536 288.748 cv
203.536 288.787 203.534 288.879 203.53 289.023 cv
203.128 289.164 202.501 289.285 201.649 289.387 cv
201.231 289.438 200.919 289.49 200.712 289.545 cv
200.431 289.623 200.178 289.738 199.953 289.891 cv
199.729 290.043 199.547 290.245 199.408 290.497 cv
199.27 290.749 199.2 291.027 199.2 291.332 cv
199.2 291.852 199.384 292.278 199.751 292.612 cv
200.118 292.946 200.644 293.113 201.327 293.113 cv
201.741 293.113 202.129 293.045 202.49 292.908 cv
202.852 292.771 203.228 292.537 203.618 292.205 cv
203.649 292.498 203.72 292.754 203.829 292.973 cv
203.829 292.973 li
203.829 292.973 li
cp
196.604 292.973 mo
196.604 289.715 li
196.604 289.27 196.663 288.859 196.78 288.484 cv
196.858 288.238 196.989 288.046 197.173 287.907 cv
197.356 287.769 197.563 287.699 197.794 287.699 cv
198.052 287.699 198.31 287.775 198.567 287.928 cv
198.931 286.949 li
198.563 286.723 198.202 286.609 197.847 286.609 cv
197.601 286.609 197.375 286.68 197.17 286.82 cv
196.965 286.961 196.741 287.252 196.499 287.693 cv
196.499 286.75 li
195.55 286.75 li
195.55 292.973 li
196.604 292.973 li
196.604 292.973 li
cp
194.067 292.07 mo
193.911 292.07 193.791 292.045 193.707 291.994 cv
193.623 291.943 193.563 291.875 193.525 291.789 cv
193.488 291.703 193.47 291.51 193.47 291.209 cv
193.47 287.57 li
194.53 287.57 li
194.53 286.75 li
193.47 286.75 li
193.47 284.576 li
192.421 285.209 li
192.421 286.75 li
191.647 286.75 li
191.647 287.57 li
192.421 287.57 li
192.421 291.15 li
192.421 291.783 192.464 292.198 192.55 292.396 cv
192.636 292.593 192.784 292.752 192.995 292.873 cv
193.206 292.994 193.503 293.055 193.886 293.055 cv
194.12 293.055 194.386 293.023 194.683 292.961 cv
194.53 292.029 li
194.339 292.057 194.185 292.07 194.067 292.07 cv
194.067 292.07 li
194.067 292.07 li
cp
186.608 292.973 mo
186.608 289.574 li
186.608 288.777 186.771 288.236 187.098 287.951 cv
187.424 287.666 187.812 287.523 188.261 287.523 cv
188.542 287.523 188.787 287.587 188.996 287.714 cv
189.205 287.841 189.351 288.011 189.433 288.224 cv
189.515 288.437 189.556 288.758 189.556 289.188 cv
189.556 292.973 li
190.61 292.973 li
190.61 289.146 li
190.61 288.658 190.591 288.316 190.552 288.121 cv
190.489 287.82 190.38 287.561 190.224 287.342 cv
190.067 287.123 189.832 286.946 189.518 286.812 cv
189.203 286.677 188.858 286.609 188.483 286.609 cv
187.62 286.609 186.96 286.951 186.503 287.635 cv
186.503 286.75 li
185.554 286.75 li
185.554 292.973 li
186.608 292.973 li
186.608 292.973 li
cp
180.225 287.963 mo
180.555 287.639 180.962 287.477 181.446 287.477 cv
181.981 287.477 182.417 287.68 182.753 288.086 cv
182.972 288.348 183.104 288.74 183.151 289.264 cv
179.677 289.264 li
179.712 288.721 179.895 288.287 180.225 287.963 cv
180.225 287.963 li
cp
182.489 291.941 mo
182.216 292.145 181.886 292.246 181.499 292.246 cv
180.979 292.246 180.546 292.064 180.198 291.701 cv
179.851 291.338 179.657 290.814 179.618 290.131 cv
184.259 290.131 li
184.263 290.006 184.265 289.912 184.265 289.85 cv
184.265 288.822 184.001 288.025 183.474 287.459 cv
182.946 286.893 182.267 286.609 181.435 286.609 cv
180.575 286.609 179.876 286.898 179.337 287.477 cv
178.798 288.055 178.528 288.867 178.528 289.914 cv
178.528 290.926 178.795 291.712 179.328 292.272 cv
179.861 292.833 180.583 293.113 181.493 293.113 cv
182.216 293.113 182.81 292.938 183.274 292.586 cv
183.739 292.234 184.058 291.74 184.229 291.104 cv
183.14 290.969 li
182.979 291.414 182.763 291.738 182.489 291.941 cv
182.489 291.941 li
cp
176.413 291.865 mo
176.136 292.119 175.79 292.246 175.376 292.246 cv
174.86 292.246 174.442 292.057 174.122 291.678 cv
173.802 291.299 173.642 290.691 173.642 289.855 cv
173.642 289.031 173.808 288.429 174.14 288.048 cv
174.472 287.667 174.903 287.477 175.435 287.477 cv
175.786 287.477 176.086 287.582 176.334 287.793 cv
176.582 288.004 176.755 288.318 176.853 288.736 cv
177.878 288.578 li
177.757 287.949 177.481 287.464 177.052 287.122 cv
176.622 286.78 176.069 286.609 175.394 286.609 cv
174.858 286.609 174.363 286.735 173.908 286.987 cv
173.453 287.239 173.114 287.617 172.892 288.121 cv
172.669 288.625 172.558 289.213 172.558 289.885 cv
172.558 290.924 172.816 291.722 173.334 292.278 cv
173.852 292.835 174.536 293.113 175.388 293.113 cv
176.067 293.113 176.641 292.911 177.107 292.507 cv
177.574 292.103 177.864 291.543 177.978 290.828 cv
176.94 290.693 li
176.866 291.221 176.69 291.611 176.413 291.865 cv
176.413 291.865 li
cp
167.261 292.973 mo
167.261 289.574 li
167.261 288.777 167.424 288.236 167.75 287.951 cv
168.076 287.666 168.464 287.523 168.913 287.523 cv
169.194 287.523 169.439 287.587 169.648 287.714 cv
169.857 287.841 170.003 288.011 170.085 288.224 cv
170.167 288.437 170.208 288.758 170.208 289.188 cv
170.208 292.973 li
171.263 292.973 li
171.263 289.146 li
171.263 288.658 171.243 288.316 171.204 288.121 cv
171.142 287.82 171.032 287.561 170.876 287.342 cv
170.72 287.123 170.484 286.946 170.17 286.812 cv
169.855 286.677 169.511 286.609 169.136 286.609 cv
168.272 286.609 167.612 286.951 167.155 287.635 cv
167.155 286.75 li
166.206 286.75 li
166.206 292.973 li
167.261 292.973 li
167.261 292.973 li
cp
160.745 288.074 mo
161.093 287.68 161.53 287.482 162.058 287.482 cv
162.577 287.482 163.012 287.681 163.361 288.077 cv
163.711 288.474 163.886 289.057 163.886 289.826 cv
163.886 290.643 163.712 291.25 163.364 291.648 cv
163.017 292.047 162.581 292.246 162.058 292.246 cv
161.53 292.246 161.093 292.048 160.745 291.651 cv
160.397 291.255 160.224 290.658 160.224 289.861 cv
160.224 289.064 160.397 288.469 160.745 288.074 cv
160.745 288.074 li
cp
159.945 292.275 mo
160.482 292.834 161.187 293.113 162.058 293.113 cv
162.601 293.113 163.102 292.986 163.561 292.732 cv
164.02 292.479 164.369 292.122 164.609 291.663 cv
164.85 291.204 164.97 290.574 164.97 289.773 cv
164.97 288.785 164.698 288.011 164.155 287.45 cv
163.612 286.89 162.913 286.609 162.058 286.609 cv
161.288 286.609 160.636 286.84 160.101 287.301 cv
159.46 287.855 159.14 288.709 159.14 289.861 cv
159.14 290.912 159.408 291.717 159.945 292.275 cv
159.945 292.275 li
cp
156.233 291.596 mo
155.792 291.963 155.253 292.146 154.616 292.146 cv
154.093 292.146 153.606 292.012 153.157 291.742 cv
152.708 291.473 152.377 291.065 152.164 290.521 cv
151.951 289.976 151.845 289.338 151.845 288.607 cv
151.845 288.041 151.935 287.491 152.114 286.958 cv
152.294 286.425 152.605 286 153.049 285.684 cv
153.492 285.367 154.044 285.209 154.704 285.209 cv
155.278 285.209 155.755 285.352 156.134 285.637 cv
156.513 285.922 156.802 286.377 157.001 287.002 cv
158.12 286.738 li
157.89 285.945 157.481 285.33 156.896 284.893 cv
156.31 284.455 155.587 284.236 154.728 284.236 cv
153.97 284.236 153.275 284.409 152.645 284.755 cv
152.014 285.101 151.527 285.606 151.186 286.272 cv
150.844 286.938 150.673 287.719 150.673 288.613 cv
150.673 289.434 150.824 290.201 151.127 290.916 cv
151.43 291.631 151.871 292.177 152.451 292.554 cv
153.031 292.931 153.784 293.119 154.71 293.119 cv
155.604 293.119 156.361 292.874 156.98 292.384 cv
157.6 291.894 158.028 291.182 158.267 290.248 cv
157.13 289.961 li
156.974 290.684 156.675 291.229 156.233 291.596 cv
156.233 291.596 li
cp
f
8.47461 195.938 mo
8.15039 195.607 7.98828 195.2 7.98828 194.716 cv
7.98828 194.181 8.19141 193.745 8.59766 193.409 cv
8.85938 193.19 9.25195 193.058 9.77539 193.011 cv
9.77539 196.485 li
9.23242 196.45 8.79883 196.268 8.47461 195.938 cv
8.47461 195.938 li
cp
12.4531 193.673 mo
12.6563 193.946 12.7578 194.276 12.7578 194.663 cv
12.7578 195.183 12.5762 195.616 12.2129 195.964 cv
11.8496 196.312 11.3262 196.505 10.6426 196.544 cv
10.6426 191.903 li
10.5176 191.899 10.4238 191.897 10.3613 191.897 cv
9.33398 191.897 8.53711 192.161 7.9707 192.688 cv
7.4043 193.216 7.12109 193.896 7.12109 194.728 cv
7.12109 195.587 7.41016 196.286 7.98828 196.825 cv
8.56641 197.364 9.37891 197.634 10.4258 197.634 cv
11.4375 197.634 12.2236 197.367 12.7842 196.834 cv
13.3447 196.301 13.625 195.579 13.625 194.669 cv
13.625 193.946 13.4492 193.353 13.0977 192.888 cv
12.7461 192.423 12.252 192.104 11.6152 191.933 cv
11.4805 193.022 li
11.9258 193.183 12.25 193.399 12.4531 193.673 cv
12.4531 193.673 li
cp
13.4844 199.823 mo
5.9082 199.823 li
5.9082 196.981 li
4.89453 196.981 li
4.89453 203.79 li
5.9082 203.79 li
5.9082 200.96 li
13.4844 200.96 li
13.4844 199.823 li
13.4844 199.823 li
cp
f
13.4316 78.3979 mo
12.4473 77.9937 11.4277 77.7915 10.373 77.7915 cv
9.44336 77.7915 8.55273 77.9419 7.70117 78.2427 cv
6.71289 78.5942 5.72852 79.1372 4.74805 79.8716 cv
4.74805 80.6274 li
5.56836 80.1509 6.1543 79.8364 6.50586 79.6841 cv
7.04492 79.4463 7.60742 79.2603 8.19336 79.1274 cv
8.91602 78.96 9.64453 78.8755 10.3789 78.8755 cv
12.2578 78.8755 14.1348 79.4595 16.0098 80.6274 cv
16.0098 79.8716 li
15.2754 79.2939 14.416 78.8022 13.4316 78.3979 cv
13.4316 78.3979 li
cp
13.1211 86.1733 mo
13.457 85.7495 13.625 85.1333 13.625 84.3247 cv
13.625 83.8364 13.54 83.3989 13.3701 83.0122 cv
13.2002 82.6255 12.96 82.3296 12.6494 82.1245 cv
12.3389 81.9194 12.0078 81.8169 11.6563 81.8169 cv
11.2969 81.8169 10.9961 81.9014 10.7539 82.0688 cv
10.5117 82.2368 10.3271 82.4683 10.2002 82.7632 cv
10.0732 83.0586 9.91016 83.5786 9.71094 84.3247 cv
9.57031 84.8403 9.48047 85.1509 9.44141 85.2563 cv
9.36719 85.4404 9.27344 85.5752 9.16016 85.6606 cv
9.05078 85.7466 8.92773 85.7896 8.79102 85.7896 cv
8.57617 85.7896 8.38867 85.6865 8.22852 85.479 cv
8.06836 85.272 7.98828 84.9263 7.98828 84.4419 cv
7.98828 84.0317 8.07813 83.7148 8.25781 83.4897 cv
8.4375 83.2651 8.6875 83.1294 9.00781 83.0825 cv
8.86719 82.0513 li
8.46484 82.1182 8.14355 82.2388 7.90332 82.4146 cv
7.66309 82.5903 7.47266 82.8628 7.33203 83.2319 cv
7.19141 83.6011 7.12109 84.0298 7.12109 84.5181 cv
7.12109 84.8428 7.16309 85.146 7.24707 85.4292 cv
7.33105 85.7129 7.43359 85.936 7.55469 86.1001 cv
7.71094 86.3193 7.90723 86.4922 8.14355 86.6187 cv
8.37988 86.7456 8.63672 86.8091 8.91406 86.8091 cv
9.21875 86.8091 9.49707 86.7324 9.74902 86.5776 cv
10.001 86.4233 10.1982 86.1968 10.3408 85.8979 cv
10.4834 85.5991 10.6523 85.063 10.8477 84.2896 cv
10.9922 83.7153 11.1113 83.356 11.2051 83.2114 cv
11.3418 83.0044 11.5293 82.9009 11.7676 82.9009 cv
12.0332 82.9009 12.2646 83.0181 12.4619 83.2524 cv
12.6592 83.4868 12.7578 83.8467 12.7578 84.3306 cv
12.7578 84.811 12.6465 85.1855 12.4238 85.4526 cv
12.2012 85.7202 11.8809 85.8833 11.4629 85.9419 cv
11.627 86.9849 li
12.2871 86.8677 12.7852 86.5977 13.1211 86.1733 cv
13.1211 86.1733 li
cp
16.0098 87.7876 mo
14.1348 88.9561 12.2578 89.5396 10.3789 89.5396 cv
9.64063 89.5396 8.90625 89.4556 8.17578 89.2876 cv
7.58984 89.1509 7.02734 88.9634 6.48828 88.7251 cv
6.14063 88.5728 5.56055 88.2603 4.74805 87.7876 cv
4.74805 88.5435 li
5.72852 89.2783 6.71289 89.8208 7.70117 90.1724 cv
8.55273 90.4736 9.44336 90.6235 10.373 90.6235 cv
11.4277 90.6235 12.4473 90.4224 13.4316 90.02 cv
14.416 89.6182 15.2754 89.126 16.0098 88.5435 cv
16.0098 87.7876 li
16.0098 87.7876 li
cp
13.4844 99.5122 mo
10.0859 99.5122 li
9.28906 99.5122 8.74805 99.3491 8.46289 99.0229 cv
8.17773 98.6973 8.03516 98.3091 8.03516 97.8599 cv
8.03516 97.5786 8.09863 97.3335 8.22559 97.1245 cv
8.35254 96.916 8.52246 96.77 8.73535 96.688 cv
8.94824 96.606 9.26953 96.5649 9.69922 96.5649 cv
13.4844 96.5649 li
13.4844 95.5103 li
9.6582 95.5103 li
9.16992 95.5103 8.82813 95.5303 8.63281 95.5688 cv
8.33203 95.6313 8.07227 95.7412 7.85352 95.897 cv
7.63477 96.0532 7.45801 96.2891 7.32324 96.603 cv
7.18848 96.9175 7.12109 97.2622 7.12109 97.6372 cv
7.12109 98.501 7.46289 99.1606 8.14648 99.6177 cv
7.26172 99.6177 li
7.26172 100.567 li
13.4844 100.567 li
13.4844 99.5122 li
13.4844 99.5122 li
cp
8.58594 106.028 mo
8.19141 105.68 7.99414 105.243 7.99414 104.715 cv
7.99414 104.196 8.19238 103.761 8.58887 103.412 cv
8.98535 103.063 9.56836 102.887 10.3379 102.887 cv
11.1543 102.887 11.7617 103.061 12.1602 103.409 cv
12.5586 103.757 12.7578 104.192 12.7578 104.715 cv
12.7578 105.243 12.5596 105.68 12.1631 106.028 cv
11.7666 106.376 11.1699 106.549 10.373 106.549 cv
9.57617 106.549 8.98047 106.376 8.58594 106.028 cv
8.58594 106.028 li
cp
12.7871 106.828 mo
13.3457 106.291 13.625 105.586 13.625 104.715 cv
13.625 104.173 13.498 103.672 13.2441 103.212 cv
12.9902 102.753 12.6338 102.404 12.1748 102.164 cv
11.7158 101.923 11.0859 101.803 10.2852 101.803 cv
9.29688 101.803 8.52246 102.075 7.96191 102.618 cv
7.40137 103.161 7.12109 103.86 7.12109 104.715 cv
7.12109 105.485 7.35156 106.137 7.8125 106.672 cv
8.36719 107.313 9.2207 107.633 10.373 107.633 cv
11.4238 107.633 12.2285 107.365 12.7871 106.828 cv
12.7871 106.828 li
cp
13.4844 108.846 mo
7.26172 108.846 li
7.26172 109.901 li
13.4844 109.901 li
13.4844 108.846 li
13.4844 108.846 li
cp
6.10742 108.846 mo
4.89453 108.846 li
4.89453 109.901 li
6.10742 109.901 li
6.10742 108.846 li
6.10742 108.846 li
cp
12.582 111.401 mo
12.582 111.557 12.5566 111.677 12.5059 111.761 cv
12.4551 111.846 12.3867 111.906 12.3008 111.943 cv
12.2148 111.98 12.0215 111.999 11.7207 111.999 cv
8.08203 111.999 li
8.08203 110.938 li
7.26172 110.938 li
7.26172 111.999 li
5.08789 111.999 li
5.7207 113.047 li
7.26172 113.047 li
7.26172 113.821 li
8.08203 113.821 li
8.08203 113.047 li
11.6621 113.047 li
12.2949 113.047 12.71 113.004 12.9072 112.918 cv
13.1045 112.833 13.2637 112.684 13.3848 112.473 cv
13.5059 112.262 13.5664 111.966 13.5664 111.583 cv
13.5664 111.348 13.5352 111.083 13.4727 110.786 cv
12.541 110.938 li
12.5684 111.129 12.582 111.284 12.582 111.401 cv
12.582 111.401 li
12.582 111.401 li
cp
13.4844 114.893 mo
7.26172 114.893 li
7.26172 115.948 li
10.5957 115.948 li
11.127 115.948 11.5322 116.006 11.8115 116.121 cv
12.0908 116.236 12.3115 116.432 12.4736 116.709 cv
12.6357 116.987 12.7168 117.284 12.7168 117.6 cv
12.7168 117.917 12.6377 118.183 12.4795 118.397 cv
12.3213 118.612 12.1035 118.752 11.8262 118.819 cv
11.6348 118.862 11.2637 118.883 10.7129 118.883 cv
7.26172 118.883 li
7.26172 119.938 li
11.1172 119.938 li
11.5664 119.938 11.8945 119.917 12.1016 119.874 cv
12.4102 119.812 12.6709 119.703 12.8838 119.548 cv
13.0967 119.394 13.2734 119.158 13.4141 118.839 cv
13.5547 118.521 13.625 118.178 13.625 117.811 cv
13.625 116.979 13.2734 116.321 12.5703 115.836 cv
13.4844 115.836 li
13.4844 114.893 li
13.4844 114.893 li
cp
13.4844 121.549 mo
4.89453 121.549 li
4.89453 122.604 li
13.4844 122.604 li
13.4844 121.549 li
13.4844 121.549 li
cp
8.58594 128.042 mo
8.19141 127.694 7.99414 127.256 7.99414 126.729 cv
7.99414 126.21 8.19238 125.775 8.58887 125.425 cv
8.98535 125.076 9.56836 124.901 10.3379 124.901 cv
11.1543 124.901 11.7617 125.075 12.1602 125.422 cv
12.5586 125.771 12.7578 126.206 12.7578 126.729 cv
12.7578 127.256 12.5596 127.694 12.1631 128.042 cv
11.7666 128.39 11.1699 128.563 10.373 128.563 cv
9.57617 128.563 8.98047 128.39 8.58594 128.042 cv
8.58594 128.042 li
cp
12.7871 128.841 mo
13.3457 128.305 13.625 127.6 13.625 126.729 cv
13.625 126.187 13.498 125.686 13.2441 125.226 cv
12.9902 124.767 12.6338 124.417 12.1748 124.177 cv
11.7158 123.937 11.0859 123.817 10.2852 123.817 cv
9.29688 123.817 8.52246 124.089 7.96191 124.631 cv
7.40137 125.174 7.12109 125.874 7.12109 126.729 cv
7.12109 127.499 7.35156 128.151 7.8125 128.686 cv
8.36719 129.327 9.2207 129.647 10.373 129.647 cv
11.4238 129.647 12.2285 129.378 12.7871 128.841 cv
12.7871 128.841 li
cp
13.1211 134.865 mo
13.457 134.441 13.625 133.825 13.625 133.016 cv
13.625 132.528 13.54 132.09 13.3701 131.704 cv
13.2002 131.317 12.96 131.021 12.6494 130.816 cv
12.3389 130.611 12.0078 130.508 11.6563 130.508 cv
11.2969 130.508 10.9961 130.593 10.7539 130.76 cv
10.5117 130.928 10.3271 131.16 10.2002 131.455 cv
10.0732 131.75 9.91016 132.27 9.71094 133.016 cv
9.57031 133.532 9.48047 133.842 9.44141 133.948 cv
9.36719 134.132 9.27344 134.267 9.16016 134.352 cv
9.05078 134.438 8.92773 134.481 8.79102 134.481 cv
8.57617 134.481 8.38867 134.378 8.22852 134.17 cv
8.06836 133.963 7.98828 133.618 7.98828 133.133 cv
7.98828 132.723 8.07813 132.406 8.25781 132.181 cv
8.4375 131.957 8.6875 131.821 9.00781 131.774 cv
8.86719 130.743 li
8.46484 130.81 8.14355 130.93 7.90332 131.106 cv
7.66309 131.282 7.47266 131.554 7.33203 131.923 cv
7.19141 132.292 7.12109 132.721 7.12109 133.209 cv
7.12109 133.534 7.16309 133.837 7.24707 134.121 cv
7.33105 134.404 7.43359 134.627 7.55469 134.792 cv
7.71094 135.011 7.90723 135.184 8.14355 135.31 cv
8.37988 135.437 8.63672 135.5 8.91406 135.5 cv
9.21875 135.5 9.49707 135.424 9.74902 135.269 cv
10.001 135.115 10.1982 134.888 10.3408 134.589 cv
10.4834 134.291 10.6523 133.754 10.8477 132.981 cv
10.9922 132.407 11.1113 132.047 11.2051 131.903 cv
11.3418 131.696 11.5293 131.592 11.7676 131.592 cv
12.0332 131.592 12.2646 131.709 12.4619 131.944 cv
12.6592 132.178 12.7578 132.538 12.7578 133.022 cv
12.7578 133.502 12.6465 133.877 12.4238 134.144 cv
12.2012 134.412 11.8809 134.575 11.4629 134.633 cv
11.627 135.676 li
12.2871 135.559 12.7852 135.289 13.1211 134.865 cv
13.1211 134.865 li
cp
8.47461 140.583 mo
8.15039 140.253 7.98828 139.846 7.98828 139.362 cv
7.98828 138.827 8.19141 138.392 8.59766 138.055 cv
8.85938 137.836 9.25195 137.704 9.77539 137.657 cv
9.77539 141.131 li
9.23242 141.096 8.79883 140.914 8.47461 140.583 cv
8.47461 140.583 li
cp
12.4531 138.319 mo
12.6563 138.592 12.7578 138.922 12.7578 139.309 cv
12.7578 139.829 12.5762 140.262 12.2129 140.61 cv
11.8496 140.958 11.3262 141.151 10.6426 141.19 cv
10.6426 136.549 li
10.5176 136.546 10.4238 136.543 10.3613 136.543 cv
9.33398 136.543 8.53711 136.807 7.9707 137.334 cv
7.4043 137.862 7.12109 138.542 7.12109 139.374 cv
7.12109 140.233 7.41016 140.932 7.98828 141.471 cv
8.56641 142.01 9.37891 142.28 10.4258 142.28 cv
11.4375 142.28 12.2236 142.013 12.7842 141.48 cv
13.3447 140.947 13.625 140.226 13.625 139.315 cv
13.625 138.592 13.4492 137.999 13.0977 137.534 cv
12.7461 137.069 12.252 136.751 11.6152 136.579 cv
11.4805 137.668 li
11.9258 137.829 12.25 138.046 12.4531 138.319 cv
12.4531 138.319 li
cp
5.84375 149.306 mo
5.84375 146.586 li
5.84375 145.95 5.97461 145.484 6.23633 145.189 cv
6.49805 144.894 6.83203 144.747 7.23828 144.747 cv
7.51563 144.747 7.77246 144.823 8.00879 144.975 cv
8.24512 145.127 8.41699 145.35 8.52441 145.643 cv
8.63184 145.936 8.68555 146.343 8.68555 146.862 cv
8.68555 149.306 li
5.84375 149.306 li
5.84375 149.306 li
cp
13.4844 149.306 mo
9.66992 149.306 li
9.66992 147.987 li
9.66992 147.694 9.68359 147.483 9.71094 147.354 cv
9.75391 147.178 9.83008 147.005 9.93945 146.835 cv
10.0488 146.666 10.2402 146.473 10.5137 146.258 cv
10.7871 146.044 11.1816 145.77 11.6973 145.438 cv
13.4844 144.301 li
13.4844 142.872 li
11.1465 144.366 li
10.6895 144.663 10.3086 144.978 10.0039 145.309 cv
9.86328 145.465 9.7207 145.694 9.57617 145.995 cv
9.46289 145.171 9.19727 144.562 8.7793 144.167 cv
8.36133 143.772 7.84766 143.575 7.23828 143.575 cv
6.76563 143.575 6.33398 143.694 5.94336 143.932 cv
5.55273 144.17 5.28027 144.489 5.12598 144.887 cv
4.97168 145.286 4.89453 145.868 4.89453 146.633 cv
4.89453 150.442 li
13.4844 150.442 li
13.4844 149.306 li
13.4844 149.306 li
cp
13.4844 155.563 mo
4.89453 155.563 li
4.89453 156.618 li
13.4844 156.618 li
13.4844 155.563 li
13.4844 155.563 li
cp
10.748 159.296 mo
11.2129 159.296 11.5645 159.353 11.8027 159.466 cv
12.1113 159.614 12.3545 159.847 12.5322 160.163 cv
12.71 160.479 12.7988 160.841 12.7988 161.247 cv
12.7988 161.657 12.7051 161.969 12.5176 162.182 cv
12.3301 162.395 12.0957 162.501 11.8145 162.501 cv
11.6309 162.501 11.4639 162.452 11.3135 162.354 cv
11.1631 162.257 11.0488 162.118 10.9707 161.938 cv
10.8926 161.759 10.8223 161.452 10.7598 161.019 cv
10.6504 160.253 10.5176 159.679 10.3613 159.296 cv
10.748 159.296 li
10.748 159.296 li
cp
13.4844 158.997 mo
13.4844 157.896 li
13.2461 158.028 12.9971 158.117 12.7373 158.162 cv
12.4775 158.207 11.8574 158.229 10.877 158.229 cv
9.4707 158.229 li
9.00195 158.229 8.67773 158.247 8.49805 158.282 cv
8.20898 158.345 7.96973 158.454 7.78027 158.61 cv
7.59082 158.767 7.43359 159.011 7.30859 159.343 cv
7.18359 159.675 7.12109 160.106 7.12109 160.638 cv
7.12109 161.173 7.19434 161.644 7.34082 162.05 cv
7.4873 162.456 7.69629 162.767 7.96777 162.981 cv
8.23926 163.196 8.5957 163.351 9.03711 163.444 cv
9.17773 162.413 li
8.73633 162.3 8.42871 162.125 8.25488 161.889 cv
8.08105 161.652 7.99414 161.286 7.99414 160.79 cv
7.99414 160.259 8.11328 159.858 8.35156 159.589 cv
8.52734 159.39 8.83008 159.29 9.25977 159.29 cv
9.29883 159.29 9.39063 159.292 9.53516 159.296 cv
9.67578 159.698 9.79688 160.325 9.89844 161.177 cv
9.94922 161.595 10.002 161.907 10.0566 162.114 cv
10.1348 162.396 10.25 162.648 10.4023 162.873 cv
10.5547 163.098 10.7568 163.279 11.0088 163.418 cv
11.2607 163.557 11.5391 163.626 11.8438 163.626 cv
12.3633 163.626 12.79 163.442 13.124 163.075 cv
13.458 162.708 13.625 162.183 13.625 161.499 cv
13.625 161.085 13.5566 160.697 13.4199 160.336 cv
13.2832 159.975 13.0488 159.599 12.7168 159.208 cv
13.0098 159.177 13.2656 159.106 13.4844 158.997 cv
13.4844 158.997 li
13.4844 158.997 li
cp
13.4844 166.222 mo
10.2266 166.222 li
9.78125 166.222 9.37109 166.163 8.99609 166.046 cv
8.75 165.968 8.55762 165.837 8.41895 165.653 cv
8.28027 165.47 8.21094 165.263 8.21094 165.032 cv
8.21094 164.774 8.28711 164.517 8.43945 164.259 cv
7.46094 163.896 li
7.23438 164.263 7.12109 164.624 7.12109 164.979 cv
7.12109 165.226 7.19141 165.451 7.33203 165.656 cv
7.47266 165.861 7.76367 166.085 8.20508 166.327 cv
7.26172 166.327 li
7.26172 167.276 li
13.4844 167.276 li
13.4844 166.222 li
13.4844 166.222 li
cp
8.58594 172.726 mo
8.19141 172.378 7.99414 171.94 7.99414 171.413 cv
7.99414 170.894 8.19238 170.459 8.58887 170.109 cv
8.98535 169.76 9.56836 169.585 10.3379 169.585 cv
11.1543 169.585 11.7617 169.759 12.1602 170.106 cv
12.5586 170.454 12.7578 170.89 12.7578 171.413 cv
12.7578 171.94 12.5596 172.378 12.1631 172.726 cv
11.7666 173.073 11.1699 173.247 10.373 173.247 cv
9.57617 173.247 8.98047 173.073 8.58594 172.726 cv
8.58594 172.726 li
cp
12.7871 173.525 mo
13.3457 172.988 13.625 172.284 13.625 171.413 cv
13.625 170.87 13.498 170.369 13.2441 169.91 cv
12.9902 169.451 12.6338 169.102 12.1748 168.861 cv
11.7158 168.621 11.0859 168.501 10.2852 168.501 cv
9.29688 168.501 8.52246 168.772 7.96191 169.315 cv
7.40137 169.858 7.12109 170.558 7.12109 171.413 cv
7.12109 172.183 7.35156 172.835 7.8125 173.37 cv
8.36719 174.011 9.2207 174.331 10.373 174.331 cv
11.4238 174.331 12.2285 174.063 12.7871 173.525 cv
12.7871 173.525 li
cp
8.57715 179.139 mo
8.15723 178.793 7.94727 178.396 7.94727 177.946 cv
7.94727 177.493 8.14453 177.104 8.53906 176.777 cv
8.93359 176.451 9.52734 176.288 10.3203 176.288 cv
11.1523 176.288 11.7666 176.455 12.1631 176.789 cv
12.5596 177.123 12.7578 177.524 12.7578 177.993 cv
12.7578 178.454 12.5664 178.847 12.1836 179.171 cv
11.8008 179.495 11.209 179.657 10.4082 179.657 cv
9.60742 179.657 8.99707 179.484 8.57715 179.139 cv
8.57715 179.139 li
cp
15.8691 179.558 mo
12.8398 179.558 li
13.0664 179.378 13.2539 179.148 13.4023 178.869 cv
13.5508 178.59 13.625 178.274 13.625 177.923 cv
13.625 177.442 13.4893 176.984 13.2178 176.549 cv
12.9463 176.113 12.5557 175.781 12.0459 175.553 cv
11.5361 175.324 10.9629 175.21 10.3262 175.21 cv
9.73242 175.21 9.18652 175.313 8.68848 175.521 cv
8.19043 175.728 7.80469 176.034 7.53125 176.44 cv
7.25781 176.847 7.12109 177.315 7.12109 177.847 cv
7.12109 178.253 7.2002 178.599 7.3584 178.884 cv
7.5166 179.169 7.75391 179.425 8.07031 179.651 cv
7.26172 179.651 li
7.26172 180.612 li
15.8691 180.612 li
15.8691 179.558 li
15.8691 179.558 li
cp
13.4844 189.554 mo
10.2559 189.554 li
9.68945 189.554 9.25586 189.497 8.95508 189.384 cv
8.6543 189.271 8.42578 189.088 8.26953 188.836 cv
8.11328 188.584 8.03516 188.31 8.03516 188.013 cv
8.03516 187.622 8.15234 187.341 8.38672 187.169 cv
8.62109 186.997 8.97266 186.911 9.44141 186.911 cv
13.4844 186.911 li
13.4844 185.856 li
9.86914 185.856 li
9.22852 185.856 8.7627 185.712 8.47168 185.423 cv
8.18066 185.134 8.03516 184.771 8.03516 184.333 cv
8.03516 184.091 8.0918 183.88 8.20508 183.7 cv
8.31836 183.521 8.46777 183.396 8.65332 183.328 cv
8.83887 183.26 9.14258 183.226 9.56445 183.226 cv
13.4844 183.226 li
13.4844 182.177 li
9.21289 182.177 li
8.50195 182.177 7.97559 182.343 7.63379 182.675 cv
7.29199 183.007 7.12109 183.481 7.12109 184.099 cv
7.12109 184.888 7.48438 185.528 8.21094 186.021 cv
7.86719 186.142 7.59961 186.35 7.4082 186.645 cv
7.2168 186.939 7.12109 187.317 7.12109 187.778 cv
7.12109 188.192 7.21387 188.562 7.39941 188.886 cv
7.58496 189.21 7.83008 189.47 8.13477 189.665 cv
7.26172 189.665 li
7.26172 190.608 li
13.4844 190.608 li
13.4844 189.554 li
13.4844 189.554 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Adam Marblestone) ()%%Title: (Fig6_temporal.eps)%%CreationDate: 6/20/13 11:47 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&kuo%<dO>%LJFC;_%^Y!_!+@Q>#/V2_"9Jla?jOSV@[je"H@MH#5?4.UC9-+V@@b*h%j"NslB5*reKe.q:tTTt^YV2g5&Rh.%]pq#ubKHBXiTEog%.\"<34V@akNSei8M90B?!ahj\pJp@]QT@jXh.'#;e\*nmETadnot$iIo(WJ/+rgOUY0J^/&0c=h`^-0j^%VX%p=*p.>4%Z&2fBU'"+d=lZhaUM]K^dn\S\^?o=!g,fY/LWcT6Rad,K6VhL3(Q^>Cl0!GUSCpB<0nn:H-W^7R<p?"c:+`.UT\%PIM:%"p1%fcX*/!*hPLLG.me&HMp%JWbf0$?L$oj\D;[bgT[3\D4;<SqPE`QeuX'7PV0+Q!D-NLqSl,n(MO0`mP\q"5a!"1bHN!j+sL=Q%YG]CTQ@W@d:TrSTk83OWn^AMT<k7$LIJP&L^?IV5#2e[1PP8[aIJ3Ne`Kh\rUphDPmMjF4]I!!L2=$=)2h3#sVZjfagQ.=H%!eoL%Nc\CK#J:6XNrAh3NAdUY<cI]^Gl?&O-S5f;'3N(+MuYkiG1?t;kUELJ2=dFo.Q.#``Jf$Q$V(`F>r[S44)-uC5.rST`q_RJmAG;F%3/tSsh@ONYOBs)[d=su[]A:IWCH1fbjWMEM(r_,+>/?P4^iHXOV^@E=9EE&Q#LJc2@#W]P]j""hpO"X/e+e-9oC"=&R/qfGNUNHo%mpV%@PmW<#2La@<?F=X_C>8AqXbM&K]0$TsGoltU4=oT>=N^5M23'I$YtQ!DR1TAemP)RW@>LcL)nog]8d.jf.X5U&JlaE:/5rV.%eQU5hnEsHhYLdO]*nk)W?J6H(,JAtYo'<`T/)WLT_EQp?QGPiUT$hE,,CINefHYdaIWJ-.Ha-BANk_egpl:^iSLA+:&\_binIqVK%-`iM0PLbekY[@0cASO)UnaXG];]8Ra;C^We]p&/[[[spu[Z/ju/a$W^9@,mSL&Jo5`'d+Wp6o<_,DMgm$N%k6Qr8XpMuCP;r.VhZ%j,`Z9jTr\H/;=&?G<1VG9.4([rE(<-!GjdZ+$O;DI?a#!MUIL5L%_%F*a;Co7I-e;q0::"r"$tYml4rhn*k5KCO-`mL[S?&ni-9'%dY-J8moTd@QRd%#k&Z;UNn-J+S+A>s(!^[KElohq(\kZ$@nPu\>=YYfl_S^@QLb^IIA:Z";S711S_d/Gdm)Q,3\r3DdkRc-TbqP*%O7I3GgZ^l3!hZUBbi3`%Gb9"8kPL)8nEu*fpe6`<R8Z*a#Ab!M,i0P=K=@,TQe+n#dQ:1P+Fj/XV4u*2/;mhk53X0S0)UVkl!LUO%\eGd*dQcWe^S=U$(BjAS&Fd75p/`lq/(#aCgYAU>UJL`Q.o`P`&q/3CXY'B2qP8UqpnRC"`t%"k\C0:4(]B$d=\cqUCXj?OZPmZ1%C?;*.pf5(4%Vc-6r(0?^mP8c]aqS@Z:V;%Y4).b'g5R\*$!5Js"ua3mQ,'P&%1g4iVZUlC9@B1)*FH@/^I=j'VslIl(P/'+ac43Z%h,P3,5P8..:JgLXMm+5E-`)4@fSi9$qs=01jTYb<:4C0ci4%phJ&@O$NhU77Ic<n`:&$XsKJmBu3=GsDI1N;V2Ye'tVk7q;&RDBg%oEsA*b4qRCjbE7S_gfbA/$Ha./Skg'*^6:Z!WL)a>cu_E&74nQ0_mZKYI'H!R",ZNJa3B@"YTbNqd^DEEB9;51]#%UbE0"_ots8a%OSTSRU#g\pUj]OtgOu0[4teGO#ECFF]^4$H8"[lOA0cQd5t!TT$gLKsP3""G*L9FXpFT#/UmG;O`rRHLAgB4ni(Ntn?:],P1<;!1%m]n9=gJ.H2SRKRZJ]pr[cW$FN<(`!e..]J:e^A\(jYJefH=hjn%_Zp,RO-+8#Umqp)Ru)K1ASgWJ]N>%b4FT&SC'Gl8WYkZF]?Wk%RO\pt+_2,HIV?-Cs-3LN@Tn/F5hU\X;:_)$2l,OB,jc>=$)i]fF($RW!`gT2OnPR]Uug52e:"+tR5c0t31!;I8gV,!.%U'`[NUWm%>>jX9,5hhG9/Q(SWFaZ_c,Xs+LbFFShE`1o1K8]cVm0R^,L'pAAM+5b5tDg7.1r[.BbM%N\t"IQZ2KIb`Xf:V^0d`-h"N9Vp*(LZ%a;U&VO7PBE,["%U"$;\=_!*cN_67gG:\[$t>ges7d?a:LRdu9;Y>S*5Gm)/1D/R;&]N540ar.Qe(cRr&QDouAl/HWC/O$X"Zg]r_%P&n(i[>ZbAb+kb`Q901>@WEi\UceTcZ9BDd"2B5?k2g#^q>f57U,d66]\mZd,l]dF6aSSU1^=t+euN'E6GI(L:\c?D9HQkG#hb5e%$/1ZI:"g*.&,Fa#gR2hBH4X4=b[(qo-sb+Nh1rCa./bTe,PB_?`6k4te3e^8iuPAP[fZ1Zb,".-eD>a-QbiHebAjP!31o4iraJsq%8<+W1[M?Ih6Ij?%JkVNPrB>RMBP(D-T-tFa>YSGfpY(]sNg.M1PUu1[XI!J`?8'.F(SSBS/Y^QlmBP2#'aZX5qg8Yg*W9pM*UVGs%dM:jaTeEi4aVO+shQfOBH;U,DZ,I#daWL&-@>:KT-?KaZ<f8m%gL@u\HU6K90Cc?ikeq>U*r-dYHcc1ZV/d9PTP_Yd`7bUhR_mT5%c:DcdL(EY_s/f!SKU0M;q53t`]a.R8:p&j8@s?[=7W6lO1A0d36t7_oQRe"n'].X#,d#e]Y?XBm'n8Nm;e<8k_U_iDeCM&6GEfX[%c4rm^I5)BcZF@h[(28W[q][lK>mV1T>a!5t3bZ'n87bET/JdSZ>QUNtg0SGQoe3A_iX6Wrg1g2T05.m)_%tN"9_+VI"p2ZPRa/g,%0??(c+53j":Llt\>1g,\&=,<e'9:nuF"mVgBo`4(?M<kF`npP_A8^3X:?JmCd2-5?\Orrt.cCTJDcE(qVloGfZ%Q(U?@g".W.+hn%8>M;=A.gO@17:WBn[DLsI)BtN::4V-m<qu\AMgd,L;O]bqA6Td[5^<PS;Pb$7O+Y/NNr]38B2RF7WKY)K?M,HA94;2@k"gae=mpS%=qX<=E*,ksR[0UMP$I+@PXd]&ee5@9CDpoDheY[MdknF&l?CYa`\!p&RJ8'@2/!E0VZgOg"Ut[tQFP_.r%ToI]RFH!W@]O=V:M=<%m\(QNG3*%jOJKYH![`[V!hNi%'0g!^;CS)'L.EoSo9H^+KGKqk'Ln6;H6$1oiq3]T&Q&PokE-sJgrT%Yjq`(B:l[96>,n3r1<D;f%c._?VIRdSD@\rf@B*k7s\Xt.oIJ2]eTGlA,j?P;["4U'l/&_V4_^m^0giob]./0L?a6P)%[lEd*q4IX1Ff1KI]LQau,TtPCAZEdQ%ccai#(heBm.i"%iO4>%l2-;qs4;umc3:sgYM4bLE3:(kI./e>!bkYnk46gt,lXIMD,&P35k'91.&FVL-94E7;gc$@(Y4\4?>.EKJ%r>fI;a-"rQQ6UN.5"hO&@2T%3eV'dPB5X&OOah;]FECG@2=s$R=rrFn4Y6I_\3h*cFaYp*cXX:aXT-G+PjfFT,o\R6<V?beB+t1(%>0\J/HnVGXn'+R[-]N=TL10.-VF.T6Jt%*Heb*ZjiVO\I8:.r4&dm9ea3*V']/?nKV(4T!]k'PP+&rDu2Xe,"=`Q`Lnm",+A_RZ/%`RV2sY@JP>Mn'R\gM=+%eknF[B/<0@e9NR?,.A5dZ/1eqqU8M$V9W8U9139VOEndeB=56)CLcW=TO5RD''lYQBKWjo:=-j;Z7OSe%:p6'hU[\V+!D!F>llAJ<-dQ,c1"-?D*i8a1"QaV<cPk8WpWR*X[t_&TF/siaT0R7PgOWlD.S2EQX1"%#1=Qp,\s`N]Le%]E!n:I`%o/`T.)?#^$S!/eT`8)[kepj4=``m@s`+IC4[I+9gT<YpFpEVVZM0el]DTnJYattbcbY-Y7-#=o`fVoLs1;.AWl3ubO0"9_(>L:0O%$oZ.*)jeUV8:+Y-eSJ8'cG;JQMagC7eIKVE)E+pm)WM98SN(.uhe"1:9bOqF3\7'i+dJ7#`"T,ID[F6G=(s42`bB"Bckeh^j;FG[%%29mXHoeZA)5kudEfF=:/LI*!)S!77]ZW1#KbUGs)q2T#9s2_3Z;e0je=`D/l]OH2fL('?>cM'[9$;!2NcB]-`h[3F`C;kQPX9j,%8'3$\5X>Ql9=][g3KMFK>X9tgmtllnafSE[EN^^sS584?/]e_W",Q[6>(B`E?9&92qO?oZ1q#+;0($(-)M:R-^5H%-fM5E:h$7VL%0i3`8CP^kBCfs=R0teuErmDk9C:&a1@C0qJ8ppZ>]%^24WV]U-mu2\cE`(XqlAB)-mNt-&ZjnFt':R<k%Ukd`Da$giPqtHr:36`D%j$^X!0#h\V*u-FG?RE0$et,M+RpICf?)uJ=,^s;^ihNF^m%N'CME!r:o,.:[l`hAaCE,%PKH:`7Mj9&G7OG3VV@BtIr.nKO]W;iF%$GUNUSF^_AZ5#!afpTX<Sgip>Rf"e:c038N*Ft4!ll<4?>I8O;rmW9f[VbX\]0*(=k0gkU.p\WR!\@%&b<*,,n(^rS^%?Q=."po+%c_.rrrF7`<hn@<bks(GOCko[274lKqf'>Jr@F9"YedLWaFa/MhEP'b;4jn-*41TCcke=gZ<&=+Bk-,#cT3a5Q/9aXf"?4BGGIY$9%DS<gP^-8oEZfV)8D'T(WNN%/`q4l^%NP"U`I[1#/Dl<&"h+"[KoJW%nW7J&Z)gQ`ADC.UDBE,TENJCR3-+]X6[pK)L1g=l2=okV;%hWMZ)gMd$f+#iMholcqB"m5c]^Yh^)BGBEc?l>'W]>*p+c,T't8)U1-<I>M3+5c<'B(35"S*fsqYPa_fX!uDqQNVI9-;Z8nhbhEK%\`*5FPnL%)-<;6q;n:`_YH%h!-eA>7s-p8plHSJ?A%Va6lfh/GJ`aPBM-_-SZ2T3_D)IqH0+gE?OQ1Z!qfLG+SGq@/2I=h9+Z1=4%?LNFWM9q)_gNn._'^bh_YPMIUi9^HCOclUDTmHln;&4RQ9Be2dUfT85\GLKVdE.[I?<dGU,sUtD\_/JE9(hpjp\S40FBF$,j;2m6%e#/NkkR&hLjH"<cbPHXAD^RQ:!PFcZai?mMic"V^$,6<Ad(f-HrZH^`h8nIUo\q-OH,:Bl\IoWH/%L$6WeF6s5j2(p]Y8eVXu@<8%pS8DA\%/<YDer<!f96_oI$ZqO'U<WBK2?M/d)fhaklW@gbYX]3]gVZ'dJSJ&%#AB."QZYd4;FFPfp`WS%AScpT'h[Yp%I;8pVjuJ%@I(Y$]ss5trV&tV'eV.jZtVb\^3:Nh$l6*]\_XFg^HjRYr)0N+?VerDG2njRZ1=_sTT$C<Dr&0J!ohb`&$MOn^Zt43$I"Q0^^aCu%;Y7/=o:;4:GUK3?/'KSKN4#IVr;'bmS_GO_8-q'SEI`jQ_As7EoV[dUHLX5Sa4JmX;Np5A2-Y:NNVb8Tj!D`&r$1pl9^R8*EIFkE%2B,d9^[F_mDjon5Iq>5:=S+i%`Rql9pJ/3jnt21Xru<+5GNrkMT[!YeOd-senTb.Pq(HL*ruYiekM]eJ`S1)O4:O?rVn;urZC!bE%WcZ[f2cE1)e&_Nd`@cGQ<hGu]SY[]`s/13QqtOj'5$e!9ds^slQL:u/s4K#-@Ge?ceTcE<Psp.[P5es>bEk+kXcs=O[^oiJlo,us%oXS40]%25SIt>0YEpg=-hS*ce#M]3tofZubs)\o\)Vt6QQp7@S,93s/;thj"OG1<B_W5=X.2kWB](<JF>C19HGmr`GdI+elJue6m%X+SFje,)d%HJT[^ZHcdKm[u%iUqCK3GnC6(CC,:[5e0?GJ)"p`)Vr'eDT4$*/bIFprLUQ;#+oZap!.VpqK:Xuh,pY&o8-0PT?lKn%\#1DR\I<N1C:4:Wb.IK?Haf8)WHYq5p='$u@Mm;#@K*D.#4:kA]t?9qLeD;)/5^>0Dd2o.IJs_K,UcKNlhFl+Ek>1%6YHF6oM"+E%*qhD\As#8!.<"]/p]*bQh67mqI?*.'Y!g1KqBTgo8m#Rd40V/+q&!,sYCG(aVkVe?@>H\9OadpPf-]!MqQ"VfD7/uEok+0qNnra+%Y3dR!,&cU^"j]e/"\.H%R=BYh?bQ-hbs0X1Q'A"=^jYln")p.h9LK]tS9(n<#E@"^0qMpk,dq9c?o_8Lgh7(adV*/CgZEJ[HsWZ!%Nhc@:)tYVn-'j4pgTJ;7hWc4-mf%qV4P^+cnY,4%MMTK)7muWIhm/ttVD9?+1:R9ujM*PNh9Blo5BZ;$:X,g*h^\*\,f5$/p$o`p%fZ5/DhY;'5aCW)4j41O9C:)kP$JXh,&,?E;UZU$@,N"2eV5(b?5.s68d@:(no^WS`,U;_P\(u@J#\O?2r3"SaDqt'o[=%5CeQ"4p%\52F?2%JK4h'Zl%R?>/r(G.ndXlIn.;69Y8VlW#%YTq`-;n6a7;Q2=$3rPO@)H)HoO4*LJD%X8[kFpV`GTkMnHF"L@BKbI-)1_<#%qk37;5J>m)i-CneD-FOP[-BKP&++3#X/j12m8[um48BmpX&m6X^r;X9X]o%das2%UL6N0:$:D-SmhmZT<_BQtBN!o`?3r-k3_t-"%&i@%mW_#!Ee8l.]<H,rWfShhQB8l<!H:MOQl(%$s9j(gO_O?eIDV+?L:dEr:4I+bX.B,j=HIG(+#$3bR-6e0'2t\O!-$2Tpd)*mm%kUij+PVT@SZ-:.\`<W4T]rOB.L(FN,Ds\a.G:(Wm/9=V=nX.IMnRJ\ZQ]jO45>3USH\&NR`WPl"5(EHR^=iegWgu>#nc$Tb2KVsS%`EJF088a6D4JWNclBrrVd^EJ8c$&U\mS7P"qnC]t58I0:ccZ/3=ag-ES\'3S_/]-"pK'u18YNWUh;?>E6He/tG1&ngA\)8_E77V+%Q&dTE`=B$`pF-2FAE1C"R6.XLPFML>g+D/?Pp+P@l+GpE?<Ok.3lNGEX_(103lTi$S=6EG?5nsuaN6t$FOtj+P1@"*1//G48\Nk'%:L`EH^ZqJ()j(9QQ9l8M[F'g=5e5CZhhm:mTd)I[6)-$BiD?3?G1Z"XTTdfH;W.P&&>qI1HhmjLP6&bprd'o&+HY%Ef2qD&l:i[)%Wh1!>H]\HOlrikcR/bmM"[rVrgjT0Jp@R[unb$/d0.X_)JEEuiH?eFJ9?57Q##(3"P6a(f]3j!*K2(#A)G&8j4nq+p-<DV6pu,gk%+(F5HXF)io=mgRI8'3\r1H4Ud4u74?CuPp\8CDcZGX)?:M2,uWP$K]JgsAVGfoC0Amj@=)>*]@Aqs)JX_aC?Lm8rXUXI.R.^Me4c%*ae6Hrj(+B^L]^R1lS6'`58M8lCH\-mRo]3k$V%iVB*"@Oq]ms?SGEi(qiOU.[CeBr@OTBP-,L'D6sW8IB&'S%j42g[G(YU`l-l5%LasY/9!BM4L!BHuIqs\%9<f%a[V`\:&o+lN6e*u\5ga7W\HdkjqpZA@?aO&if4.[FdV-ItetBbAkf#`:ce#'s>M:RYch,!ab\b&L%8Kht^a1uMSj?n[=6:>?4gK"a=I\gU1i?]6eLW-3oc;7WM3^[&LeJV!&Xk#Ng8fuqPNG@cs'7Zn'@VR"![3&SUBp5)iAM5Gt3pCG]%(0@93RT$YW@*#_8!f8n#\rr+W6l0$6<,sFm[?P\g:=dH&;J*SmJ>>(:o?fXjjI1pF6K<cD07TnAbG\gLql:kn#)EO[R2;3!3%M[K%EO<>Yh%#=0kVc<1[J@48$/mWB4mhfSATp(PWst:sLim.NrTPu:TAPrnd_`i;_YUI=NSc;Mj6'uX>kfkaOUE]5qNpV^oc`+>hO-E-%X]HU'b;F:i>$*rXISJ&>40'#fV4!NP@:E[4q;]EKiO<c8n^eFZqY<sX=En1:SQJ"aW(nl]#F84j]ppD!]+^I?cVDOG*'iPacd)C7%cS^&*YQO?`p[[_3da)+?s(WMId8a]>VGYGMg?l;ug[a@YiMV[KYd5,3I/I0L[D"Za>OC`p7eL!Qnk3i-]R"59Qi0udM`q#aTs?M)%!qkr-8_p3`.badY1f19Od!hnK?Klig8euW1P&j7-&[e\Re@OhoO4Nn-j8O[&C-IO%[_EcPO+9<:?Wc'Spcpl8`hiN:/9QP]-ht%=%)h)Z`iU4mh>3U2,qn_r<IAP]t%sN<n7o<LTO6OR\>Tm-b<2oW![p@?^qJfuQh(]:SIAP!H[52MKcUX8_$;n4%RDjfTKM('-Zh9a0%/UaJ@jb6Pfjq"ha:=ejH>[c>NR6/pkeYmol>"tsFRjoDMQHMjbr\V']^7@]X6=6O'\!K!bG&N9T=or(2Y'[7uj-c;PH0pl7o:Ang%]Qh&bNp.j/nosEK+]^\V40$7MBD%q'!0oUI*`i.-Z'JLkgH:qk7[6H59WP;)Is`Z7-WF9]o3Q&l>?bg>r7t,JF9a5F]"2_Bqtb;Q%[PQrnB^7-b^]-+uF0k16hfY2&[;]n5WYB2F7s4\#]Y1&Ce@GKpe@tCABR;dCl`:el9BW4a8ok/GHh%%gTs*>&9]L-Q.&!OPV0;%h%GT&*'mih/_gAJOs0l[2YqJWo2]W_53js@)#EbRF4WHYrRHql3J\pge24oMftlsFV?\k7$tcK*9CNrM67fd#%e.m98<5:'@AnU+7a%-WGCLB:LS53i#[7Yo&&dQEKuM)iJ!=V5H9<.uBN4?LN9qe5_Bhhmoa(k;*p*QGA^];t$WF\+bH^ddqmnQ!!;(G%nQ[.a8\bIGH^)%hs?>U9%W7OIsh2telMWirH;LK.EH&$p?&7-rL-"0CWH4!oOUd)l/C%Mmu-JOH#9D8]>`*l;UdA5I=4+^pi)?pC!F0`r9'ihd\Df4%p/SY%M,anjOD;7R06mj,%X'25*ZFp_de[Ku>FdV:mJ!ec%T^0f1MMlH<p"kD^YHW+]`54iNq`50r5gdroJrG&BpoRP_4aLO[:\!%%GLT6CmEXai.BIV?WYB2V!b/o(EBWF6T[JfpO!qYYKs];$fr`41GpgbBUD[8"p[7T"KtMJ>$S+<>T:csu[aZf7ccd\bs2/cR[.YQE%[/I?qa!tBo>Z?']F1,6Hn<$[bYFk4NP=i(qg=N=)NdH+qN0P;E"?m5Y9O;g*mm<jOO*#9+DdUg+$MI!ge]e))o&\R(odB/"p\Mfu%A+t;CRrEL^c)c,LVfZ!K"DWi.L!Aj3?I_W7S_I5lY>(L2]n^GOGCI5F<MmD)g@gTAn$oX'@e=lUh8!:mk3MKmr@kKroQBJ@_U\(s%hX7;@NrJ=8nNBt+?W_:)'<Z[@LDt$t1C7.W*fcTco-NeSi:*5X26"!^U"I(6/]Mh1pT!uHXF@RbQ>lNWm!7^Qf8\E_6*^C5q6/97%Vp0n,G8>*HhNr$VeUqo0pZe83Vn[P&!ZLlYk@SKQiVLO^(V<VO'!AtHBe;J,!r^Zmn&O9VI>Qg]U"K,8/&C&TGMi<YkOMGj[=2Pd%:+lCN,`4H3%VsnBUPAd9#NP]bRGYW?g8fq2TC:*=-P"aN=53,mS'SWs^%$Ak(9\O$Y?RL.8"V_In7n!qC6rjF3YUC`WnONB5F6$G%$QgaFP,g_[KBoRZo,D'"ld=O(Df[#XKZEgVK[a281]<e604X2.ECIBL^<SU"4c>0m]bPTtZ$Pt`@e'@$pm!f4?RBBgk2,X_1&@N-%M5@m)Y_=^$I<sZ%C?la@F1O[&MeXjb"KsW>NaB@3B8:_'%j+6J;l-DBgGuM--F^eH.B.?o4_`0B*\T6\B=]Cii3b!Q`W)hPlKm;$%T01;C?`qtJ]2#MNZM%cWYu7@*koD'Ll:lhroP1Sb7+EcP?N*KpFF1l!Y&o$&I46YRdCPF>%<eWJGjj7sdd<o(i9t]_cKV]0hTm,g%;Pj+05"nD167j_4Zbr`q(kIh(hXm'oQ^>gZ:=^HqAQGh]'&Ok+;Xc$LGIUAI[%:AK>3"AWEaiC47?Ub%g*:6%jB[]oV:L@SfA-tB%;)K0+ef`M,DepO+hsW@d4.9p&k'fY=aeRCC%-?432pVY!>%!tV[/B`64Z7HAm`!k5buX"hE^+rPT`)>m#fA)AB)MAM$./HTOhIk9%;YZ!bLX<5H(/O#eFSl0Xj31MW[C^mn#n:0XXhE!9Iu-[TT_cp]Y=>pMDc<B^q,j#B7=1[j=&j<jo61WOfb?k#p=@g'$ITka`lR"K%JLmeinV9?A#j\XL>sOU5:MujkhN/Th7t\598G&RdY]agN8-G1@^3t/55<kh'HClSXOnk0qW(sEkYpPa-VNr%?)l4pAf+9JFX$C+_%`TGA@n,8)<hG.UR>gpH1F)PF;^Ka(m+aL+q<-9E&NM!n5roKg1pamO@IR/GhH*"K1d+Xc\FCJf'^[9KOkfZ608jRWlbj;l,#'Q&`%AN\37\]Dor&RPj%adgm:ldIXO"&V7=m\P`'8#H3$-_9\91h+ElcfO/%>kDi<=5N!F7.4.'P:Q8GN?;Bef([Iu5[isb\@qWf).hN)%\TN>M9l1E'm>La_,mR_&BX`[:oU\fo-dTrG`3.eB.sq-qF\UCqPgn;`rCQs=cCq%g(leC:=k"sia-9oTI3?5OMp]_e2cWTEktltb%ft+=%'aZ+^Tu,t^j1+kM[FOAI>2-dj6c^J2ahn_Q@<qQNP*Z(uQtB4TjFn:YQ/YdJA9q3/l]`7Qg9&n_cb'&7rgsVj/q):_:9N2:%TnK[UgfgLlCoki^4^6^qPIf^@91^.#Ht-'9"L0hs;4fs)'7$AFX0o/MCDYsjjZa&'Zi4'rhni1c:+gG0C94Z7O=4m9CX9h$Ce3LP%ZZ`@Mbpn%Jd2kB@W?isiIQ!t<Mtbu+<0bs2Xt\f/4pUP/>>P++%un>p81,2HYLL$QiFIhKN7sK3UkAMm9dMZ2K?a@r,FE/m0d1o8%5*KaQ.jN]mUrtrND5!tGcH2h(]:Z'@V7.sVaGR'khiZJBAPJ[;9B,c`3uM1DA"]2=Bh+td.a\Ht(lN2b7^G!+/sfPXFU+hef&5,!%e5d4Fa7aW,qFD+<T[h5ja.5Wi3`kN"Yk>HA:>?L)@9,S[=Pr!ppBGT$l"Y,)89WSm&T*m_4ud\j]6up`Am=t*BD_HMCD\4g05I+L%-m['(%)\=lil)g&/L>74qFQ5h%>ii*6d_^e[-%nW4u-5<F'9<dH#_jQk*+7?9bHAcp5o2W-B$q4EbKg.g)[8HKV6=;?/aT\5^XhN%&9,N6':Y4:%+M4!"b>McC!-D2*KpJRrd>X5hbWUrqXWg%FHYfB'#!"YCkYRQ%)nBr@sur&c7a6$9Ec+#;@5?ZrK85f9_-;Tmhu`!%jCJPpbk3'oC,bGm:NUrNQ\<:t7j-BP/2D[WG%21*jd>l.4bMAB5J$J95/EF,,\aLdY`l!6>E`a8pI%R=l"(8;oQ,mGKOd;9p,hHu%_8@OK@Q&"H"!t]g$%;)9b<pqA?9T6dcL]Xm+X&1p[6pSC1W8KtIA1iWFSNnu8si#POBQPUK>^$<i\`ulUj.mAacbFY+q:P$NE_SU%eWepKS'ieVF+k%B1`M)/cVm3ZNn\'N4iqJ;r@DB2G&M`-)RNLOC`l0Vr-8_BAM:1gLZ%dccP,@h?*>5+)Ju[M($l>Lb,'1U?;0Sm%,llfqTU(tZ)icW:_89H\W_9R-OZNJLH:Z\oe/hOgh;%@K\pjg.F`Ej6n'Yj>b/kcZ7p_h'i;6ERcTS>'=lWM<XH[;1:``8j[j!S;%<1-u7Ebsca6s_17QD3rG289'7<(CtZejO<5"OG.FOC5VZa6Y+?4:%MZoq(75CQPMGKEEZ#AUTYRjO;_j98TlmXY>iZjI!e%3q.`<%9j70\?K4[6+tgT?,c,%#jpF0L>Y)5INC5iI>bWN5876=o6)&Lnj/^_`/U.`1j@(/n.l4=N+YmhT9;qtF_Wg-[F8no]d>"%cB7ii6%?0m1$)-ru-NG%XDi42Ea3nl>,h6R`&T3Pi9lUVnt'dM+Y<gF6g2N"^j=]8qJ!FD7VD<f9TnKGfAX,HR;7lpO14:J,_aGL9$?t'n5%%3f?)geSWjQZ%NFIY^e^LRCA%Xt[/4Jm/^#Z:UFtGiFJ55coUOE',@`JKS(%Q=01(HXAnW1FLQqf<-G3A-5="dWFFlMd<:8nEVLr%]u$SsIu#]sc/V/%X,d;qEid#6"CtZja$a43GSYgGjHrRD7]8%)\eb0(GXtK.`P.@Ah^_fr/f[H@IF[$F3\7g.?Taa`@Ce)P&uIj<%@#^liA%E5\KJ,g+OO_dcpLU;j8D*eISM#kCV7_('g4k`'$UD=Q,eB`X.ESYbO'&']d)Vm)@-M^"%*11ua:+@eTQ9ou'iJVF9!Qu7%erccV1=7>Xa>hMp<_m-R@!o'Ir&$d_pYS^^Dj#R4;GPLk]jckuW)63SM/"IoSt)aHDEB:B>/JRmA:OV7^6_$?PSkeaGiG2/cfr/@%eh(eT5kQM->,6-UB_;RlFYbgn?]&EO-RZ#)W$@.hXDGXG7@%=j</RN:c*tJ#\3lPO6n(Kud_`jMP=oS"('BF&#.c6g;kNu(QJ%I9%Iq%s"mo.GhgRhRTQ>Ud^FLf85Ep1q-k^#"=L<Q>ac_.&ilf^?Nko"SWfn+k;d%tC%WS)m@kKp&<d,bVpae;ARTSm@h%\5tRSjA\n%N$jB54bJd]mMJ;$?$\MorA96K](?Cl3=7];%UFAb*OEf_kKp1IP*7]GhK7=ll5o`]9V@A0"#VMVdX1nch/D?IlKrDBHn!2&)f]NX%nV9:i6F01.JPO7<lm5G6j#`i(hJ"kZSU.VYH?Yh&B1rM6a:La:fD&7*/WSUN@_qcaSBKd(@__`%RHUopSGl5Tc@"sl#"rZ.Dos%h%7gD_Vb9h!W(StiJm-PZAJSK_;+E[$!D$Kg@24h39\p%,C9Jfl';GDA?l_\U+S%98RYeVC50;D!qH*Wogfd?,5ohBTKC+G)i/V,T)%lajB;g=Hd"<$If_lMUaGWEZUBBAHlj=);V+T3RTUQr.JG-SNoW3(Qe_:3hS&c[aRZP=u3R0kGWX=]617qt;o'>..t&`C";:",@8t%@?UM)>lrDm.ost^Eald9$]OFP8B_1JlDC$aKB2R!5Ir!/5.g^Z`#ZkgSuX8QQ(4;Oem8<?d%h@S=r2aF7O@MS(IOO'r5.]IHf,.M%j*OLMf"fc8H$k$]@Zm-Fal-gP:1)&Z=jbA^Eb<H:aAf8s,/p_^GV'"p/9r[Ti(c%a2Cuhs^ouY`g$$pklbr.p+WZBZS\>DhCoSl&%/Q;6%imK"W5pUC^1EXB!oW?I+m]K>uE+3ijS@tN@DMkcen;IWgo5aE>-n$bY9C'",hJ4sr#rIcCjb=bKhNa46T-lY<XoI2F:QFK^%`YdGX&jpuJ69fLd=Y;f#O$""M43;))>2MEN7FdFRm?\P\1PSeKI<_X8lQBVo*`n2&8uW,;)QApj&Z$FtU$OLI;B]i.6J,e)FR%.`%SZ_3kFu-ZmNQOkkpaV<H!^+@Q'+=HUN([tb/0>bYf`m>TUbp179T,`YfO]u^o\5q.+Xo%?8b$G;XIGhCZ&"?%*PV4:l*<]ff$1nM%d<DR<aq0[ICOCQcL6k]26tFfR#0acKdCZ94a@*X%ZDXB**g+i\$\j.ch&n80<DQ*LE;=d36t?qir(*3(47+gNk5]A39UqViQc-mj%:SR[UkDB38`j6N*DgUNc8R+J9dru42EAV>CDJqX'*RZh$c<4-lB1YHpSJus?>YMoFm:G"_co6A([WN`B>HhI@h-bRI[6%@^ZL6=;%c`;tG>\^-Trs^.t\M!\$<AGq7gStK9:X-hdXTNAtI7G&QFLf-3pDc[e*8M.S-S.H%527j<*ud<a:;70_h"bn6m82&t&(bHLlBq/$%LeJk8#565qdln@#EIZoNq/Gl[:ji(W]_QN8kDgal1$?GcGY5ago&6BaOgjtB3?M#VM^9q??mK=9"hIgM==p(p1@L'Y4^pD([`l$)%Z=fNBE-)%qo^mGD65au6p;N6(1H=t50B.gKc\&SofOG'1W&aPc9<[6ShZMbCU7J+b`8^Zbg"]AoL74r$9OURi`).kT3;l@>kr"cc%W2"6JFG$/04&;G.$$%S:)K&hf%ZsL)Zc7RQA!i";De"&20Yrr2%C:>`"O@A&:rWR#E5ZDF:cukcl2%;l-#U%YAEkCOqE59^7b.+;%7dT)#/;Ak_^8?"@6S2lFIN:pJlLgc(Au#L6nR\M&ru"0nW]B=(,9sT[H*EZr-!Nhgi#,+(9)2qaSgr0t2-T`gd#?K@O+EU&@f=#)%1-neZRQBXZ,CH62o'Bi31gHX>1D&7!=tCC@;3$Vn'b9W9^,pYj:(EBnQS^>T9naN8DOEL"DD8hGfMoB51Pfr&s%"W02QAJ)<4Jb!%=@W<!oOeq:&:8kH9&c&G6"7&G_T2&KbHX3,%27$3pc/6*K,Fa3LeN4.q$8n&D+B#qn6h.^C,UC7=N\"(PHo<3Zi#,YFE/rNP+,rU%b/b/mFB#"V=9RhD4Z-!XcJ8%:#A!ZA<tBcQ>OD?1UX\,TheN0n]ik;3I5Z/#b%BnefBQ>qdqNrQiUk<.lfWj)hmST>j@lCnEF$2c%B%A<0e0ZI"?7DInY"<du>aKN:0O]a<,k>KTWUn;C3II[!J?:D)XtGp$h(B>HcL>@.1F9r!*35W,WAfNdC4B#OG3b?#pLYdSMT9HZ%<f2ZI5:5K$c)DS(Z"1=Rf9.U`;o$IOe"Y98Z5XjHfhBPmF66@Ulm?N@@Uc0'D=?M)6D\oJ?bnb(r_,q-]1GY=S+`!qh>TP0/ZQ2@%4MJ\[dm6-rdZYC9*q#RH<XNk`C[8(!Np8HL?ig;I::#;>?S,h=B31$o3BCO,-&nPgbN0-L(RA:]X[mS$T.cbF+W>Vt1E(sN8_\=D%GKXjYJd&HkF6XZ@28]WrCoKRuZ);>qEp-U$UVqNQ>U;>/dUtdYqE>GK]oMJ*3Sc]9g1RFEFHYF0;7N3QSdh5"fub%g50jgBp[t@(%,1gI7hj=n99C-$&\SiA[lLo'mhm3MB'0X669''2j_k/$;ID3)b4YL0Oh)3pfFT!DsK4iXB)i#:^Rni,O6rCI6A^fmal1E;W)'tbI%(DG<BQP$RgFLcK<A3LL-N1IK-IctUZ(g5k/eRQb!e"Q((KTLbkl#][K2N9gi2P"`V7adQ3b,3YLd`#6V`fNomMmKA.Kc<N?SM&J7%H*?8NVFu3[eJPXWFLcMYhU-=Re*3)T)?$gPe*3;8J$SV.flXgqb7t4::GZP1l,HN2)eu0b\mA?acP.EERkEC&*+q1c5SP.uS$!PB%5"fbJflY,0Cp7_:SVNILHT%E)!QhGbCGq^n6#Q&BFLp"cSiuQfB@H*cl/LRckh1'hoJ(K"A/s9E\m2hVIMk;<:.G`S[&gNCdq-V]%)FHER/se3P4MK2`_"HAqRlGr'o>MdJQl$\S`$Sr8f::*J/b(9r[%Q!h\Bh5)2(@(e)!\cF<9k_ISbepoX"^NG;ERa&2hPP$N<Q?<%-p]"2lWN,DhBleH"dr,P)i1,.9qo6]Fu/4.B;Lf0,=S&S8YK'-lg.V,\Q"V\ZhF=f8Q?(cD:U.u3D#,T+*9G,cC4a"47tU8fhCtQ%O1@oL0V:,%%qe&f/gZ]3>9[@MB7d&M:M'jfNS'q#mm+-TP?Td^F-e2IphB6XIM*l_.0n[?a]5@:*HT8BhZha=S/<!Hf?Y50FF>4o%3EL-GA';2\?iHQEq6g5<-0X(Rm)Z_"DgRoG@K:n8]qbEl\j".Lo]OO`[\&$XM0+1?roPtI(aa1\aI8BKK^m'fM/4h"oG?]O/156G%);1KTFSq<#kk*2U8m:]"FLC*>#:dZ96_06U2q7(OG=.p5g^VeHA+T4`f#cMko5S[/V%A5)nT!Kt_I.VC;gF7e7.?-r!st9\lqY\;%m_?)d+R>Y%RrSRW4L%pLU0*jEpE*Gb[<2,?![=pBG9@8Hg#be8<i2GHP3tpfjmU3:N0G4*HVH4=cruosn"9ker/dd>Sp969lEc%8%pQUm4`ccqWlH6ACCnA*K',_"BqjlnD#7^@PHsE']eXWT15,EM&eS9\KY^F`LF0'[/;*8Zuio_QsGS!YeJtsbL%(O04[b#n&,/_Ws%^6pDfVr:/ogdV%(qD7PoRYEsQg^SaNocPX;V-)d=N4X(?5#rK>FAcG;l'(q=]WpND-(T$7E3HX0p?p$qb&Yki^aIq13U_*q2hol_%KY+<]29/E@@nH#rgGP/-fBe@%ouW[e\ZiX2M7*#u>A_G(K+k7q5)pekpA0h&]7&&h>Z!V97^I3_L]BPI8?>62I%sWO0@h4@noNdN%XYnN_+VW=l^(-CbY*m[UlDj'o\L#KW]GNZ3-(Xq!r*UD]%*4OKFOQ9G>,iA(S&WsA&XL[YQc:?!EPE?91R9jJ0/A6\ZQq9]Zt$iI%n9uZ1H=fl\&n_RG$8/"8H*Ug!a=sD-WPtrQ9UQ=,8oZ:l(h,(^@NSm=d4i4,1^qL?Ma;Dh2_TV+5,gjFb^0,=p;Doo5&O6K'cTcM%p_f&Y#*9F^2E3^U%F_Y5U[R2/lIgca+8:$7+Y#-DeoQ=tG+&2[WE@_m>)mATH]:qjAk?&G:GZccg?j$h5Z@<hXS\?p6M4RMnk8Z1%<dUUSj*g`&fdtu[.\!7tgr=X9`YD:CWA]f+QX]-^S\6naFSTmd![agNV&XUOH21QS,paXN@HHo*.1+?!2.-,<d?8(HR]r'Iqq%7;%h3Sa)2/6JV5O0fD($IYoEgBh?d[t6ogb"4XV.u;u]<f/sO^]-sKC57f?i)>[\UTgLM5b4VpRe<@#nJFR#lJ](765KBQA-2;>u0kP%<EePBMl"@"j10ZA04,>BrNP2SFe;WI6WY^$pFSB&I$$s-A*`W!4/()17le49?Kl*#WMGZSaOF`0+Q$96k&Sf3lcZCUQ=G9DH/7*L%R4p[Ca0ZgbPP^rkki<Ddp>5-rq^FBt]V3etC"jsNkgSX&VjMmGA_fS:VOOchlFMS4+[V?^P4U,;P@t.g8tuUE$Bp_,KQ:m&>H=p,%M&WMF(i4ptdd^"Y$X/:Ye"+^'<?5mk<D!<pr5k/?B;P:UTum#EB&]^hN&c[LgJ],'b@\L9WN<(e0:@ZgI?t_+-`<dB-HCrJS1c>g%Zo2TEHM>FZii:Yr=hMIRPg7J%B6%Ps=$O.!/mkKo@**KM`q%Wh/KF^DAL%0+)T+$8FR=DHpt1Y00g)oW`a#u`4lCC`LQ!e)pPs-N%iutds".1rQXKU6-aHCa]AVlJe2N?KqXa&E5I<%QccWMR<Xn=k1+#u\J3+FYPQFLRfXsR[>^.oj&61VprF<N_4Z*\"PaHId3%0YGa%T=PTC7hRuTqs>*Z3*7A-d-Z<p9'/OI+7\M67&)h_N`A=(9o6m\-M?N9bcE]8T6$+1)OHrCZVP:g<'XI?CK!6'cacYC"WV7SPWXkl%eaoWB0uJ8kVY<SI<m&cA27kaM=l7,H#GG8Wo6mogdMaLPlu>qI8OV-n0&14_7e:2Y/AS>IJFOZ96R7J!E'="q23Lf.9fpXb",N^:%Hkp+;r/u(#V&cR'A-&RjE:g5i%@IA:A!KFmZZdL-dKkhQU)p/`YZZM!OJLq;p>f=%P%0^ioctW)Lb-@&-E485fQni\:J\0'f$hEi%ndT[bgX(`HWMa>+;hsr.U'fpFPct+DCu[L>O8?pRj.TE2TmUAsENg,GL,bDn(PNh.TmWj&,EM4g^9$L!Nc6D=&ll_:m5ro+NB0,D%PT$'2Wo#e-%>F!AN?sd(CsRhSm9Dl`C[o??+a2UTch0ql$>FO^L-!p>`g*f-rJ#_Y<;^"9oVbT\-U-J!IL.7;:A%8+2UnD_qIS[I%OjE\nh\dV,Y!tJ(01.)<(s_fLR9W>B>bPLo4P)7"CVAn4%X5'_qPep2SH,BEf.Xg)qAlSgTBiBqVY$dT%rnaZqMqn8B0iTJadR[C%R!^/^I3Y<KQ`fPn.aJsWoh.O"Dnm_s-(aFhmcl.cJfa\l5M`KAkZ#<Zcf5s3c?o8+rR.s4d3$9:Id%4idZ3aXcLjh+SCM/G%X"qH%IR/[[l5)OQ@H_e2HFL`4Vu#q38jfMSY]KckKip%*]7rK#:V0@H9F0o0NIJ$;qM&cC,B`d&rKR5^Sl>T6SoZdM\UNcGj<q6mHELW?%>WY;J*lkg?l)V](SB!S*;`rS$pdWSVd%BS^GW(?V>efnWioJq(K:V=pDTU@tpX.=[90^sF4BZCsp1NFnj#P^EID%YTMdY1YrR+L7%)rWon!B+YfS]<\[_fWhrIUbC!YHKUMiTUfbkP>X.'OOPNN-;@2:U5[pWh7?L)Y%&s_-YhorJ&Ed)r/Y/jKSa3oh.)^Y5a$e5F-Bh%`f^#Ls'3<TH*=!7lR/oI4<&^YF8Z<tF/:nKDtmjfEN5XO5-hi$1iU`=g8TNM:H9BX>e^D%`lrrS/N2\#Id%fBH=BK6T'M`-*p<0j%=SA8_jk4IVEo_<?#4j@#4kEIA>Wo"]NO!n-51_HY,B=ZS]`$.K9/d9u9&bZiqP>RX7N-QZF8aN_p!_Q'6_3P0ActsMAfU"1A[Pr9%44d7KanViaWS+Z]SElNE*;X2cAj4g">raT3$(!-"4mHJ58SKs1$b\Vc@aC=FVo.[1eb`6XQ`OXC:?V8/pM/Dk9TD,k-gL!A#A)W8%^;qHN,+-?#+='[3Va(E+YWKRO#W'=EB!:@R-^I@\#=Wu(SE>P!470K,.8S/P[Qg+E$HjOXY6SsuobKU'G"\t3qTM\Z#j9gCVS>i#%luqP=b-dG]jQ-njH2@1!<425nHFc>iq";([.sRuhIr>2Iqu+QpkF[OEp)9i;G^-pnkPWhWgNtpYp%bS4[Ttq=5JPmCS%ZA3/Bn(,%FFPCG*&"BU]IeNckdCksZSV!W4ZtOQC:$S:A,=g"gpd6oo7_/B@!:q`oZKGDrPE?Xh-OGPSs]PlI5#)H*]4a7m[O`]Aur0R[4bm&%`qEBtd+CNCr7,[LXY7*>J$$t;AeknqZ/ZKKdrOj%f"u0@G_JL?6.4VKX`ON>h0JoTKsU?KTbU+7>Y'>.>,PU'<\*Xj<m.Ofd1MK4%*5S&f5::bd2,39+f@`"5amG'hmr7:PiSK0hYI(4r5E""^*srh)e%nXtZZ(<'rFtEWl0bPbIQ6g46uj[ae+M:T^]37OYf/r21KiI<%RV4p6#>W8Ac4a#+7r<B4<TNE9Zd;Z\X(Y84GjAtk[7L29FBJ9MEkjXdbLua'q<*.#e=EcqK[+FKF3E:j!8,,cNJFhnLZKQFkM\bk%Y--Bnl')"epJ4^LUo2f+jh_e(emqclD>WWMI[aWA/f*;ZZTGe2k15UTO1@U=WEq?"E*g$AT)XI5l/I!1]%OW$1eRF*9;pmKEC[q[%h@0g5[In@>T1p(-=t\R-Ar&6RP[%j]quhmo[,C-<!r5EZg2ulj!#l'e$t*m&P&L'da,`H#2fi&I`l!jsa,QA_M)M_f:N#BjnbQ0h%R$TI*$Ff!rmMqNFSXK63;Gk0t\G@=#(t+,7l.o_E_VlL!WO]],=Vn:G;E.aN`OC=2n&2%K$.&>"Z@T4m;[MlcJI+t&k)QohiD5Bk%^AUn?\3DXn,.DJ;5,I<2P,)H^JQZUTI$i5K>3O84+J-m`H#1-=[rXrd1:28_Y"[iP(o>F06L!G#fnQP7(<KQlc<D&pq,6:](j"/W%@5Ugg>DqIqO,Xn7Hs1,RSrQB*baA,Co/Znh.>BZ<*jgZTegsO<4t`A-[(Wk'kHO<&^Rq@:fVUP#m<!r"o&Z-:IVJ1nb'RL1req]=%RX;f!k!]!U(_*$9h-!19n13UAX86\bU_BDIGN=p*^rb-hRDkif=$Od5\$kGa2sd%,kTUA#U:C$-JJc-:8[aM!df_%igjAXA_JoOF%]+BAac'!@rqRLYH>?l1a[a$OLYV3J[0Ag<2MjdVfdTq8O8-2<&K1OpVeH@LFH3B8oI"ZD[5AcWGDsKgV<8[#^7p:HW40P"@53BLV%B*aa=*9f/ubtg`"/FZ!hImAB4(3.Q2iTG=gYEhS#YLsD#f:4/-HBJq$iMSn9APIUDe=ip]e*'U+@A=@=L*Uu<%J(#[M=WWr(6)i(%,8Jc?B?OB1?joT#CW;Y!NI$!7ilnS=8rbo7UkE$41%-]M-@^e?m6VcD.R`.<imuE<c0")&c!:2*2^J4*k+D*AIQj+e_,c!=,f1C@%jnA6b%aG)8C`0/b:hDGkcXm7rho?rU,`>>e4Z^YoLIF,`R5feEI/@eD`\*4YQu>BQFC&'4h7@7]_Wm\$<Y6DL\4=4b;V8!s\TMGt%P!JPo!!aL_cU&VjqsEnqYUP0JC1)JbApoi,."P*o?K/;C:V(4NS]*AMdIqT5O(B#CWtn36mp8F2:=[:,3cT_kr)_t4)/JYOdms?B%&dF$gUOa>(N^;u\jr*N2EWHEu'eF=-:qlVHD3&6a1,7oM^<Y>eFb*!g9)didGt(3ge7=qGjO('gJIBWbal+L$^m\nkf[*4&E2f`5%cUQr81!qIfYpUU"gRFNHLH0T*Q-S5]T3MKa3ns2F5-Q#.6F$9AaQf763`dE5_+,!Y%]?&P..K$\Y"+>Q@4s#>iV:NOi04KZ6u/CS%a^p\>e]t-:_)46^=qKZkl:;I0p&L/m(_Lj8YW"blc8$$^f8jBV8]r,D"K5?VIHch=&><_i-fP$K\NN61SaXP>he.TF@)31Fd.%-b%3'Ch^s6,j__0S%O'&4KJ,k8\ZZc?1[XiJb6<_>e(nR<C<C@c4<d,UNaBEJf]D4[;Y4ku!`Tr1+eC]ckTVAFs1P!aB0g:Xq#MKfCU%2J>$_f"`DF:sXFMrqRs9V;k1D=EYCbe8!@Sme"%Afu^QU?OhT166L@2E"Zb@i_("T(65&MX'(iD'2chfLm'UR9&4IW\\GlVr5qm\%(ZHhg^)Vm4E?FP_Hl59`EFg=7TJ*9:0B,W7Vg<Y>T#^H&QCEf"O$(!FPkuNbZ+3OjQI;hE7*2@t==T12*m;F`PfMo1*ZK":c_X8u%c=?)e,T[n:]$AD[2Inb0GjJVqZ*[PBd)ZkVea(NiJ^sRi,+)Fhnh?;qO16sY%72<6[N\TBASm("Ob]@po3&S$Lb5?`j+;&q=H-#0%^;fV2M$9/G0-)+uV8iB;COpe>o+c>#`QW'U2r'TYDUl1sK4"_PHY4rp5-@blQH!@)-]@%li3nuT@E]K[e6-Y<De<-OJXet*p[$8B%'CID;QZ?_irEPp_RrE"srS2T6$?0Fcgu$pF7'u!dYuC+GXI3l'*4_.]:tJ\3_:n0@FH9RsY,q1%Q)3\r[JB3+SR:#$72P=TQ,bYp%E+DSKr*[kLgKpEe`IGrdDc[^N$W>7(]1$8nGn:M<,^METZi'PZ>W=I[:OE%ViZ1&TGU((R6T.a@X@C'aaGl0R@PM@$+<]Wj'!R'6%7jV^>7B#.j2#KH\B]nX<P`Dq`&Mq=1C26`iVb"#n.O]ntGe"n.jsR@o-OdZ^D5g^=J,HPKpc<IsqmbbcQI[.V0>2f(\RuS5[3(PZ%KY1>T`kt.t"O#Sui,]`Of/@4Z?`La4WtT;D*-uR4EaJ]R8\qU@k04SNSCJY-ah#\g[mq^8Z,k_\gTqN&n_4Gh]\VJ9_f<6#10M]]%p4p$kmXj1p\uj`bgV#sNOC<gQEC)?3OjtoUGu8&F5$o3*gCI5ik15u(hd7$olfWV!](BLL^7c.QT*KiQUb="g'er',2O,>Ob)Ii.%Poc>;3Jh7%9r1@WTU)k$VU?\fAERpHf[Tq(bB][$(>X?T3'M_S:>VJ"p/1_On`_pGQs7[tb.FNrp3PVr[2Y)YNIQ/QXh4=o`bRNJ%S1g.'/%`EE>A`0'mMgHB\.JD40BU=Wj)Pp^P1N*e8Cn46mEOo`\Ga&rFg>2S4rBW%;B1X/TfII4("`2q0q29IHi>uZGPEb[=T%gp%Q[V+4-PkR*:F?ng/ufRX`drhI6b>rciWo0h?jGOIn)`<EV4Y/]s4'$qA*Z=WdahH;bDU:oT/QD[c<@IDnS>D\qW=;d[BI=_jDh52%BoL9NhR2/;0QG3tG%gl%%7DT9i:k4/iq\WeB`-J?M:na%,kg[?^9('[Q0i)FonOV&F&1&gM5AhMf+SO9`=Q$_+XW/,7X$("F"*:7%atcP:qW40kadL[P)FMPfE$D-F(^l7)`?s`-R%c[KjCsgfNJ(ucH)CVc8W;ct/9:F]:amTXm1dO!dM.tWGKlP@PiVf0lnZ>[4>1D8%>T2W=2P:gW(S^idQYJtR_Y<dH)uRReUl&ZGLZgG&k3\-3=`MT,Dq?1Eo)f8C#*NSFT1d8m,6MN&!n1E/B,4?TZFiB(/.c+-jRr'2%;AAbQT4_*aGeZcailp[V#C`6]-k]3u]>pN['J7Oq=),`WF48)g^;RBO7WLdqm?^=3<X[m^Q,\lqLWV9RG-op2V?2T#ajB%).7G$0%3#+%8?_3L(pi;)I0qK92X?9]mY*@6rXSf0to(V"`?coQZWCG^VRf<DY9NR5A/tU#0R4[(WV`_]&qhpWsU_^l88Wi;^Xm>6lrDoOQ%Vg9%JIS)F#54WO]S%XG/qb(=nO1XHl)qs%:QRYRA<'?igd8W#4e,g90>6<UA=o(iJV4R"=U`Ij=M\P?L_i91b4D'"M9M*tieF5]\%#%$:uAiX/@J:p3S',NGI4D.N[IR:SjN3[&.@W?;aMakoaa2JJKG`]+.fjK"q5^$n6chPsJ<iH!&:$#$tW6VJAlHZ,7\EWSPU2]A"%rBZ'_JJm7`+'rK1qm&Xl\#l'XM=59Q;8OjskCO+;l04pHV#0#@(7,iY8dcKR>G$#Ls+!BFpUGZbDg:6"fa_D^b7]QS<A;[CPP:G"%>s'pJ070Nd1Fo?u^1"O\Hal^qc]f6A2ue+j0,%W:3%oT6f#i-'bm6#E.?%F8BSM^*cb^99KiZoRbP-laHZ#&g3HU&#7\<\La\$hV%XO<UhNZLecK[.[f(8&$E-l+;]lW_epe80ADa4@"4-eHqYq0H"U5.2Mt.s*+R[6fP`BM?"6(lF60j0Cr?1b3E>,-4F\?'+U2\mAOF%5HJ+X5i_,RmN>VB7qE>^kf*-;KmrLGfL.B5(:`TYPS^%A!IS-4eQ-dJ/O?WhIBQi%63o2+Hr!iP+q+/A[@gbJb<j;(jl1(P6:gr.%#]Z9>;:;Q9M?Sh>=)Ii#PCP410bWOSF-U\<5<'749*u9P6bUna`9*sD'!,16[,eWffkR"<J1UNg>8>Yj"Uu*Qf.LHq1+\6XXU3:t%8lW`?4MInqZ;N00\JU24#iZ*DbR]_#7BiGS%qJqNcA9$M+kmPk,`\GA1I=$XM:7nar[ckRNRA$"Uh#G,<+\/m[QpF=@W=$<lqX&)%Mt=KrW$k-%0T1hq.'dm3,%W2mYs]9u)r`9')2=>+RM2+EZYYXM7Udi8&?upGCcE,@##[oHK?X9R$B(\KVP<>*RG?Z".-4(m;)p`R%i])+WKdaElM9"%j<QZM.EeRI,9-a"QW@7;hE&54mR6^t:oq4!.m=lm/EeWJ`@1C]j^=>S:@J?C243m*l\FlX,m5<Kr&6NqO'5?O/%PcuoZPDQalVNIuXRE@#E32/nfVi?Fr`OO=_p5(W3ARsoG=<!(N#O_U]LW5sCS#(#BVVZ*948-0CA(+W@gTef4)4S\CeEtoKhMdHK%ms;HQO*`Z@Oi]c@Z,aNqS&HshgTe)%`ob"BDV)8,%m0+Nm`ZNU>Hi1&BG:)([fm^0?LpnDs4eB+1A]nh<O")ZYcW=<6bFn+<os=s%GZ>H[,"WUN:qS98<Y><$&&kRb7'qioZ&J4QcMq%jXlKi!LifurH7poojU)0AS2RtIDcjfgfk`c7^$aMPDR=IsT)K\uO7.Ob2m"3@%\M!f!&\<I]RjDY;k$3?W*0H^g\_XAOh0#>nYP%VHq.0\7*:0<b<qFL[>4r0CY2j5h29$)iL.cTtC39V1]ZD&e1;#7=Q$\:I,Bt(p%gN2o@FJ-M6SA?*HL&QfKTA[n2!<"G:j:Cf_hi7OshLC\E4i]0YTaP`2K<T%!SsOqhTrr;J%3l;P9a8!WLHm<(.L*U_MSZbUJ4lJD%'Kt%jL"rD:"r>!j^DOPb.DbH1DVH`]VW"R%XeKGh2T=miQDq[4Y\:VN:%++8*j=>,MnTiIa=2jEi9*ZXNYu:>4W@dH^oN2"q\8=!%SqGj=*>>H+U7Pp1JK-!?>(G)/.+CQb"3`24TnhjVYSc*&LG5Y4lOb8<a*")Km93+JcR=O.B4K\T@c7$q!X$q1]T]rPW9Zg'*5Ee-%oR`eR,13-b3='Q3]jg20^/>Ll1d&r]&4S@aC'b4lCR>,SBf[;dR75m$f\NuIOj8V6$BC$g3rr_"JS@eBKTaD"9nh-i:sOU9>`CP/%iDO:J4R)a%%=H@;Y*#3EOMW!XG2b3l/eZYc#+fa1<Xk&8U0M(DVTPnY7ejq-WdCUHdK:OG(hYi_^ms/2*cBH2V2fp"n@:A#>WO>2%cS:rL:8#m%3c!8;.hhdil/+Q??B?bo+q+M/@DNt]KfuhP0LNaQr9W*3OMho+%&@C?<0ic9=2X+Qfq=fm]'7a`,*FAoGkmr1mCGG9%^nn`)#n'p5-WK(.a)QVnq]O%>!S.RLaEl/mdZ2[A;L>*)kL'`L1`'d95_13`g1%8L5sl5r6<+%*'[&58qB.1)%\"VBd3[!J5_BLc%>"Sl`Enkn*R0WL*k^jq\k_ltdQj+uDr8Ab3,0[;Ym'Z9fP!ZANd&&M;Lfi04?*"n<d5F>.i(amJ5nP$"je;,Qc<i4Y@(+`3\^tkq%_ak\!J6<oh+m$p%+KYr%kX^4lZFln>_aqm\KS6i8onu'eLI+@hFP4O1B4DlJQf$UlCcY"8o3KKr<mcNi>YG0F3>/\J6[`X*%6o\e%i<ZeUl2F&MjqDt_4sVd:$n&S%Ql^1"J]"&Z%#PP6"8ia/0c%RD^h(q("CD:@ZAJ-B<"A,)=b3WHP@1Iu6@Alg.;A[,PUWG+<-j4]%JYsMLBfrK7$b8ecc-W7cndO-HU]YUELSPg'5ZYr3l5.:\E%'3H$jHm\2b=GY2+&0+/G.]44sCL@4s9oFVdXS%7pp..qh>b7$2k;R%edGBd!Xn4N-[,rs!t?S$?,GgZclk/d;;E48a(-m/_PE>K&8$ID"V;3UKd8oI!ktRIcM(Re1B[KN"'Q7J?rI7J!DX;E%TX3gW0If2%=HcQ"eKnq2J<A-%0VM=680qQ/dQU8A$"F+u<>2noTGH7@7*bm'n2h4,9Q.r]W4]K6,a+R)fi7A^e2D]8bob<$Uc0Er/7>G:e-1<,%3!P<):>dMO$tqf$7>:hcX:paGBiF\b(&=N*Jrl''9Fo/e,s=0UfUjk55(ND2_ZX,r2aNfdjT/9#omNpp1jCldaL__^cmGL>J=5e-%N'O%*WJiStBEnRKgZ:K65Wp'J]7!kG@"]CjWX]"RSRT9aX-mHAc;@$#<YXhQVG=eD`,MH`mZm*!l&U,lVeJh#kVS0'o>EI"RZfo*%Ms/>j3N&!o4]:lHQC=Dc%!r:"QeZVh*%'GO1KMqTDl-<=Y3W",^0VsSA?"`@Z8@1+86lR^`'&ut6P8>sEK;$ALWbd:KH5Jp*@]`t%4`&lri,gH1=X^/!G04L]Q>R=M-`_]"lN@41$!WZ.4TYe*7^`eC-RNF,$[BI"5\eQ\PQ9*EdTSn,'6XJ_#XTM>%Q2uI.F8FrCt_K.%2FF*>]eHBm["\@U?K2J--ADm8mtFD%ia-UQPEDLMCi4M090>K:g2Z/W(s`..b9sG.@#SE4>5^b:N%`[S$q:pD0X+AE^//*qQe/8t%U(!0d'kO=BS#UWX#ZWJ#C)0&SBTkuB#TY4@W)UuLGKa8I`.5.VAhe7!XrbhaUI`(KH[@oQ`_.r#-pcn4N>XANemmjP0nW#03,))<%N@dUn2E,6Rob_o6B"5l+c5C^[n4YncE>K42`&X)J;R7TU#RZ>Hap@Qp6@uY7#3s;5o1EYNC$[^JAV\R&@ttitJ4`/cF*nV:6PCQ[%MA(<So^Yj!;g6PVJ!pd"LQVt!WZ7kGJ-$/?>Mq8=kQE)Q66q0qJd:bV;4N;o@fgre_("d_5]YL:J#%BW"'^PoN`sA0G=q0]'QF2'%(a<1p+!_tBJ%Ql!VMbdWL7o7f`Xos(5sYbp0$pVt6Hrt1ECTUho]W,aN;f,]J<8'?O9=,MC`%Iip;18i4uLB"((ts%(b2<r^_Cua%kX^H5-515KTY,VG"cE0.nTeZ1ee<9ZI&S!d4)I'K[!P8m/-U(DU-3O)dZBdaQlL9?!^]8&cQKT;LuB.jW,$B\&5_0nb18s4M(m<2%+VhF.bq'3CQu%Ds5\@M.hl4<M>8XuhhE"1F&#0k'c;GI^3[c6oU<mm$_JCB>"0KC3_4![$&7`O2l*sU,D_N"66/nVJWrptIpVQFs%6qs-n"Yg/IR%SG9C,OW\Z"!AE[SJIbPO^K]<^hY,o9d):<1o2/9c\)?\VD.pCIMp!jB0*j</s\[/>\3WY3>`kUp2mn=BAalVCDm0%`280]N/;`EoOA<B@)[C7$k8+N%BUG;F47@-GQ#<d2k*c>Jq--EmoVOiWOiJ:^iDg!AhZS'VG;Q(ll^6I+/'F6$nRY?]i6>)NXV.>%D[pX)'^X,p4+fF+BJcOEFq#k2(N#J%SA>tKp2XdE2pAfD./0pXC#ffo-5[oD&%V&u8OJ<'jnXo>D9>Z`D]!<M72YYn#t$(!s3=eX%@V]YN5XtO3:sGtE\o1MCPAk;VOOBRY#KGT7h-!q0Y;D[c^1!hc7"U"A%c-!i8[q,+%*s_KHn<I7V<?0Fd_[%>_\j.*`:>;5?%_B1%9ULb:_K&B8Sn@C*3Q93Dq4](l(sin'-A%DVb_C*rLVt#qpk$48>m]5\:tqbG9c25Iq1gYf0rr:QdbnM`a^q\skb/UY$;g$%U4!bY%kY'X$$RUenE-i$=%L@-3'hjo89]DEf:^fD[!GrDc?l$/^_%-."MHGpJgT72Hj=@@eF"%OaJ<75Gj;G9*9oIgIikWp`aZ9WLd5'?p%LhkB<<<NHX**OD!NZb2?WXr)2IA#q735h$!+:Wd09]A$BknTkGM_5RXQrAar-QN\U#P_=J_2)]U)F>.lE_3L5Cs`=i/T-5q54PY0%LJ7))gNVj8ck_bJ&Ah[_G6/-]<"0,.CLNlC5j/INk0Th3pK7XN`X%\mRf`kb8T0Vs@%4d0h#`Du9:ep0!Umg7UIuB2&/O1UF<$ju%iALLC9n\HEOX$[T!V)HU7ehML*.ofk!4Q,Y%;-j61+`]Q%4C5tTljST=h`)#8DF8%-\/<Z_<m=N_8`gDTkk@)n2tF#jl,2QAr)hW%)6+uW_5e=]P"/rNWrZ#;mkt@L_i-Dm;E#L%%dOR`N?cXlDA]&X[2T\@i7]NK."UF*K&@Dt'P8#b8V5(%'`l-[2/Sfu"JtP8nMc:*%Y@6r_/`Sc'TFW0]W_@Gf*ZO'g7RbD"Y^J^(DEt002MOq7G2VnIipj9!0K*g'cY:EmJrM$"nY,?S5nCLs#Rjei*-s5I0#qMO`$?jT%/m1G^I0Cs]/cl78`k,8X`eP^B0LD%nOdnsO<\nS:cj20qenW+sfE<Ku9+_Y?,ftEHO\lMGj<2Z9&=Q;HGV5WF-</4pc1XNU*g[WE%'kZur=I';XH7XT"1fhC/RS=`oT^=Ogl6,!K7_Yi,5+is.RL]aUb]\ZJ^fC(E'ahSX?R[`HBOs0F:kk[C`L@!YTQ'CL4YEjAQa[#a%$_(Z`8rk[OUF>G5-P#1QG84kGTgqb=[:VaJ5GSo#f7_gB\/6;62o@n72Ohm3eHKA,"G.a7*e7Z'\It8BN80A]1FT<F-)p,^+iFqf%/ZNt\=uARI_"2diD-@KU-IERF(CH*hHeHXU'T@-;d!#3H"3SKV%[5WaVWir,%6n6q5f:.bmNAb0"NG:["GU=dY5JgWCD%a:5iPBY%Lde9D7Q-<h3eXpbnN'^W)4KpSO@7Je)qeaeQcAHEYlJVLl?R&S&WF0?jBK^;_Y1a;$F.I02qoQ]UB"sh]V$9+']_5qp7kDQ`?g-k%0(D&2/JnclKD=e`_FuoH(#)ur@VEnlqM1%<c3)g3'%eFpK*m5;D=Y:`.+l%GDLf1'3>JNJohf:?Z0^0sDn$DK&YoM]*&"0O+2=Hs%CkubpTqGgM*U+-IKA^6/$(?YnX#W)9n$FlVdTln-]55[mgLk+>&D?fgQ=j)<JErGX5c3Rr2Du@W97jG-A]sL68\0V2@\ac88:/GC%(,rSEI;%CQT#i=b8MqD'6&m&,@C@,4]-Aa!2f(t1kSu<</C%I1:ECN7KBk1,AB4u#-]?!?1W"O7+U?G4a-8i*N!TBHJq:/,9XZ[0%;VW!e4+aSC,.P:J]HgdO,9#H]@N[`<I"&7!\n!+BU'isr9g4*4Tt\u2!)jDZ'Ugq!l'3uX9B)EH[EO/DdLTU&?<5-;`t7kh0[:NL%mDMXYIc,7*5,5=EE-<VK.Mm8_cf?Y1n\mn-aL-5*3,t>G3+?\K.,A6#0nr@Z&fXeZ5L9Oa_n?:gA8![aiX,!]OjtWW1OMA.*3R-a%N,qJH=_^MNRSAGS_An=?)@05QOV'+5Es=G8AGp4h(5%<q_([Y;M4Hq:T1][QR@:jONBtXe6/1IC7kht>"EQt-&tP[4]o\:AaJt9j%b+4iN,"!ac?^^c[(%1N!>daZ/6o60f&hO]7-)(u;eS%P<;l<O4/O:-,!j:IATF,SWYaKTsEQ_/rG6F7P9@+ODOF!0Hg_!N)c/C-i%!EF-/TM5m,ga1pFTF,Q;=)^[V(iE,/,VncnWoE/['t8^n\1P'JkS0>%92Gf$J1J,SBFMAhG@E&3,H-Kh_c>In)T1rocAqM*$rq:g%\;FKU#K/2a"8h+ZUOh.oSJ!,7HJ4+sCc!3VF"h'AF*!@sT+K-[$BO9l%-hHU#E@hR:d,S>SV?W*UcpPM8LP*XVJ!-;*=_*j-FtK(%hau$YGqq2`jWTkD!dQ1)EEXtRnC^D?<#n$:_DfH^6"p-hR1WpN4(F\=0[i.B_AnK'DVP8YTMj97,,QD2'2o-aTM$`,N1"2$@sJ@Q%W/3'7H+5,.d7m+T6AMdqRVl"S%iN<Z>7IBk/tX%+Q3TQ>gP,Ir4I1b!fB.'7)TtL8:Gj=,jWQ#Z4n)RFK9!]@)pVr=#\/0U`:@H+%nFn4OO6$t$FITt"jWTR8>fj65dN5]''uf_T((f@YMWH#*UO,M-=<9dLS&_:</<>t7@/Nf1Gt>qO6iqWb&##S/ZM?jtGmL`Y4H2kp%Uu@JGGmLgG%hP#5"h4&)*l9mD8$P1n5VD@4%HX9k$Ua=^dSLtsFs]/!=XXf3@*C?Wdnh+&>S_tQTf`W.O&cDETfe#(+Z5I.-r7b>%G?V_!-:!t\6qCd-e"29aOEMr[3JgiZ_AqI"j*$[X!?XrUb9LL2`X9:nLI2d!UOsUACPg+&#^Z[u&nS@_@U#'-GUuXBag?tV4I.AR%'<s[!Ags#n[8@(uBNK!r7OLia.%!NG'6lgUV!/G6'@AqJT^,f'YM0cX7_N4Gc/\--;(OAP8H!*B&]Z+/cK%'.BH44"K^X$#hUDXm%31bbFHU:`:31^P<,'GA1Jfq:\Ti&a'K/X*o_B#J5k6Pd1doMPIK>[V(QRqVc2G=&mCht72+GdYp-I+)-%@j>$X4eUU(C1?NdtK,$%T/jjMnl^pCa(GrU=3l_=6Ipi1hI%7D_s/Y+HV.i;iuN!E@2jb#D)/'5,DajAG,Tk$SdF3T5s)t)7#-'=%d=+?nu0IcOPNs-1$jG7%.i`)h%8bt$*kg69Ys1!j9iOmuM)TYh(Qg>&H$"6X&Z&1E8Pg?n<.#\=8sCC<#-k-Jg*C@m=&o.o<fVgLfo#YT&lc,!"^J;C,H,@(%\ic$F_(@qfg]FY:NhA,^5&N-9gU.Yn`Qd?kD?3aWHU(37+]ZN65o&/VY2G>51#+tMqQ&P7TIOgh=)eVHMAoXH4;+'DED'+3[t$!=%,A7KE#\Q*ar^9!d1BX\63A?3>_qij_rfa!)Ae%m>$YTsXLqkFK,H-Kh_c>In3Zr=ZYNh$m@)!%MN@df[%DdkED,SIj5ggU!"d,59%54/D\OZqo.iJP;:`;M10g,/Tm"6NZnmY!5/+K/Z/_ps8BX+an,5pa:'/10u`)tU+Lcb.:U#]m)ODNi1]iE'GD=jsogKklZ+ho<M1%.U86\\@!SuOU*F`:_>GT:kb8T.&pSqS<C\K3tf&1L#I44ATeRTX%5A(B=79g#hcq$`NR,YUhqT.,TO+.hIS"$?PS[9Q>CD;pf.=e%@r>:S@Lg'9<rpMR\Ci2+.Y-6Ub7&1K<s?+mK6C,e<>$jg^*96>Wt6@I"-3;Z!4+Ql5*F^)_Y/dF3V09Q@OElIo;eO2JLsP4mT0RZ%J^"'0k#YFN0`G^6's:?#@c%akX"Xfq"j.kmLW"O6fo_SU9D5DW5hlatP(DOliE%1$Ld`ZY<[%JsrYL$K06[-s\&ub@E/1V'0t.M]%;EVYrbhO\l7Ukn1iDrB$Bs8kUE3$2YAu#aBWgCQjZu"VnJ9&++.:S3p$I#XC"0iG2\5a@I%lrmA[tGq]jGQmPXhkemK@;G&8LugR%YJNT7>\;q%^P]6#?WO(R'nBQ#XrR7;&PV?Z#UoVN#[cXo75`8;<Rf%0YJS#@VQrc[Q4B'bL!'Z)h\jC+"uO(`p8c8DA*EEn9u1`K%$28MU$J4Tl^&s7<<YA)8(]fT./&Z$'Hr6&Q=$6Y6V]5T3*iOBd!JkSWP^T;C'e9#V!=ZHr-3>JHWY]F`'Erja/p-$U2,=i0HD+/s%jX_$3-)M?K'CEo"eHG%2JLSD@qm])Dp3j=o-C4F##16sTK[Bgt/#E?2d1-HZORKS$X$m:M!m^L5Ak4U\<o`pp(a`MlXCdiG/92<u%6j3hZ]K:KUM]2iP7b;(#`-)Co?sgj0(#=!uH>W2;/\XFOTet_+/d^etnc9c:'0Pd:iZ+p$'5[*h30;0O&>#]7%UcGTqbepNN,B-@%`Oinops$Mpo%eX<[0C&EOl09"d#5e(e$Af**,;d7aUjCXhdL)[WsAg4b!Ue4Ocjh,js:,8.?1Qhj74c(T$:Z7_8D8+`tb'oPaG_(%ZM:k-RbWEIK3LisjbqLr4:_$UdN9>o1YOPBZ-eS`k`-74d<7mk#:6&*'u4MJ$PBT'R3)R,m4r>(AeQ5dAs*0/EYpQd$sf4Um/&,>%(";f&Y)l#3pY$87G%i-S_X,)#_,#uLThEpp.;qBmN95e2]O^)/dqtS-q-4u-K3@1'nM3NLknm?bA;t[o&ct=[bBIOO/CU,nKuZQT%ADimbC@U`=1bHSVTu6V+"?s^@P;RPf#o%)R,cSm[?l1)V>(b&Wo0A$tScqJPlLC*e:c/[DMJ\[cimb:T-XJL6Jf$hI*X@gr,A-,$%0?.9=IsqJh?V%c&$?H<u'Km1-i#YX+ef9><9r)Nr7tUl/(.fHZoC[376I=$Q*+nu9Be30aZ(!W4fL&TYqL$@lZr^cahR3ToZaF(T%O3)$'i;2g.OI4!d`q,1E6u$bAC+p=Snn^3-4YPm^;IoC3$M03Q<#n8="sXl365PM.*b1Er/c0'cT8+9gH6\Bh*@.TCB+)6/$V+%4%cNXb`llqC-b>9(#"IF+$:_gHr><A+GQ5::9i"g88G6EoaL05PLERY&g@V0!_0aF_'/USb(&R.JdTaGB4=&;E6(iDi[^QEM+:_bpE%X1/<iL>1m\o+g$m<5m,@.W,8eEMM6"8[f=M$*)o!E!:FgNT%=a:+dE."BBG_\;FKU#K/47OS[uY1kp[,5"hW3@Rs%$hi3>O#jI'#%73`BMZY_SEL4g:(SeAhK8-n<QNo;]<KX$;1L_pao1q^V[`K4VD'LO(l&(b5B)N>o&kQf6_1Q!@'\ioI#ZQKlpVo)dF\eCD]#((al%/U^k@7RV(,,f1QT#qCXe,\lV<$99uj#FZ'=q-GV.KMX#L71b<ea\#G?[3#g_\PW\X&^S<l'5_F"\tK7h>^R`O&PocRaWjd'<dYNK%65X>9*^rC4=mAhX8=5?R\n\)O_WYJWU*u05'7Qe]jA@1SO2e1f'FA1PP9Ed;M6r%l;g9"5[+jU1-5o<>(eZlPU.>Q4*&Z3"dRVQh%5rs`IL[cc*69RtES>WN[0@)+n\>15[NF8-)>1+,?b(E6<.?%s%M;N0-)8N"<7/'X39"9Pm7^-BZ2T2,)?,!NZE*J5p/eLR9-_*"s%&Whd181fRbBVT#+4"]JO';3S-V*cZD.JENKZ56_:[%Xcs9sc'r'lqKh8!/T0DfFG#Or,j4p>+G=b(`qZdg"KX59kbKOUu&E3m]!I%"Hk2]?p')f+VQ"EWELa(,W/DOOD%-HGo9qN%8dCf&;LXZW$%#CM[0s[B+WCqTcD/68k__&4SL7U,f?E!$_W:u&Suj`]Hd,EWC)'2%)u$3NW!&2Y9fmedbsmFWYp'l1Tb1),OeGXV8:ri-qEQ,(B@B#`\Ftnkjb6#mnd,bRctSLXpE?#71dZfFJ7Zc2.1#SUm_l>mpp^iq%HQ:ss0pp3!]Y)UcZim&f\nl>Q\AZEOn>oTt_*\EP51?/:&;W_%5,)OtZg%,!a))">Yqur?6m_7mk0P7C=mpa-mrP36.j=VIk?ARX%p"0Pp5V3<7Z8fkNVX;6RI1Gj3PHeH0T!BIlULT3%0*m`72K9)WKD_H#8ccj]O-"?7M93#sNmGrfPY4_7g)f-/cZDJrnf2V:KSEZL%-bXKTh2o*0jE?b\;jWRc*[a&,a:Rq*X)]%%*.80N>*;'OJ^b>-$l8@.B;6!l1M1Ha0g;/J''jUN&-lXP(:uL,&r[6ka&B!cMc]8U%/D`m_%9^$j1&uXSF@.6q-/eKKa&Z[1q8(m466;9L`Cn@[Ms"UR(_,Ms]<Ih-8^g+UjnN);RPl6=a6$;'bT&N"IJ1H\&Qn,,@e2]?%Q=5A@`o'Rhkoq$KEMo'EKC/C55m&Ha'3iPETo)&Zi/5hm5uiES`H7rdCDm3gbT*],(-iV<#?G2F`V-md:^+1U/#X\kMAu/>r>m%S%Jh"86>eqFHA%3QLJ79C?"BBG_\;FKUA%2V7T9&l^&lcipi@8^G<H/8@GaOkO>Cn?7"^Jka6"@DFb]3!c*C3]\*3S9:ckpY]X"sp'%"BBG_\;FKU#K3b>l@!X_m&LAWP[,YaF^/Sr)G57@8:-Q4#0[(f'm*O57ur_co)cX,/t@(.<u#$SF4P?)1?9rVbZQ;"EWK6Fgf]u:%P-^/f)18#IbTnZ0:??83bZQ<9a*5sqG4H[Ee5m.hC"\18lF:cJjf-hJ_Mt4o<ut4;%ooR-JNcm_$q%;tb'eE<35N(50OGj\dC-m"%mITl;5WoaN./W91\k.p_QLt!q@H=HkN;9Z_Y9%(0QHSZElDrs?+/t56q<Ia21>uLE?QGejVs^@)aW,9Qni$*i-!4^*7mQ%6,=iZq%bZ>%:ccm`oWag)O^+.H6F_nM2f99?=!Cg/R'N[GRE]f#U:<92JUdnPJkR1H4-_eMlD<@l(\G<s<[W+jU-2Zu;r",kIl#EpFZO0bS%H,>I-UF5sQn;Q!!>MRu@>*EH1@_X&c6f&N!K;UaUKg*AflG@%EBWu33Z1!EV:M!8:H)mD!)OpQshTs6*'`77Q;[m?/OHB8XD+0,b%['[Q6<HV=_9g5CSe_tp<?NTHmb"JurFa.gp7(c]%?eE(o$_3[^=:nA.;u]VNO1/["o`5Lr*@i>.hDB@SmN)$]qRSc?XFFa9;l#OO%9cZ=V;F#"C$3?F=@&9iDcX5_r8KH88U<Q26qKgAIL>$RuS^%>-b5.QF.I6<A]<]0-E@L5OQ?/,S\1rb5=i^*/HQ528Z1jV>RG1-l%kbbGF#(+"YL,kfG.I.q]I<+075-:nr2BSEfXaf*fa1K%bH4Sl?od`baDU[/qFOSE1+Yp_8e*lLtQ[bY%'++qn(&Ok@!;_`q$3du?%$>)`Clgh61rAfGErV,bWf:=hr]Qq5bLouYS>;PX0H3GS[N:@M96L3NVmjBqep@F\)aVo*gj8R7RQ0[1olu2hX_^G)[ogV,Zhk'LF%h6mdKV8.fBlHLpQ-3Z:ApZo"4cApcDT(m0jKtbboApK>`mY0N\%fANb7.53']&9X]\tcaF-[qP3TeCJ^i]sKHF"d/LGMr5+-[MC(%QiD3@Y/uFTk+;?bmY/C!>ufq_AaY9/k77DRpI&BN7Rs3LD=3,7k77DRpI+Ik_kq$HZ-BtU\%*l8RsUk/`jp:FkJ'1S^K&InH9NF^%MdB`O1npj?aQ6\(EfXs*<VtWoaAhRuF3_GkV<%[df1]j<W.,m)U<mr1q4mb3#q]d[Q^._QV;R]+_`=o^e>23qg#9IM,mRf\pK5T>%Ua?^Ib5jL/a+S!-^eL<Of()!#ZBjCp?W7iOVpI4da$HQeFPMN&JN<.EC+bK(k9rJ13Y"uQaPKC`BU:T!*+0pV/KG(0'Gq6!#7VXm%,W9cb?nTC)kr<E=F:2ggACYe%3'0%[TFD;ELX;8@UuLkUBc;E%j7%2O'$=oeJRt'r]*G_G4'JTNU#Y(+7l]D&ib3H9PD[79=0>#s%<#hP^\?W"m/0^\S1%!_5D(6#7C>"n,7tM+Bfj-WK0[oYlEBl]Rr1W+,RS%44)n!U5,I29TM?E@X67/%Z6gTW?-IQllCtl$#$lt+!%Z%4lVS2UTMGY@a;+&GTs>`r7ah)Z%l`,(ec*J[o^EhrS)FlCKh&BRah\4:+pqoFGhh5EAWW<(i!eC^!*dDn*1VkJ[TNL:Mcq[M:/%I=\*QD"C@IB7'3HjD=9EPoP7rGn4ZI\O5+Rfkap'7QrOs85:al$_HKm>0@KmQ?Z%=6'ou/C,nA!,FF9t#VCh<eYpM8/a*"#5Mkf,%f6d"aje1F4LiuG7g!QYBTYu/5OPi(UdUq@[q?d*hQ1hh$HZH51_OSjmr^cZfaB.sN;Zm:Ya5@-p:cj2;H;%dY<sGi*O`Xq1CT=^k%8%2a`fClN2i&bal+Ql:('#c@hmll66UV5r-(r(5W;=G-fQbLF*Z`]jk*&/JU\h.+rP]3"\Id?+AXJsNa?=g1kEE7QrNk7AJ_=JOY%9J?&nT0-">9cn)Vq`EqW'c0nS0([[.XYl\+;DF)p=&mRA2Lj+,k?k\4q8ZZ$ISG`V"%Bll];KsYNap;H2E*+oqLU1d%mua?)Fu:e%r`H]A5U49m*uSD$:jkWi:/o%=oOKWOFa`h64RXE$ks.JO3hra:92M$XB;?*#_N0KRB@.-3SQI0lT$R,nKSqj*VZ@/mo;\A$,;LHt%gb#Y"fNBGb:@[LP$n$_189HPSRJ7]RB2=R.NO@("SsFct\MbXHWSoG@8$;'glMd)2joG?AaQeSME$c]@+o<$d`AY#Nm1h+e-tm)g%W8[>\U(A,MKPd<JIsna:H+/nlqP1Ue6jrtpCiYu!\saDAfI6O<F'atATiM>%nlbfTS#!M5)\eo#h$PkJ/&%0ZZ5:F<.YAh'ah3oC%-H+8K8g7&'ja+ne3;i)rk':Xd=artC6LAnOK,o)O@S0Lt::9Pt3Hlj]R.ajaDXKm+?3a6D8#\Mp6ac*sgquLYG:ZtFqp.H4EL-ku%c#Q)EkSt:5SMEQX%fJY@&5*P:IAGr]gS9=tk@)YT]=]2'0!p+tHb@le=idH?Ds0p+T(l"\?Kb\*7OR-[Hr[=.oJZH^Df[T(4u^V4%k>sV9No&oiphfGQ^<A_r"`JH8oKIKWpUMYtT,Z(`rYiA]UURc]I[b\X06>`)iqq4=][(Eh5&l*+o<&Y!IH#t;B+Fi'ogJ7i?V&..%Y:mS_\%*l8DjE-*Qb!.hp(soRIqss^)uX]GqdqhaDpJ==^Zbm"aH#ZDoJEGU@5jO31rIS8l"Qq2-p(.!88qW3j)00Piqgp7cDHlM%4<Vf\r8TRZB3LlbFL+(Q^"=seBmIRcf/\iSZomm+;6Y,1Slc#$ROi,u6=@W'C6[gobUE,>oX*!$b-VrU4aL>V2s;nUI89(aD,4Zm%6X-uHUg'G0p93,/*jJk[m0R[@g@KaRLj6dJHQ"S96s6a.H\2!\Kn),:'=u7X@U6F?-T2'LVs.p2BG.7\:ZI>&s(-Q2YbdmCE8$l`%V7F:F4lI8KUbGKsdh>GWBU#qgiO*IB5IN^0!$H#$:YX?#AW*JVM9?PA->\']+5Tc+c1pp9n52Pt\+'b*%4Mp[D,OQl[2Yb%rOkY@%'+89?`htOQ?1-8kAB\@gPHsk<WI4H;'>Q$6V;;!$X?D>h:[8\,o2d1Jg\S:]ICg7SX\X2!6VaNOkrX_dh@fh>#;iMX=;-hiApn-[%FJq"(5)m!nm''1j90^m,_t\mJ.M8tj##81@[O5m;NOnZ/p&srR,qYrc,G(Z!M([PS(:GmP!iPF"c*qLblcHd+BtiR^4n22AX\-IU%*&c7ZPB3pR+5*Afq(b*A[F<pQ0KkO&ULZjmg!W6UV'0Mug9Bt.-b)iGR&u+$gnpuf]DQo_oj@1(]BSQP;b,S9:E-lJRBC$McL;>"%bY6pWrIfd??V(1!Ti%c#iK[\oN?u'E(0=ONFK$*fbJ^PSTKQ`hY7g*8@$<.Q$-`7o$tolH,=[YN'E<;;SHm%h+Hf,2aciF(,F3X[%S)bGWo8r>04;JO24e#hLmRV@0-SU;n6Xd\CekL7`9@1]d..$BTe\:J(<*F4=0+gm&KI'$c0#14P->b:L?W\MS7Cj=;,44M2X]VU,%-Ch,]Q1pEom;UU+JQFB@/@V&8<e_Fga]ZK1Vhf"O&\jdp-if_;?M*jaa'7mS]RsRBL<2j+32ruJ`.+i,0,[Y%?MBg]53!j.::MMD%e/eX"C8-U)QoR0hQN/l/p%uf\cY0Od]SdBjSu!.?5,9T8UWsOkk/C!2_hR7<)Y9;(]fDgbHH;)/Q2&RKh6T&)hg!@e!mua_L1s]a%RG?nLeGFW0Fq"h9SC+(EM)3FL)SfHAhP/3kEF^I@$C%ErCPH[\!rn(icXG?0-BCXcFtd/n?Qu;:b9:I(Mj0R,.`p/6DS028b8ou6%Q>YLB4n`g!/pqEY=!kE5>7,i-WUdD&rA>#i(MEPZjut+Bq(R"cnp'$K44)Ti\'`rWhaVO*UPrPsm:G]N?g$98Dfaf*DfasYD^iBD%*U)hEgZWMBgZWMBX3._qT0(EO\[Tu@gpb[HD?M.<_Xob\6so*58$BJlU\D;\Wh[4%/b%N=F6l*\2KkQKA_!Wg:E8TabhM>ulJ(NN%m]M:?068*22YS-'cb5Crk0C3b^=)^C?g$98Dfaf*J!rIEjBjiiSB6h5e'!hZh`K3:\[Tu@Hf%;2F#Toc*O"cLkj.$Yk\]bBk\Y3Z%FM#978YE8.DkjePDkjePg!K#1?'@N\kMA[HF5KIUF#UV-?f*rlDf`,0qqV)4D/Mm:UV'9;n9*kNG+3^u]?b7Ek[e4uhe$2ipSmo7%>Dq,93_"RdH_R\Z^MWV3q`]=u)\nl@J">?X\%1,SII;OUVn(h]rcN;&RJ]$'FbB:>r[.J&pGR>En([&CDRa:TZ26_/TW`ETUURdP%UURdLZQcj&/F7N93HCU3)nF5H@/7mICD#dr]\DXek1f*:DZ&+2\\eJrSU$4N-Jlf2oCcO@-Tct<k+-#VH+1&*4(S]c0BYF4f6Q!#%D;K^-5&ZYRk%/"she$2ipSmo7T,L)C\NdIP^0C6mg`P6WhrgSDn?8:-T#(G&g33Mrgi!&)=)2Z?2%/bR]feBkfu6CAifPmd1\K3F%XJj/n?F@?3^`&p\04>`(5TW-%XV[5"hN.mtphM])V15P^ONL>D0XS0$GsM;tJ8(h7#9n2e`I)FN#ra\><Vb^WL7'_^Ym:BfnRS-&%$Uk?,Z/4-fm:%*!XKPCDXUm/\mMTEg:dFs<YEQRrpP(4Q[W9)jBC5<B$bb2qO#-LT2]lpA`+Kmgm8.4g^NhmR(BY/#m#d_'<e6O[%NnEB4$W^ZC<]:A>OuotrT%FJ`c3]ft"NGJcfE?,98!UUt]6,-uk5m2>*Z-n?Wt/$$CpQYWB+4)TG,o@mJ/;/"$]B;m/li=sjX\@%%./ra'7gUZW$<6fW)1:Gqanh0lopnB[9Q^Nm:,_<'mM,C)fQ.jgoa4@A`(XdC\\4&70a2'%W/?krSfJiM`t]<FiG2Ko<s1f/eQ3"q%dfLI9PFf#p8Mr'(Y;A<BbQfd)Ja)_7oFrO=#b^qe`2B2CU3N9C,]"+/`FL%)k#G&:S<X_60E*I.jf3pXG+>fQlL=q_2)[.!DP\tr%K&FsW8]Hugm%Hmp:JOjV,?\OBnr.BS9ENYY`j:#_2"4cJk*KU)<ab#3hoEdA;)YZARM]h^/R-')dc&0d7BLZ-ooBhbZ%(^BSVPr9%mbkpcQng2ZJt*c38VL<8g&o9kVAcY/L<(&@.4+9pc\ieQE!XeP_sjIYiT"*>&(2cId_Thf]?!=GV[rKbH[*B[9*CdE_URGE_EN8T%+TjbJFOUc+'J_r?oPkV,X$%4,?A<9NF;B;`(#/T'QkDs<@BEd"4AdH2kI+XTE.a'=Nbc@_$qIa)^L@&Qi6;ou0%(&='Yg3/Iai6N%r;<?HhRZur77;S>+1Lk&rjCn60"`RMUKZ+k]O6/X>o1<,0!EokA,,&p%efQag1D:8_bApg[W!10S;/b^CL"RZ75);MlF$>R4l([T%Hj)t2jH"a2h]2!fq@\6t`&<Y\@o]dA/CI<,)sN6LVg?4dBYqJhUF3pV4L/=Nk";A=;)_9-Vf&4V@IiCU&E!=2'uXguUZr$kZS>[O%8h.<;]V/"Z^Vo9'CQIB#-_:#r2YtAU58Nn(6Oc0^/"_qdjJR890l#EcT0%4%"]c,<$UdmKF"T#;b'&eP09f>(J9&40R@3%XB/%tY%aOPkY)I;,+NNRR,i?cfdSogNY?bFnHLMTcL?QYhY3PG4)`C`7di0#9bZkL-Aq/.d(M_sr,TkqmVX>]T9PakBoT-2R=n^lHZO=0mI%6XqLYhX9h[1`Alf^NF.98e9n;Qb&lfLjE?@6hP;*;n1lm-%i7f*WQ?k]ata#=Bn[`G@58-IWuq#\UK*<-/YNb*"a-/(15aY`8[)7%$\X\m%803_HQOYH\#-'.^+!$9S+"dhKs9n0,Mp#!?UKc8M`uEV]WHHX:rn&o8_7W`O8Hd5rHc*:T?pqM6Q]oJD9$g92fp:'kG=$<%9B.8.&]U;c5G?O2I3,:Z47[DWOPLG@o)4c%ZK9/YC?D40BM3p(KdE]?bk6N/2jZ,T"'O@W4M#:$0AQ[@]ADGPORj;ADn;"BW+g$2%eiZ/L#Dhufajo_kl;mdeOJpG=)),TkbQn@FAD:^nQUPAV.e:REPRI__dQVY^Z[r&Z+m\7&ijSt4glnZrh.856j:HbVPuN@"Rbc(:%3R!C/k$m`XF?&"bfZ5TYS^7Ys11<?lO'iR`W=U-i-[.$)QVf*r/BuFnmQ9Q:C1jUAOk%-8aVVR4m^1`;a5?"6T3r$)5r(XX,PUe'%+i6P%fJ$PL.COJp_^D#"Q&jncQO*>?1`pWBG*QBh%<+-srE!cL`<:L'E>33ZOslrY9#t".0,%h)->%R7])QX._"H\mCS(&o[4trc%c#&)nBIb9LV)Re<CH[4[HL[T-Uc95tNP;fU>N'To$X<TnYs,ac)'lI1<*$\+)`lbIK'.amOV/1IKWe`Y!O&u-`+utr1kdF1Q9WaV%,l)OR<9045[;Qn3%=PorpQ<cb3-pK#X18JY)tVHWniad1S_d[%6J1iZ=`dEgmktFpFa]F-5_pIt%$0YE8'Mb<jRV^$G?"-X904f#%3k3KDX2O[WW#O6I48N2qOs@0/Hr@=u%plcCI%,a/YpB/NFIV2V1&Ce[oNQaWIFh9Y0=jo9[(5J]O?\Di=a&uhW'4UsF2r&sZk'Do%'t@l+7="Zc.brm<N*A3O31/&mK_;3@Se+!)EDPG7"V'Rt[T'WOATPurH7IJ>)F]4.=]DRQL$W+\#D527S0p<OSV8VqnfV!j)dio.%-WZ8Fj$k&Q\QQ;=C]j$dl3.<lAhrWj7\>Ne*GBZ-+S)W%c#blo0L6R.lBm8KJ]:/A`Ekb54JiA:<.,05KQhauqK*clL!nFu,c[h&%s8"_$9-X$G1`SWMc13b9O/m^nhNH!t^f'/tKTBQB/.(BM3#T:h-61)4%*(f#F'be='XbQ,26]3IotZf[8$]^ha'EtQ&?fo5HdP!=%_F!e2<1fA4iC,P7$HdF@@q6&M'f2G-*Q5*eIW@"hp*"Xu!:_'uVe)HS-Y$U`hi9iK^r7Yh..,0Gd&.QnkVJgs'2j<#m2thTOuu=I%=-"TS9]VIE7(Ci(Y1B=Bf3Y^)>u6[u)oVFE*4#GO+katf4n#:'$/hU3=CD5hO\]F-iW8,k?t7d=CJp(kWK:io+jsU2kspkol>Z>\%@V=NM<?)np3&YrfULm/+Djf-'FL(Auq0C,6]TUQ=\$OP9<;l#0Ze;u#9GJ:mZ#NroDM1XZ"bc*9k>!ElI2dC1OY:@BK`mLK\)Fk8%l6Upa*2Wo33=t^\@"&N0"ie><5`1Kf8>h-_Ld01IYCbgf2M;./m!a0mT1>p;YthorJ%S$L4b6a63/85U?l,Tb3\$(0q2G&Kas58:%R-FFb,h8Kb>KgnBE,5`j@5DtK/G4'5'S?[udQe$'H,-I7M?$muobO1P6X-D.[s_e.MB%J-jp>GI&EcP5Io1S<:2C<43slXJENkl0%acE-I"Dk%3c&%r/k6!nn`RQF)SsRZV?UCC*39Emo)Sd3+.4WnX5b.NC3LVa'/)lo$M7"B5\c]-tKbu0h1I`F$0nQ?\GpO1L[u[=M%m\<Zq.c-Vpqq%N!OFAGaj&"=MoM^(W"f7Y;(n/@'G+5gmUF";&AAQ&!4H@OH=>G^l4(]AU57SB/BY-*!fqt=nK$8PDi-%-f<B#nE%>ERZ&_6iEgEnN,c-gmtIFa\B%nL1\-R;uG'Rcom;Td=KuLjX*8/HB$p-Kn4K`$[!X)q^FBTa=6\<\p3N:tU18$gD]4cdOL.@-U8n%9R_^s0*gue,uU8Cm\D3Op.Nr;q&j8N!Ta>,VEfFP8^Zc3f6b0lKo,nd2U&[5I-(U8o](s`QcYbS5bc91knDcI"^Y>#YT-<nrda\J%^q%_Z('X#;B2%g-jK=Od$>[gOe(UK*]C3T2g97u$n-S36N>W#=NYDifBMlNr<-^5`[RH/a;'g:)i>`P!Ht$g2Gg]^1pkWQ_L=jC>%_BOmW!CH=jF=D'k$<pcXkrpl78Y'HES.T"q68tLlLS'QQl^Vn8R.#KY0aD&Q__j,N#u5F[feiejZhUPI*qW)-PnsSiWo3M2<i(rS%f*`V+P]OjEWu/hqZ5+-_:(_'di`a5mZHj:XC^e('>eSt58:4g9(o;>([]`iTH;*h$V,Q.R<s&)jD.,Xr:$TAuD<Sr93eo_K0EWV@%!`UQqT9LkY<spUDpiVL0]Kc]20#0e7\6p;VY8A!As*CBE^Gi`t-+Q4C-+Z_=5"CI1MBZA'g=bVBbfmqQW1ngF=aJ6[h6k2_g$S:L%$E5\u511leRSd.$0Di(a^%7DVb41dC`9&nY02"cX@4cBRUH;*Rd4$MtP6BG"95',>QT^f`e1"$]NWl;;!IW!\"/eeZ!POLD*mXa(%]KbZ8-a!"P8Pf,_]bkTChqbU;F+No\3en#NN;_c05$[?npQ:6s3bcHC)Gm:6+'ng(mFoJ_273R!X!^)c[Wuhg&Y_kac3]0MB6:=G%](G%AX;MWc25iT+Iu8^r-r^7:Qm-5q`.97]*`hrZ6A@"uJ4hYYP+5iV-]E^0ScMLp0qJrEQr/HDaO9Zb*t&mA=*]#\&@"XX,8OM&%A&o<ulB?$18"S*DZ71[I(R1b/QsNoXKu-H%@M5cGjY01S=)_()ko&>S&ruVl'J4<>&UV87Q?<Ca8r/mT6.ENl=,\4<^RjXf@a#bD%V7W<UI`/Qcp!$1*Y^_)p@RaTJo\j;#1\OdBP!@]+lI8bFBH\**h;DI-hph"#21-dV?gP`+lf>^LIH9@YN7*ukZ'/0<pc^,:qr)'c%hQc_'P/j-mm!<(0`<qN1S>)YeLYDiKdC;FaZ?hM?J!)2'LPO-d'ZNVcLBoI@YlWO<'Y[B,k>Yqp["?*2)pP3tA:qp,M*[:mB=LQ\%OhDOAM)YT22RKMDi$RIUWq>20kaDJlXAchsJ\*c2rEVX];u]=Z$Ld^fQHmS+q10k+@*16heE@-la33-<[@;J-L$DW5S*i&3,<gQ#%)Tkp"Tq2TCTkGIlkQ_;LRMk)uj0+AX:]&3H4$$h?Af!a+BP338laPE8jRnPW:5@t._N`\QI]-:/JS7Pqdi@"ifH?TJ7!8(<h^(ZU%32bHuNh)rj?SD%4Rn'LI$nYa7ou[FIP@IZ_(;AfO%tQ</=^#rkqlEk`33K0#PCZ^O/HF3X$EU:Q?S,1[^7mGHe4]1NF'bm@b'^$/%QA<SmYT@A$gaJ%e_U9%VT"I@;&843N.rY'WSYD>)'ap0K;t5Ue7P-RK^%QCuMV#5:8lg=_f%2`Ld;9Ma,`%al9cfaCm=r4K1-lR:%ji]>i)@JLH)HiRsb6c_ZmCBUia^eL[E76c&nR1X'4^Id^hkK*s^grtu8t:=XW:Cs[c9=cVl2^ocPpfOEMbb%,O\u\.7--i<kQ"od%RMTgII(5W'2"]=.&h,4t%&Wi@oO?J(dnkj#O*92=5d&.#$^D]_AZ"Pj:&.?SOib!:2'L.+dIrqjNgZ?5!;-['.Q8%q"]Ua8?sf[q%0mDbBh')*A48+Nn`o!ASo0PlCbZ;AbCrbmL0@\g=0I&@i6-ZNq!Pis2[0JD$\/b\H@i(COY3B(dAP[=dVE%ApK70tK>jF6r2qo'D%PZeFa;URDW"):sFqetTDU;J.!'_6r,W`4n9gcg!=iA4:H-s/Fm'-MIC`TWgPb`5pY"'eg;$H"su<g!q+l[^'XT0,a5gqho:0Z;2E%\pOl=(dB^'4jfKgasr<<)nkNci6ejo^kPtGjDYklCD\Go0h%7RM]/k1-H)^qNSR_F]Wb&cLS^mFjsbI]eEA^mbA(m._bArkWV]4l%"`tWXmO_D?=[%/M=U4+&Z[[k/l>R1B=7*m<)\F;G^4`IgS&do$k`K-Z.Vi+H];Knj1W@efCD?VqPt9Di]%!Y^BU`l]1.GY/?!]BI%+o*`+4PgDQl2gr0/+\(ib-'MrYQ5_b1:ln>F!&briTomDT2<0(%dcgDe/l:/^gtp`kTjci:sUFp+_!,mHX6gg_\[qWM1ojm9=,AP%oBBA%b%34)8R]R5h`uOj7Or$X2VF64!sD'c&m1Q$?eh@rBH9AfDDHn?)0sK3s/`f95st#Ar8U$qdi^>ElljsnDac4<rUl&qnU%<-%Z7[aBII*9QBYLZQ@/P.j*PQs_;l&Vds0InW46H3\W!)9N]BC@Gr)_LhNc'2UUQS;/kUH6"&8!9AI4K<K1K]8,DJogBnWnQ''*ip+%87q;:`_BU9E2BUd!ZJ8:\1ZRAEa'i"6!:2:qoE65"=GIaCSs.rT3P<2O@i+.@Mp4)Eq=7XcTB-c$i`97*nAn'j+pYmV8KdkdLFgR%mT[D9bpI2U-.']Ri=j$GqggM7ip["d,NhC67UDY?MDnNcG\G3_O$5\]/=R*jdsJ6d,88]XA&I*>F.4X9eF2/iGdmE'>d-!%-(ci<%&*e1p)h+=FBaJjV`t!MW;&AQ2F#X:Z8XR/aB/io,dtYM@[?i>.m:_fl<YmP[8#*0HWd>GhLYop[BT.WSc)Am>qn*?jr:[KU*3+Yu%MTgML<FD3\96Dh[A_5Sb;['seQ-&s(AJN-Q[2FmA.=8,(.-u5/Hunb/f9]BPo\1R=hm-&AdZMSWW9i9O:e7GX!r))e8)OK\?$^p$%f_^?i1SeA2jl@AjJ'7SqrIk0E-:%"YJp.3gr",m>E>/<Iakb;&l5&u#'=+Tl\Utjd:9h_DFd1mLO1KA[iM"MdjDIMQWBj:\NMR,8%Z8P'Ob[WPS$M7/#\M'YM\tG<<C[<4HY'%)/V\!*_p9V/.8P8tLhkR2pU`8PNXJ8dS\\/p)]64.bO/'XsNS`63Y310([[qEa7<Lbr%7hd:_($H``'QeAU?k)BopBcP#I+2Ol0uI30('/O?,KfqToGMelCnDm$;u2$a=+%^[[SQ*?,'2A$g/e>Y^?K25Q9">%X/c!"4=*^a%0L/7J!HtIUF&fm;6dHXQcs<CO0//-QYk#1?r_9=7;WF4\'f_qFk8in=L(($G)<"XD7]D,(ii9g[T+p(78eD%MrX!DbSrU&p%!S)r%;MkN/%YP\o3=#4t?uE8.%]c1\$>c4j7(jX2S(cbBGN'pE<_beM/l(aV#3Jf`gIT<ta04%_Tb"WejJ,)Ll.pA,?h3-_dJNVlmO$Rl%P#!S_r8ZoPr`h8M-"+EX6169\g)UKtSZ*CHnE<MdU=A8c/%V3+iV0e*p$TPIm@=-aagY9Bqa+J*XMq0%<\Q/%dq_6t9WtT[?t]k8%lFC@$[H30ljE#)^cF5SL0Yj^R1r9QEf"$WC,n9D'9sf8WOFEs;Lskr*A+^3/HD(sI$.3r&k_T5:_qbZ=A%R@QCUJ?W,PSV6Q[!.X%YmOQ5l#O7`p3J/!ROB2JC;DDYf&ITU"'EF1Qj]Jde]RMt$IlZh6s)KT/]F=n/"s#Dqdk&JG8hc/4Ie;o:l3I7/%_jg2^i=;P>"ns%QKc[0C$Ck^rjAigX:qc5BH'ub9]I.9dEir*,KQPq[*<eGLH4%(169=ml&Eue;NKq]fpl"fb-6h![Een1M&lDjpQ5_:+6M8E)MHp^%=$3>*D3eIZlo#U--fYu]DU4sp^L<E-dm"<D3$%0Om#(TGX':'drf=Ni_Uf$7G1^&QMN!lF*H"66lQ,!;e7_Q!8mupLGnh4aF3ZEu%9nYCXZf65@XTm5@Bo3)WF:"Xu@+0D2>Ag\oeI/Q%5O:gZ"gb/t8RY[#=#jcCk."D[hR.Z$"i]qn]39aKO@8+6=$$QJF&.h]A:cn_%=Jt)>7[nuc#cV>WI':N(AOrhi)Q]Q'%:Fm<29@*gNOBTc(kXn?q=scDb8I6/?%Sa4F59;$j?+\SFL`cOO4NO_i8,$_-2-.Hi-JgD%:VK\BL\jh,?Q[YA$V,3[#9?du$]o)F(:Q?'@]?7=<jq%DeCSb+]9[qfl/b+57284\don@%51P%QdkfV/_KQSc<BijHXu"`9fI69*%f5uZVok^sIZFjr;*b#^g@I,6V3Rp$hW?6eC]MNAP$Imu<+-P$+gBhXMB.)=C#Q*(B[aBDu(+^*\&8cA'j2^uI'S^]s\;tG6;$j^i%HfE?$*]f#dl"etC3ei(Qga_pF&\Z)MCu7CYK]*\\oL7pqEg2*R%-'@;9`n#,63mZ7+$h296k_WKeW'@rFXe,Ba"CX/rq/Ua)ht!Q%mm?8hN1IY@,mlt@Btf#c3CgBnTEZ$FD0tsp1'ltrUg]T,8'E6)`1pgMPL%2,O1*5jQ;9-AF[D3PL*[]8"IOet-n6;P1Wpf5]27R/%F?R40#:t\!#(=d"9Kif4K'^E`!E)l+OcfH]EF@9'WA7>fFI'm*lYOC$R%e=%Qn^Q!R^7cG/UGt4Pe6jPqCtnMT(4[o0:hj"B/C*t%X24;i?l!,a5D"?Q,%6OG*V73Ikq@YgP=I@sKF5Sah:TGpYRF*-\'cZ3.c^Z1Du1r#g+sPn5?<h'&t0O412jNM9%7b2fXd%1W11>-%6FWAOc7(mPC-E`[m'p>k?+J(5U\rhVhnu"GL$7&\J#XJJLcp&c\_kg@DjRVcdocA'C>tH6lr%J'VqJUE=q%ef))Q[caU#(,3HOhW%RZ3D:'q$&iT$83tjD2'B5\j?g`Jbuj6nVVu_H!&K_2E_u4G_6HQLM\*-;RK5+tkreaVu!p.`HBHH($uX,PQgiRZdp.&oG3ULI8"1%<K4\3;kE:.b,!cK6F&R\X5up;"EM&`H>u!>]&6gZ._UOlQ'*Tjj_B7W]s->L)Vt9#cTo+bO.Y2947:!;V2f,H:+qcAB%4#pNki;F%!3&#!4k(SoooIDNZ89I\K-ODo]RR%Ye,7GKJK_5JW4[KE1@3C?6uAlfd4]oBBQ\5j0UG[Kcr`)O5h/daN*F>:,8";A"l1Lj[@M#L%G_>E;[V#;bZDPo+'LY7LK*\k+HBfB'V=X`p6Gig*j0HF\,f($EHtZIbKmlq4r4.T.M':_^CA-GHBZ@r@<>s-QQ@]iC8M(uMm%Lgg%Vj%#![RN1'10T4;CAEo,dc8'6F_bW]m.2C#Wu]NKq;t/e0,4G2HOdbRTYIF!)`sZV0*-95h9:$Mh+W^)^IuQ0,J'9WY8WbR#BVb%%?F)r7HZ[j\^VB4b'S1f?F:P/Zi%9iP4<DcAe3q')arh2$Z?P\7.^2>H=J?f@=PV_H8iMaOe!F-p"q+mTpXX)dY&-[Ks!XD34rc,a%:n3l<]Wu2BfANLNphT$4L=C7NGg;RMb;UtBc8hr=i`#CjVC"6L3WhF()YtgfZ7'=$6apX`QLd99ZCKh!?WK(07>!K&I%Up7Er"i9%9kYl2]PAkl0HgER#AId!9YD`O*'@Qk=_H77Kq=3[""OYY(b5/[F=.`3q7A#?V-"FB^,<=.8!O1C@+nEuD,hfI<!G_bJBHeJB!sJ!%MbZ&lqI4scbJ-\bj_M/C$W'En^n/0,rH&6R!ja6d0.?p<"53'0D)/Q=I#m,"o*pRd8FQ\gk]YgXTHa;&/Ct#hZ(k*RM/gNFVV`,5%TkSM9(u?%%($sJ]O+aN2j'>f5#U'^.<<e:DbAIJ_'h.UU>Yc-U@ZW"f;cVU=@1l"?_:=bJga9qS'7:.oZj?c6o'YH`8b$;#-t?B>%_$`uG)fnJ;(h%bkD%O*\(_=`J4C-eL0-nk*q_`I[S%:7DOEA:A;aeY>@S7emZC2=*<MpE^N[aqL,C9m]:<%jH3rk3+C3XQK_$'Cb%KP0sXo4IGq'c;F[$@;Y7YY7B;7*Z][/PhN^bd2_bFA2SNI1q.1mj'TTgju<?O@(SDTbNH;31i!md08UhBN-<-HGHdS`K'>T2,TSD%jHYVc*.p!2X9Qc"DVrS5nWrCR5+kar$B%7LP3etp'q.WZd0/6"Z6P$1aH+YJ'KqJ5gl[/5k8Zj4)_&=Tb`)(KfQQDNlIeZX5r@aa%bfo8^+f9_V=?i45G&1O#M4u][W8m&h7[0Q-cMOrQVJ3cS?ZOMN)'l+`"B[ceR(P//i+,q2l=o!4oNjON9UAO`-oDsi9p=R;pIMhI%JMA:g?_Un'm.S[39bJqtk>X\OMob`\DmoN4Q2nW_TTla(=B-s2\>5;cn=DFMCnb9'eGu`o,DsQ_p%8,i\HIs44J]cu'fN09"-/CZ%?3![8O2+p?Qd5^h%"ZeX&SJpnds:XikSN\K<]h:4$qZlI#E=ATHWO@ZKCs$NguF;_i'@6u1[/u12$V]Y<"hf7r\7dN=N;W4%!#D]%Q>JY>U\f)G6$F4-FR];$"K372&"ueh%\c`+%om&\68cbl_LS]t)R@#K`4TqlF27lB1*f.>YdlC>Htl5AAU!o13loHnYJSe*Y->nN%9jHqO&mJcYY[73IW*3VK'gFAo2Atj`P+q#E02sZ1`$g&rm!*,+7#em$<oB'Hr-9[JX)g"Fj,:6Q#;@HV;FZiGrP[nnpTFs_><HhB%9AitrVX<JaQZ41LqFA=plcR>*cW+.nL8D#!a_AW6LrCS4>+66DIp5e)38[4Me<9O^I*)R!8F+BaE<erGO),\0<2#N[fa2C7Q(<2'%(t_M$-.XERE\0mcY]_/?;)V`iC(^C!Jr<q6mb$6pM5JHsF$>@/5T85FhiRTm/^]&r5i^"V8IG6G'9Rc/[!6?8XNb9==6/s$W#umH%EHCBpN@Q]$><Z9&O)3+FiJ`OUX19`CTC!PYN3p;m7gega9\r2Yfi.@l^3UGeQ`A?t1T&>AL:0T"$f+*eHHChT'cr`FI$/8H7/i*+%(c/usl]urECSY^ZC_DtdQ4H/+]dZNOYBZEia^k#i\a@c2P:)ab2Wo21ENt722o3.Co],?4IsjTL=XsdWRXJs`[uLn<$JMdHiqN4u%c<_O[k5Brc"37tTjrqKF^D":d^LT'0ht-R'0rGV*h7iZ-MYO[8QRfqA>O2"El)u?#[kDpbb"F'akg@'RoC`?VHJI_qIE@f`l\Eg@%Qi*Z?Qg:!nR\K_kIee(88aE,4>6_>boX<Ip3T$U@ja;\uf.S+YZQENG`@Z%ne`_%OpdSZ"5I3GLfHoikV%"ZS*\M'4O%_1bcTZBN%3`MLFW0RX5p;I4#kX]ls)nba7Pc0^LG4l_+R=NpBd#E$r56&A*<>ZXYVAT%?V&+<V7dnPACiZYEBnc\bPRh0EALN!#`T?D6&A<1X%"^p#s34k@^JK<7MTBC%a`Pk?.XMl2T>LW0,dDIF_Qgmslg>rnJ8g,aZ1U^2@YmJfcH#_<@?.WoH=D7*%kr+]R^nSjt?iZFc;S^)B%/M?98^.)CJ!L9>gFMlY$$A0q\(pZY5>_%!QPicZQJkULbc"sP7ZX[dS2Xkgf$;?h!mq3R+hU)#W/_,?!5i_j_JhVu]+5j$+4;.<8%Z'Q0"@3t9n/#$@Z75^md%J)<:d;0nm>Y5'b)AiNSI;;%C#[0sJ!s2*X#TskI^tL58I)e-+?f5YqmQOu7UthSIAm='h*V5MCNic<Y%MYQPfQ=jR[E^o$%D'["!92(_sD,c?[O%tnmXt/4W<c,&*X6<3$X)?QZ/dmW")KIh[S*m_phtQs:DY(X"K5pY2Hp./?<drSZqTeUO%*\[%)9s`sWRs@5l^JMpriTeWBN(2Ral;/El[$;),4VVgWBBg:Xh/seV<QB9[N\p$m?^Q/W$&E2lB'PHqPUF243qAcqj*kM'#Z'o8%c=H4c;qY:L7+SM:.+ieQTAml9nP"5PGCGQ+H24`]5EC+`)`q^3d90i/3HD*&X`nr;\Y/-2c7df<]!M!!8DMnoj\e?*4.lDWEH<Oe%>3IiHc_g#lRtDLIeR#aG9@)..A*:oT@[PE[c67_iP4.b-HFJ41:3I,P>g;7U2daqOO<ul23GXlQ4#=WKo])4T^V0eKH\tYaSU8gA%E24HIY"U:t3OP/5[J\1\Y:/&-NC8Tok]cHC+nju^H&'Rb0lJ<U.L^YYmgZnVFF]9pYPAt*Se'\'pNj`r].^d,G2>ARCLc1&S=K2!%@(0'Nj5%,T'`X/:KAtO\-[7TB4dKI/GkZr0e?Qg2].of$aQ217G5:ZGlbD;/;fA[59Hanm<)n8%d&F%8518SMe5]7Be]Bk4dT(m"%V@e?ib(tD8b,09G&Q7[M7d)>XCkp,b;ci3i'Y6`7X#Nq[6lM//PrP+0A]%PdC*P6u]#p7Ro2J`LU_d/N>0n9s18n\M\'&JicM-P:%S8ZbSjW@VVWqMO[>e2?Q4C"['TNEK_3IbcN^Vku5A=_\p*^:6"/e[UkM-sftIfiV1$o%G7I6N>clM*5/bAaFZC]tq"'EG,Ar5g'e%IT.d(?KZ5M^%.af@CS?9ouj#,FP>lfA#O`+n)YSOL2fODn>V'8K&rbQ"&q+V<R:h5orSI$d794aA+*Mq*ML:p]p]qUaWFhEp^u%*%j8u@H$*5CR&u8']J0*DjKmmjuP2k^bh$H]m(+[ju%rUB05ilhf9!+VNi\0g:oKf+*Fs8k@/],7uKLJJ+93neF?U&Pk:bFCJA5s[Y%b$F,p:iYJ^/hP6mFl0B4\W8Z*o?tZ-5Ra$SbIA+rjX91j]NCJ-)i7sG73c51An#dR'MFcFPooMX*D.At^?)jWPDpF\(6.l*YbYC4%eFaUTF`VgqdK?%U^apEM(+:_XXNh2l8&K/^)&;"rMM3HB>J#UYZSMm<dCgtZD-o]Tnmjk1bj%6W"I+:-cdQIm6'$oK6SAkf!1qDs%d?>*-`8HNN%5Hrn$@a-V/I-)td0(mm#nT,96\J@&6^:K^L7^TRW,@io9FrnSi,T_#r3:!-o8"4E8F\tS-H/g#7KZS23i5m'g)Fr(%Gfp1hr#U9[.":4L_nL:(V\J>V=TKN1Id*A-%Q<H79JDA*9oP,7:H7'V,`VnB*8$'HN2_=PY\ZDVM>/`)aoEn]4tph:2k2bM:3J8&%r'A:sR$1BrZ0o2cJAo>R$J3%$Vh37nlTc[sMpG6hMo:WF79EIX,-]9I=9]*kAi!/LGYe&,.qU$f@S`,'eVs%MLqb#b,=A'_N&33g%F#g&ZZeKVjA<:CI9S'Q9'KX'K&`[+-Jj)\cT*C0_a2Q#>$=_&``Ail:Pk'&l5H>q6,'6ia"A>)HU4Ei7X#!r@!)rhM/gsGsq_B$F%ERippIH2-*VjNT\J&('><ok$?Mj0P1e85cLYHXH0Pd,PT=;B)q%^`aoN+QUt#RITQP><9A)YX)5Bg<@BR'+MK)8X?m\Te'g@j[4<%T/Eom,)?Y2qhf$O(O9[9PeG(\jPS;B`ln2o.M=hOe&RJ@j54L.puaTJrHLs;WtQ169:1-#VLY0"`uT;Gc.<tIj&IdpbDJJ<hh[*$%WM5'`iVFprCq<"oKfB`,>OggO!+oVY<fQXid?8&_=^?38(k2W]ZA>YN`=`8QpE?,%k!5I#7s;fs)&rfCb.O=Z>Ah#gHf-*SH3U$i%pl"5@g)qZ`\08fm]s:n\mU3(kkUBC&"cX(.@LQ->VR0H7(>>d'F?]>4=!,4jX,k0K?0m0$VRB[l4r-Z$\M=X[(#T2:liKGMC6h-a%W5Vl%R2X:hN4Kcej;6@O!N(P%NO<5"-Yo8H(nk$4A$q@K)dAYN$Z')K/?]$Jl%UD9:@";7B7>p/qs`u0HpSE&Iq036"cVH>q'44h%8l>$BJ=a)g%Nsku`Dj2`;0froi*hBg=U\GCAZM"7/1)l!j[<#^9@]%3,M#Nk`ED=bG3YsqY8;LB/b,[W*hrX/<mHFLEMnr\q9@5L%fmiP-Mp^@n-'Sa[,ZeTH(k8'M6I%JE8(9S\pCLm"#mX,NlUQ,A!+(EE14V\KWNL=G9SnloZ]UZ%'FQZ])>sCY<2!%I?`L5I/H)<B%dKd%PVD4.Q'ee(L2;Rd&r"dGgMk[c^ZK?&3:BF@9mP]*_1/SE?]nMea"/Pt-Esk=ECG8Q7<&h'sC6?b0&PmL6;<#]W?OTH]PM>RF%]hn?sRjOB2I)d(>iZAD/binj>fhEU):k?RNGRp#)9gQ9H"B.ehiM4*1;h!hk%I*%Kdad?7]<@>o:RMHRYm/i5q0]03>V>Ag'Z\\l%Yj+7Q=\Rd?BqT/&e9.[SQ)f4ALL'1a2,u^uU:l9Q!U`$U8@:2dgK=>!?b"/:/Pe+)),@Q3W<@eA5D72O.2)u4ma7qc[$XBc<p#t-%1q1$J#==`Z*bj4-UAD&BLdp&-`:_a";SK1CY^9`d6>72.M!.B;,AOrh80=JfQdHT&-e$D$SYe?&`cmC;=#$W#l56PD[Y5n#.!6H1%jfHA-=hfOtoigPgU6B(\]l5"34rN"%Cn#8rqoB]-C(I^fVA%aqhs(!/Hq2<KloR$T3BJg6_p4O`]:m33=dnlf4D]]UcW4aCSikVA%4P31\FD7;:`cA,hj4&3Z?4Phd]esgi=^8O%3A,VjW_=fN?A\oY214pXX]e^6\N@Dk2E*L#QCD"ZahQ^)--3f-hS^IF<DjB12bE,P%-i/:X*cFj,.]S#@QQ5bNiG]bh<B]BjdlQJb[C#D-f$D:BmsC*.[bF?]VY>`n7t!cZ)Ta4@o]l=^7YWQ3`Q"&Zb6P-6+_]$X3hnZu%W]1jZQdAR(C/bN?JQsq-8o_UKN5s[!>'0n^+c]tD#UNtNQ]eVKTk#^lb#1")nZqCtC5/et,o#*ChX'N0;gG%P_%PR%1M@XfoBSZ.%m$Lr\jeF?EQ-_;][OOKu[1$B;k)l?K:t/<eeP4;]I$K;-\Op4dXQcQpm+B`CG'&SCPipM8IR][(Z(j*Z'4cBBU>lSC^b#+/d=H)n%Y7"?_leelWi23@eC@'A+\:6+&1LKWH>Zn(]<bO6fWu>17C"lM,9RbTO&-WD>("o-rV\0S/gW1qDo2IQf9TCg4L8(rJTiBBBk-obo%mCVlT7!q=@q<)7j:f?.7cd1^?iJA35@ALN"AI[km.@ToCdNuN;G[1](\2\YPit+O,64`4HNqlnUdmtMc_ti!&7!pa-pl>$Wp_VRn%<W:DO0&+i:F=l\PrB'AonL$AlntNf50Au\PGLZ52CjVlCfC.*<bNCf`ffR,gnOQS[)c7>-V,bAnNG3N//ht>k(a5sBdm(RLlM\.0%5aTAdD,jI?4)&FmVQk*.dYp>rki$WO,P0mhEan$eq/Abu4sdMr[k0r\[:=*MlC)QN/=rV7mu)M,e+r#Uom_BTGujKX)/ONAL>(&N%onp=)1pC"31+$]IM#A;`#qk;eF#d#[;jD>pD"7=Z%BaH+N]lHFQg6nIQnM[BZ`Jc[/9jA\0$&AO++&^,N#7%mDTZUN4Jut1hSk;d%T=gFdX8]MZ1s'+Ta&cbDS-'Lsbm;_CG7KJVE]NT4?CK(03:%k_T6;>0?nT(1W5f[+l(6kg;H+eTrCjqcj^?1je<i.XF>n01hON_r%HA?>WpH,d16:kCJ$i&RlWuQ1<[lMSc`Hlc0.,Y.g%/IIfLV%n0%djZ@-`WVlFGq`+O$0em:7EJr(5AtRefcuZZ>0Ek/*Oh^^jKEe%=4o75'*\^hfht_.c2LR>TW]=fFY,c!Y8A`T>EuA7T`UoUQ$1'1<0:p3\>l4_CV-?eX$<uRaV&D#'deuUSQrN[,09OKPu4l'+5%Zq%:5ibDC2T3R9U<EWEo\G7/a;F'[_Bc=OR)Q&2_?,$?)(@LcD+(%)=:UB8;,J"1VC(<;R&ED+!'@<.[bYjPf#np@uWE3ig?qb&YQ2C%jV>Isq:Ro!@o^2F<^QtOE0Z4-a*3RTd)AK*8=,\J9sC3;2G7bj'EjoK'k1ZGZUjDnfD1j>SnY%5@CaZ*DkJou@]/<rQX(k[=?XAb%U^-SRDE"_VJ)OlI$h>oMR:eob3`QF7.qZdpT=Hka7B@7Y*@#BO'rQ+QgW=N%e*4B*gnn@d(:V@;O@Y>\T1h>L9*IsZofuT%9MrHY%jE-&pATf$729K;jd7j'1cuI]mUL(6MX9FmU@$3="'O&^A'd^j9%)IQs3Ic(TXXAhXSrrVHDOtMmXD37@$jsO@L;-2%JSp.r,(VY5%.:FQg!&TNb,GGQqJ/fTJJJ'(k4)M\Vbp90M+FrM[.f#N,-93+3bm!T]HS'Vn5f91t&SmLqqr8E6)5t3L<S<d[^e+uMioF,'W"MkP%P=9qF7&N>h0i3-hq8R8h]m:10>EW^g;>)%]jce<ZNF=A?9+1PJ7^hQ(_i0`rgC0!3X1Vu7]h\'_Ad-G)L&@D.&0!2*Mk6l\/S*U:%rKW_gB@pNgABjb-Wt"[>SKPjHD3t`p6/.^n+,@fhpF1TX\?'aY%sC3dmaHkFK1j::'UD8TBC_ps1JH$$IGT5&Zu^[DT!&Z<fO"uU%Y@6R_qBM`>;r']*@6'kS,Hql>bZ#^CZSOND&qQ`.m/:Y<MWV.B9a)0GiJp?r$=kS)SbmZhYYZH$E7;YG3H'TFk`c1YhnR&e"gU6t%A?&e+5]5NVGuUhnO6nU-If1>D'Z_5."gUO_T'_mhRWfYeV?0o+/%KO),[u-kfRPh:@e[bp&Gflc^Wq&jO^ZAVk#gr&AVK)[g*7fW%o6DF&7dl>54<j.LJP;R(\8Bip4Q?+uN3SK8LrWWM>I=9ea<,=ls6Bao!?VorfqF*3Uq2,DOqfsoFGPB27mqU8RIpZ,ItM%ER,F^B%oqZfaY)'a9p]9I)a2Xbs&rlFoA,5;tJ\1<bGP-5Ta6@cJT1OH_DBi)u3R:7'VZJSIr[STjW68o#8@48'k:NcGG2StNh;0C(JC\GP%F):JOVOK@cd<9=pU@%.q)i!P"TGq\CBQU@%Ot@:UBX-5N,15o9.u_<uaL5iQhXXoYeI15'Q:npV<Zi<%;7sCh&5?TuQ^OO_3[.,.%b`@V)Z[c)Td>g[E)CMo\1d]UHONQT8!A1"C>S1nhKq\V8nZK;4SBL(O[>f$k2SB73e_=@_3RbXE+qb?SiJR>5,T9Jq+e4[._!8-m%aNS7O+qAGl,7I;q,qJAY&O*X*re`Bd]jNg:/c4Qq`]^hJs5_F?].M;J\^iIZ[*#f/.gh7R8^iFPQnW%cWHm$Q6JJc91j1_HcIRr\%$Kq/CI_=M9-(pnDjt"oMf]F0BfQ7Rr$tAq+p'dY1kSYX'4[Z0[h*]k\B*]5JgF_':=<,`51W7`?;s<_lTp83=CC&%gB/l`bCZp`6%0q2qaAUSDt>E!)1GW44c9-Ld;;NVVJ.;]cjY+Z<Z>XKIAZ%$kB[$U>H]"*PRFLm4PW:[g7L4D;@B6+M*@Iu[0DXA?/b&WoUO^(7E%,..f,Et,CgmdO@#dASg[OPd-LY%l@rDhuScL6Y<D+_ELeq6*F;hq0RiXf&d^$)LcP6aph:h3o_WT<=jsSTcjsfH9jtZlRnFiT2W'%a4QF!/[+@JL=44^KZuY8E8Sh)YW=hnYHBL^$Tf)3J2b6:NpgWLa6$=`7$H:,=GJ>OUk44HT:P2c)u2&[DT<83-W-H2OMNYUIQ$@W%0GD=LmSg)*O`IeBHHXOJYLR2mU0g53E"lqX*VJ\EXZLY^RMh".dP:WT=u^\sNnSXdYD%[l%GQ-hL+8<PI6_Y#cE9589NBCQWT9?W%FV3!ZMA]Z(C$5i$.+*7l+)M((]VC@fpRk_^VXMfn%36qVO"&_:GJ*JT'YSR8foEKPH'5eY]V,/Sr[&8!7lU7TXh]W2?#JGl^b;Hk%5t-_<GtVA(SBnB94>P*T7E!`8%7D\<A)+E^KWkLin!+n;amOX9DGQSjI:rf%G-nq1Z[g*^gMc<TrSMe\'8h3+'>#=F"3Kb^;"k0$%"G]Ho?GW;X%GD)46RSl-[+V'o,!(["Fdg3rEmWdFhiClp%kpFaR>tagVGCY_b&,?Q@lqj#$<oYqJL%RF\NW4a<Dlq'WC:<b/,J5I%q.)j1#'*+Zp1h!T\4i6"a(X%F9HH*mGQW$J5K`c"1X_:XT":VZqr2`\@kd0?e_=55$acJdI^kX'`X1"70poZm`cmkr]VUiE9=$lQ%,EHHqh!WSqaSf)1S3XjWBNNn<dDGuPT2<%R?@VtbKBZ.`HDbu>r^Lg&PYrp93>GRV]9j41Q-'0iN&tNm47jtF0PZD>A#RNj$e98f%LO3M2'2JWUMg6c!jUg)'*e=Je(/q$58r]-q1,F"kj6]se'5G,$(B^`.l\XV+?Y[4[<#SS+dB+FV_P)YE.a5ku"65pB1>N/+W_W3)%P'+VCRpfBL]sMNG_LA@3c0=`^"")>&0JT[=@o-R)^CG@QATL>@B)(ke8j$;emZ+F`^gGD;>fY($a2bEM!O+oL=\HU-K7S:mP^^?-%*0*qFN7ltLQ3_`DZi\TYU"bX?#jn)u*C]lAeM(=V,o5_%$J^I+ZJGZ,FnhnAFg$!]o&'%U<;I&)&RJC`CDPo>+EKD/WK\su,V#5@%PL\-Ap,LTk0!'o'nr1UYcgcn;o^qMr4l2d6<P+sKSeIdsVW-f)eM_t+7:k)Zm1$,9Na6Dp@Y.a]>0LtU(AqhS/S<7f&o%B](s6HB%)=#b8U9tR=`f#%CYlQ+uOk@09*##*n/Z0!V9;l's!EJ+"&ks37_*rEo>E$VW-/)J,(3))f.)Q<:rLj=sAk3U.]?'Y!;1Do2<#cI@%.Kb0qb;7G]l-KL)STY4OT1K.<=fgbBRLa.sQCR[;?`X/2:jQsY8bN4])#-0^1RES2./Z$[0:<[4g8GbOKUjaJ!Gp!O1turEmaNk<%U>"&r)e*4&X__I-qZ7_Mh^>?[#UcJcfOaqd:cTOD.M>SD&4jXE]PFj;0co.Q\.NjVLY:$XO38lB44[Z[j9DV9,V_2ICGVQ?Hc?=k%Q83TG4dV@Xcp6-QO"[Je$&J.5MD9;u"6L:'*[Z$2I%ot'aJEk#I:*K^#$+`<5Ht$j#C9bNm*tT.?sTQeoTZh.K"du3&1]-+,62e_%W[Cge=o^C["st7UPl%S:82f&ifP`OHY7!;H:i^1(>*E@$c!5C6;gOU-pffIN66j\*W^pl]I!&K7XbSX?."ib\NOS]BC;J"i!6>%U%`DIM`]jf[Z2EP+0SCEMag;NdIi>Kfb7TifH,/!"kHg/817ledajFSX?Qd[L\PkEU%UbD6'%cVK-]q2n2kg&\STTK$.A8lh=;^lgS%qF6<6Zp['td@r=to!a-@=pLqO!^>pHl,TfiO="K1hutU8A_lg6jJ_GM2<gDc3<6eWg>a@AWKO$c)dc'oQ?$&h"^epb=og,1$AD<a%7EQ0)LS^?t<+X:I$C_e6'NkN;rO6aD>V1;u[^Urm.O8mth03p>F_(X"V.L?^ndT*lV#8pF#k-BO.8BJZn/^d05rtc$)-F"Y%01FJ%YmuWgBKriJ<fT8]EHfRGY+4=2V?1)6GrXWSI'pQ&2UB"?7/'gq"EdjTI1hAFR,kq[YupAFVY?(s"20m_@O6fqa).XL*o0B]*P)Pa%Oq.<-&Gi<oec!H:-ra6tjm(45*G`!Jp`5VuQkQJc>E1o/;BGI6?+,&trl)UTgf,"Z_UXa[2d13#,._:)9X'fe[ZMu$h<'ZZqh?[`%I!.QJ`^V`3>P>\?a7tbM?85LN];p8e_lA/ZeGlY7(.\#,_2>i@(=g+Y0[k#-\H2lb($(I)prr(,o3lDe<kChmY5$3Ibp'l=p>[_2%XC>=3CA9a+GBVU2V,fqf;NbfV/1sr>GI9_>eT5W`X@2juE\m8jhSGlsATd(P;&Rtj@WrF%4.j@!HuDC!\;%C(R6MUWNm1S""27m,%ar`>!&-G!I':(^()=e+b$=t03ZoWV,NO&!qIJ*:\B05:e(>!4^#3jE]n5noh$elJ6TkUN4`O0B1W=]=OACBc`$7ZM49gV7^lpHpU%8kBX=D/I4*dK)-<C7n6&gV=Cf/1+>![dQWTGY:)AY2a(h9)T.#,6b3FH,W7K;e&DBX1`!>3X&\lb==AZ(+K[7ntRXo@`@]YiFu^C%)n%.j+]S]sJ>l:$QAKbT".D?-$IKdD*UU&p;@]!;i[o0c:6re$s*V`B)Wi<A6kSu!gV8#(@s'+3gK&="]3+M]&7UTS:X<M"h8/j$%>iL2F7mK6M[Ua4WcfbPI:&&S++)_Hnj#L%A_[@Y;4B1"8QSiN?TC'<-RUk."JVghGieG_1<L5I5_[_>A2,D#7;8d3jaf+L'rEXCK%Ujjn=4O>D'>*-eEW&`36@l/<*g?<,6\7X6AM(j-;S)-qK%"/S>daYb[L9hF*MUq0`:LD?+;Dj:m`.mG.>\6ZhXN^8q-G(k0T<GYA%q,R^?;2[$bnYXs6L36Vg<,^K%EP^)8e._%Ol=!E)ng`LG5^1Y$KDoo/fhO_<EMWim[O&V]JHFW-f%*;qXDm0ZC&;sEC1Kp.Grj7m%*CRMaDg0:'3`I/4.W3OHaN*V2'fAgOq[m*jj4EMC3Ia6=Te9;0Bd:1PFl$7#7+]uNhZi[$:1Rg4cEW%;-$ll3@4@mp8lC;.g360m%=g:t;'Z'trN>SWsgl:5eZbmT\[/;D:,E++-8031LZ]h3[lr3A/(mea''t71=c<I!FIl1a%CG'g]9_(foU(oPh4PX@72FFl#4WG*[%NKGC^M,ChS-782@lNc,d_1ZQtDQ?/-g@322j0Ycbn<m@?<Jj/K(^_PADEc(W9hVuN`bO@KaKmjdI^@(c9/\dt\mQW+ANmF3Nic#a%VR'`]T"ijr6sdEd.6NT0+/P&*,"K`L,oTXd^gp!EIJ3>E1b3jcA2/bpWFHhtDO3BpkLK4%eCh_[!UlcY(.Tdb0GgF_k.!u;MftfH%5]N[#n2-QFcf>h(5b>ZW.F4V9X9@%g[[b:IS%g%BU_V>@0oS,cKi3C^r*qV,O</k=]Lk,Y>)r]Pj/<O52GWPHkVA)%%)CuJjm\D*%0T84Shq]"0&j%J*B2Rk51Rl-!bJ[>\%PsJYNB8"5H-Y:s<"QZg0TDHCQ8==CPjRFMp8!Zua,a4SS%WQRfXmYD8'FZg)o$m8]`l,6%TMoHFMW(AW+5SQ:*!=`'acLenAk>tje0<TYbharnCf0r*^0XcWS-O)7N,%cK?FfqLI@+e664ilW.ukh.Z+NYH3uT$tE&U0+%2r:B%A9eST"_3[_O*u&]%h2(lMCCBX55VIZV+GgqGdh\8Gnu>+`meX_O#ZG<[3`kFFe7=Y4p_Fk2hd76[qA_b<$+d+mf=>)3=;9g?R5/X%*7`5j_ZCh:;KZ@>1+blBTur9Fq4QJfH=LKheFW>Sr%8,E6`G&N\*5.Ko^4b1drqh.$SB+`pDMh\G?G7Ng7kWS=oE2sIbdkuL$%i;%3LU[5"U$_QU;`+bOBc0F<6,uTZc]H<_<FC8#]7.JqrZBbTV7PDr,iCa?tJoN^o?,jX1;N@M/'0:oWlTVXhLN^6>\p>MK3WO0.V^$%7RV"70>%H7g98n2f!s\9(hYg.h1L]h!b*`cGj%uMh2K"#BZ5;ciM\sN/J*g;+&b$9\cqS$jg;d,QO^7-%p%ZS=RBWBH-3jZNkgSU%V]b$G]Vb)rFQk8_@p8BJTRM!9aAs/_"Vj:8%`pMn;)X@tcE?cFO*!rP5iiQ8N$JpA7gj#m7I.,![(<,s<mo@:,3d%X,VYl=ip6';%G`RpR8a=Va<bT$?7"#I/#R9M_lTgAGg&$MR5ki1f#+ZQ+MOXTg#T&@."/-&RF?#MHb9c=+)^%f*bRP$?-AR8@XYsQu%M.%e>j:K4%D`\cf1jmpK3jR4ZchVkt_m^m4'(Iua<31VP\*:GWf'No\S&J*[KM/Vq+"P3dT,_I8`mS<uS+,n6fMb:Gc>99QDL>[Y:ZuC<FaQPd%Y&\uJ+%!<cj2I\h`1G?3T\Ri[)"6[P9A\]a:s-QFHi-]m-gZ);+$uLWl'p+M)KZQNLZMSB$3<f?C\U_Y0Bm]j+!Q%-#.0AO=M'>!%"a17qg'5jlTnX$gq&V`LShJLVC\SGb7*E)UOBC<W%`uNEV/*9SNQ,">p[B?-:CBC`UINm`@D%=*TntNdA8U9m%7r+k4a\Z^HhbrG%EeY*E`c_k7ij3!dL[^>3gr/d:q07N_bqF,57X?k:#X,m4HS?I&`898920c(-kefQ9LCeVJmKpoD@7PBbN?(@KmZLmdLTl8C1`inh%/]sa!3CT"<BBrji:if:nHgD:Zl"p+HTglS=]OGaKKS;aB0DF*B]YcJLYQJS+TP'k"Ys\<7<c500BNoqnHgD<0kq'$C6TC&W,_m7!%`!4BG*]jMQ(cBN$pVhBi?)!gQ)$^9*nnOT$0M:nl/Zi+.8W8e.\sPG?)WerM_nb8JK&mek"E%PC6hg':=mH[BTJZ6fqNMLb&7f2i%'a[PiZFI8Je:qQ",<Ur+cHspbe2.QcGpVe2k/W%,_C^,O2R8%M(mnK.;(X1;QcldYIC4q!L^+I`6cBH&io</&(9Gi/.X4mk;"k\W%7C=Zs^@Y[7?>cM-D5ADg;7(VCB+)nlcQ9NoG&o-'1EiL&k%P^<?g,&@:I;BIR+4S@!ReE6eSn\7OSW5-I9!s,Kg[=%H^b=6=-.*!%aRh?ur%^t-:AK].A&mYAC6mtup*GJ&5,Gn3CBS71Lp:+8QpTLnR1e^rX0N/<HH"!Hr'71&4--f&piE4%2pmRj#V>YlM\ou[mV$Ik%c5b$V)4aU@&9tLV&W(c;^*tmtjO@dt,L`M\:=k`?<29QQPO'L'89XbUG+K9k;1cTD^=L0f$q,:2qpig]$#>#uW)`K7=$Y2la&k,&%l*Z=!b%EX:N4rV';>qgAom0o@AAn!3ppH)p%@gkNBDXBiYo0*t^]mL*KXZ)?Lc3rATr^3ZZo2uKF_CmLPV^"XC(3>20OlH7gbf`$%i9l`%CnB8-cfepI<4m2GL*I+hWgQN:RjR/Tj'\GBR#8!#5s1OTAJn,u4gEj>iRtN,'eP+.a,'mGbB]8\[8u%Q3jV,A0KWo4-s*%h%Mt6[oQ75;'@KWURU.&.AhM%@N+-ZJcr2UIC@fBfF3or9g//9o.IDp9u+BnZ71,1DKQL=0=nAkMHN<'s26Hj>q[6^S@p8nm5;.4eI%A2ENtO[@(oF6aCn>uNWJTdbV/-_KWQH\&:O\bHLRiS+J%S0@oS"WDnf;T(`2>f_u8fC[9jY`5A%]O^Z$k_tOHg6]u$KpX(L_@T>M%]a0V]h33_u\P`d^qC8%j*1VQi=hRLO`PEF*G>rTff*]ge=NTpSG&TnUD\!#!#%sUj<:fZA2IiBk@'R<%i/GJ>d2C][)4o6N#j)no%dG6/<*hLc7S+Q,"%crDu$\R58Ck5;<UUK*>NhTmI0h5k=Z'(stgm;tEh0NcCcKOc7KL(a/(F/\$N&>E@Aon5<LLPNVON1S2Go)mr%+dS2c&t..6'lSD^3m<uQmYSM.d/mt)[_afHX=VtM>XerG4]aJ-i\EPMb=d);/-\@d\P*eLbR!PVRB_aATc'@TQHiA<TA<jA1\d8;%=P1l!]%_\kYq=oX^pQ3Z11OP-)4;*&I?2Uf&[nl[7V6b\htA"##e@ueXC3n9A"2l?5!Rolr]?&1aKc--/^f4,/^a_q$skMmn%nts%DpZ*ZR[pJ6p3+C^"F?+O@'cGpV[Z"2MAtiHAeWZG-_JTGVI)>?;AHVC)L+GjBb,%7l"r"nA8S$PW.Y_d4GBa_isM$!)Udd:6=6>6%at#ps5(,\I*i%4m\eG69h=>Y%\.>Y];pCZT!oQu]%shbC5Hq'XB$k#-DM0?9;_@Gf-RlEU(m#L)0c1X@,#u=[M;=pj!e&`XaSK[n%fDt[MZr+i9?IM;dWm%0NL9-c%!o$t#Rsmg@$0%],/-/G2#m8#3U'L%dTe8ep$_ZmCctd>j"$,2Z_2mlbb7AF0bQkINMr%b<Fq8)l%Er=K"P3?70CQQYs55.tf3"oK![DFY/ICM?a!r[FlQp.402:tBp>o>X.1I6&5k8@@8]tY@&cWFq_//&3Rai(*5Ft12hb3%.u8S.<p%O@&,5;J7Vc\eqLUmLW+/SIZJ9,'M1,4C+n:bqP$fJR:@?/3977q&\=@Sm2]e'ohAuP-nY/pk2P=]YE#&E;dM_c,Lbm6Vo6XJYqZn%#'*./Z^%Hsh\#/g%0M.W4C<*J0B@=Xdr62YN$Pl9&A,D79k3i2kOse=[<Lt2I6MtNc*i3SJj_4Z)as\#Q!Q:U9'9a-Zmjk?D1pj:%r:T99XuIkTES<LN5MhP&f6`TL-+apj];ePapR<qbqb;q@B63&i_g?Kti=1+J.rT@288Oo.U&4H4%.DSlL,\=%77"8b*[s!G7<tX+%ScX6J\[-I8R@X<%#LO1*_-g;@3r0tuc14h2JG$/m3iOP+@(ji^$E9a"HV.pj#uX1m2G.34Z;a]t@8fd%3XW*5[B]$G'>*KWqoI,]%n/R2BUnsi.2D\MkE7.VQ4el8kE,f:M%,JhdaDK0;3a>[2do)cA0\Z0K8kZ]sIW_+8XJT6>-LOPbj_@\Adum0&\go8b^o=;<bf:4`%k"[:b\(("E;n7uIQh--4E^9htp+n-?(T$\Ca6j>CckYsrAHg9$b:>/U"W/fo2e</+`5[S<K'fAG3A"fR@Q.k0*uW4YAt58>U1%R`%V^]b[=5ce50P7=-r0WUQZ1ZcX>miKSQ#.\BZ4]fZ=&pr@546#)AcL^a*es+:au44=.r2k;Hi81^!H5?1I\<l7*t^m^a44ku=2pL`%P]N;r+HH+#pBo/.^ofgRQSG'PrKA5g(?r9Ckg-qN9rBl0OGVD@-LB/e_?1^J;FQEE)niC^M^n_RJ%_@M3M:0jB.ouO`)P!X]@`RD%@"ba6?b<Xs<H[)PMAAnPEF2qF?[%`OP,@]*V7OC7U5t0%Pm3X8Yni_,.hLHASlS:1[,PcDd(4apg4k`ZZ/n'OFA,.RXTe0BS]q8_%C+/Ff`T=nB5)YCu>L7C\?=GVI2J&C!.kQfD'*_;nTV609'jU]Z5S1/js(=+hUL/50#4ugQnK-LXrsd,pf^.P=NjRa*CE(q2>!-s;%#_"%C8OmZ84!IX\hXQHuXK1I>4qdP5+E_gM<]X^o)"ZKbI6Fb>PAqIG<]*o;dehZ?PhgY_ZUIk^Qt//@kj7?^*=/I\f"cSD_&Y`5%n_"E@l1*;_>aTOpM1K4Lj>G.^FZ\nS?8e"HpjP^VkNu#EYS'bI9Tl:`qAc`fB./Htd*TF(HbU)5eug@d1J=*8Z[k,j%PbrEH_?r3%KbZAb+B[##YHi"p>nJ(6M;mh'CAH?NSnL@P2rAXG]n:X\:!DoQCs[+IL%t+N"W)u@"YCuf^,Tm>,R](l/H`UST@(o(^31drpX:XI%lOCp6o='iMc=LCAabFm4H,6-nP(cANq1+183Ln8+]/c5POl9R-N*!sVaLR7B?^&rmEuAY0`GT?LQ\!["mcsIn\V/$Ac=O/tR7q.3%0*@+?-QLA)jUMMOd&3<KcK&u`?C_ZI-jMQ4^6p,j1]je%Q;Hhb,L7?\q\EgD88b^?3LE5^OU?6!lCn%Zqk/jm68p"XIA!+SHqZ$]%:*'>$Rb*6EGn"*o;Xn=YEa_92/,#4?QDJr&Q[SG`@`F!m03Bjhc4Uc19^Rq")<c.4/2bMf$nPB/3f3<e&q"aTPCUpa*=3N<8_V#.%i>NG.V(h&\`D!!Eou4r[oQ9Rlpm?W/'"'Mfcrk:&0dMSX/Q^GV$D)2[bU^G;k=@7/YG/aUN5SLi?]A_e\sU$`rKpZg>g0!o1#ot2%@Kq!D_N9^rjA==$>39NaiN8OGIYaHiYNsU)bEs,R4Z?4Zk0>0BEM:Ln$nP+m:bLmeh-A2$aD`kT`n!icF>3kYF'c*sLW@pd.[b\.%r5)t7O#,'^3q@AhbK%i5GoR<QQB)p9'cmUjR'A5kT"+8EMoJP.`ptjJ3M4k0jC0I,N(C2\(Gj1d`i*i2K?/5V9lCtoF#!,._o8]=%+IpAj(\?>C1'kt?XFkb!Rs<9'":SckWj<-6$Vca)/Jg371rVm.'pph(Y#Ls.\H#&N/us>>1375/=;WS6Jo2s6Z'2`)\T=>(-kSP?%VrXgY=&Zp!<2=Fko?GB>d:Gh2'Z%WsH!5YKDl<k,pqt(EF&U#s-GTap1:O'c%@e%CCIsJ,PF^?!VQVCf8QdUb;'"\5BoFnXo%7Na%Hn+"P-Hi[a=IrC=<mo[29LKRQC&ZoI7^bSr(epW7(^I*6!3J-H#?>:7(:#4p$,maVS3msJeNJ:!X$/S+V`6P8EEjFu,\0N<,F=4H%QT6L&/I=!mqC^%3qRBR^KgE@2bH!7`0f'7]]Gl'hGe>=;QRVerIeqTEr4B`Do3_L[5<Sr9LHkb-[t"C\5Q?d?k\j;X'*%msc[Y](%s5hRVpuCgmrgVgCk3jCQs753Brq)Q7@d)_Kr'*:KVL^)65QBP(rU..%5QB!cs24O$5Q(<>5Q1C25QBkAs5f=Al!Jo=%tFFg&#;M]%?Q&Z8J,&tlrengk^[AiloJ_9rb?t8@_dc>OlJKXus7j354RN1@r:d,TkJ-iITDu+po;@*9btl+NqgYREn_aB:5Q0V\s6K.Qr9sX@%:VZbVs7Y4)s6`,Lq6tkKqV@cnqYe2,pAb-JcbKG=+7[%Zqrd-LIfB;<J+kUGq9tscp[c/tk<Jo05b:2siP56>^].[@Q_47aKFV&9~>%AI9_PrivateDataEnd