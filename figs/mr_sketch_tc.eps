%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: mr_sketch_tc.pdf
%%Creator: (Adobe Acrobat 11.0.3)
%%For: davidad
%%CreationDate: 6/24/13, 9:22 AM
%%BoundingBox: 0 0 261 180
%%HiResBoundingBox: 0 0 260.7920 179.7040
%%CropBox: 0 0 260.7920 179.7040
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 48977 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2013-06-23T18:45:17-04:00"
   xmp:ModifyDate="2013-06-24T08:46:32-07:00"
   xmp:CreateDate="2013-06-24T08:46:32-07:00"
   xmp:CreatorTool="Adobe Illustrator CS4"
   xmpMM:InstanceID="uuid:cbd8fbbd-4a19-814d-b510-0760ec01ceca"
   xmpMM:DocumentID="xmp.did:FE7F117407206811B1A4E2F3F4D97235"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Acrobat Distiller 11.0 (Macintosh)">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Print</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Adam Marblestone</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="176"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqgdW13RtHgE+qXsNlExojTOqcj/KgJqx9hirHbj80/LKKWtor29QCpeK1liTbwe5ECH5g&#xA;4aVJj+ddjPK0WnaTLcTKKvE9zbF1Hiy2r3bAZCc4xFyICREnkLU/+Vqea5z/AKL5WkZezBdSmr7E&#xA;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&#xA;dirsVdirsVdirsVdirsVdir/AP/Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:25309aba-6ddf-a941-9bd2-dd7653570218"
    stRef:documentID="xmp.did:F77F117407206811818C85DF6A1A75C3"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:D27F11740720681191099C3B601C4548"
       stEvt:when="2008-04-17T14:19:15+05:30"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T16:23:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F1174072068118D4ED246B3ADB1C6"
       stEvt:when="2008-05-15T17:10:45-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:EF7F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T22:53:33-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F07F117407206811A46CA4519D24356B"
       stEvt:when="2008-05-15T23:07:07-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:35:43-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/pdf to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T10:40:59-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to &lt;unknown&gt;"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:26:55-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FB7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FC7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:29:20-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FD7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:30:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FE7F117407206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T11:31:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B233668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T12:23:46-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B333668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:27:54-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:B433668C16206811BDDDFD38D0CF24DD"
       stEvt:when="2008-05-16T13:46:13-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:47:57-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:51:06-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F11740720681197C1BF14D1759E83"
       stEvt:when="2008-05-16T15:52:22-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FA7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T13:28:01-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:FF7F117407206811B628E3BF27C8C41B"
       stEvt:when="2008-05-22T16:23:53-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:07C3BD25102DDD1181B594070CEB88D9"
       stEvt:when="2008-05-28T16:45:26-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="converted"
      stEvt:params="from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator"/>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F87F1174072068119098B097FDA39BEF"
       stEvt:when="2008-06-02T13:25:25-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811BB1DBF8F242B6F84"
       stEvt:when="2008-06-09T14:58:36-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F97F117407206811ACAFB8DA80854E76"
       stEvt:when="2008-06-11T14:31:27-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:0180117407206811834383CD3A8D2303"
       stEvt:when="2008-06-11T22:37:35-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       stEvt:action="saved"
       stEvt:instanceID="xmp.iid:F77F117407206811818C85DF6A1A75C3"
       stEvt:when="2008-06-27T14:40:42-07:00"
       stEvt:softwareAgent="Adobe Illustrator CS4">
      <stEvt:changed>
       <rdf:Bag>
        <rdf:li>/</rdf:li>
       </rdf:Bag>
      </stEvt:changed>
      </rdf:Description>
     </rdf:li>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FE7F117407206811B1A4E2F3F4D97235"
      stEvt:when="2013-06-23T18:45:17-04:00"
      stEvt:softwareAgent="Adobe Illustrator CS4"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="3.812500"
    stDim:h="2.791667"
    stDim:unit="Inches"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="MT-Extra"
      stFnt:fontFamily="MT Extra"
      stFnt:fontFace="Regular"
      stFnt:fontType="TrueType"
      stFnt:versionString="Version 4.30 (January 2001)"
      stFnt:composite="False"
      stFnt:fontFileName="MT Extra"/>
     <rdf:li
      stFnt:fontName="TimesNewRomanPS-BoldMT"
      stFnt:fontFamily="Times New Roman"
      stFnt:fontFace="Bold"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 3.05"
      stFnt:composite="False"
      stFnt:fontFileName="Times New Roman"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Red"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Yellow"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Green"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Cyan"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Blue"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Magenta"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="14.999998"
         xmpG:magenta="100.000000"
         xmpG:yellow="90.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000000"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000004"
         xmpG:yellow="85.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000001"
         xmpG:magenta="0.000000"
         xmpG:yellow="90.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="19.999998"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="100.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="90.000000"
         xmpG:magenta="30.000002"
         xmpG:yellow="95.000000"
         xmpG:black="30.000002"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="45.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="70.000000"
         xmpG:magenta="14.999998"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="5.000001"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="25.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000004"
         xmpG:magenta="100.000000"
         xmpG:yellow="35.000004"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="10.000002"
         xmpG:magenta="100.000000"
         xmpG:yellow="50.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="95.000000"
         xmpG:yellow="19.999998"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:yellow="39.999996"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999996"
         xmpG:magenta="45.000000"
         xmpG:yellow="50.000000"
         xmpG:black="5.000001"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="60.000004"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="55.000000"
         xmpG:magenta="60.000004"
         xmpG:yellow="65.000000"
         xmpG:black="39.999996"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="39.999996"
         xmpG:yellow="65.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000002"
         xmpG:magenta="50.000000"
         xmpG:yellow="75.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000004"
         xmpG:magenta="60.000004"
         xmpG:yellow="80.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999996"
         xmpG:magenta="65.000000"
         xmpG:yellow="90.000000"
         xmpG:black="35.000004"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999996"
         xmpG:magenta="70.000000"
         xmpG:yellow="100.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="70.000000"
         xmpG:yellow="80.000000"
         xmpG:black="70.000000"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Grays"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=90"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="89.999405"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=80"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="79.998795"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="69.999702"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=60"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="59.999104"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="39.999401"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="29.998802"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=20"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="19.999701"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="9.999103"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="4.998803"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Brights"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=100 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=75 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="75.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=10 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="95.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="85.000000"
         xmpG:magenta="10.000002"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=90 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000004"
         xmpG:magenta="90.000000"
         xmpG:yellow="0.003099"
         xmpG:black="0.003099"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceRGB] /CSA add_res
null null set_ucrbg
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Additive
/TintProc null
/NComponents 3 
/ColorLookup [
[1 1 1][.992188 .992188 .992188][.988266 .988266 .988266][.980484 .98436 .98436]
[.976532 .976594 .980454][.972626 .972626 .976547][.96872 .96872 .972641][.964814 .964814 .968735]
[.960907 .964706 .964829][.957001 .960923 .960923][.953095 .957017 .957017][.952941 .95311 .95311]
[.949204 .949204 .952941][.945298 .945298 .94922][.941392 .945098 .945313][.937486 .941407 .941407]
[.933579 .937501 .941176][.929673 .933595 .937516][.929412 .929689 .93361][.925782 .929412 .929704]
[.921876 .925798 .925798][.91797 .921892 .92549][.914064 .917985 .921907][.913725 .914079 .918001]
[.910173 .910173 .914095][.906267 .909804 .910188][.902361 .906282 .909804][.898454 .902376 .906298]
[.894548 .89847 .902391][.890642 .894564 .898485][.890196 .894118 .898039][.886751 .890673 .894594]
[.882845 .886767 .890688][.878939 .88286 .886782][.875033 .878954 .882876][.871126 .875048 .882353]
[.870588 .87451 .878985][.867236 .871157 .875079][.863329 .867251 .871173][.859423 .863345 .870588]
[.855517 .859439 .867282][.851611 .858823 .863376][.85098 .855548 .859469][.84772 .851642 .858823]
[.843814 .847735 .855579][.839908 .843829 .851672][.836002 .843137 .847766][.832095 .839938 .84386]
[.831372 .836032 .843137][.828205 .832126 .839969][.824298 .82822 .836063][.820392 .827451 .832157]
[.816486 .824329 .828251][.81258 .820423 .827451][.811765 .816517 .82436][.808689 .812611 .820454]
[.804783 .811765 .816547][.800877 .80872 .815686][.79697 .804814 .812657][.796078 .800907 .80875]
[.79308 .797001 .804844][.789173 .796078 .800938][.785267 .79311 .8][.781361 .789204 .797047]
[.777455 .785298 .793141][.773549 .781392 .789235][.772549 .777486 .785329][.769658 .776471 .784314]
[.765752 .773595 .781438][.761845 .769689 .777532][.757939 .765782 .773626][.754033 .761876 .769719]
[.752941 .75797 .768627][.750142 .756863 .765829][.746236 .754079 .761922][.74233 .750173 .758016]
[.738424 .746267 .75411][.734518 .742361 .752941][.733333 .741176 .750219][.730627 .73847 .746313]
[.726721 .734564 .742407][.722814 .730657 .738501][.718908 .726751 .737255][.715002 .722845 .73461]
[.713725 .721569 .730704][.711111 .718954 .726797][.707205 .715048 .722891][.703299 .711142 .721569]
[.699393 .707236 .719][.698039 .705882 .715094][.695502 .703345 .711188][.691596 .699439 .707282]
[.687689 .695533 .705882][.683783 .691626 .703391][.679877 .690196 .699485][.678431 .687735 .695579]
[.675986 .683829 .691672][.67208 .679923 .690196][.668174 .676017 .687782][.664268 .67451 .683875]
[.662745 .672126 .679969][.660377 .66822 .678431][.656471 .664314 .676078][.652564 .660408 .672172]
[.648658 .658823 .668266][.647059 .656517 .66436][.644767 .652611 .662745][.640861 .648704 .660469]
[.636955 .644798 .656563][.633049 .643137 .652657][.631373 .640907 .64875][.629158 .637001 .647059]
[.625252 .633095 .64486][.621346 .629189 .640953][.619608 .627451 .637047][.617455 .625298 .633141]
[.613549 .621392 .631373][.609642 .617486 .62925][.605736 .615686 .625344][.603922 .613595 .621438]
[.601845 .609689 .619608][.597939 .605782 .617547][.594033 .601876 .613641][.592157 .6 .609735]
[.590142 .597985 .607843][.586236 .594079 .605844][.58233 .590173 .601938][.578424 .586267 .598032]
[.574517 .582361 .594125][.570611 .578454 .590219][.568627 .576471 .586313][.566721 .574564 .584314]
[.562814 .570657 .582422][.558908 .566751 .578516][.556863 .564706 .57461][.555017 .56286 .570704]
[.551111 .558954 .568627][.547205 .555048 .566813][.545098 .552941 .562907][.543314 .551157 .559]
[.539408 .547251 .556863][.535502 .543345 .55511][.533333 .541176 .551203][.531611 .539454 .547297]
[.527705 .535548 .545098][.523799 .531642 .543406][.521569 .527736 .5395][.519908 .52549 .535594]
[.516002 .523845 .533333][.512095 .519939 .531703][.509804 .516032 .527797][.508205 .513725 .523891]
[.504298 .512142 .521569][.500392 .508235 .52][.498039 .504329 .516094][.496501 .501961 .512188]
[.492595 .500438 .509804][.488689 .496532 .508297][.486274 .492626 .504391][.484798 .490196 .500484]
[.480892 .488735 .498039][.478431 .484829 .496594][.477001 .480923 .492687][.473095 .478431 .488781]
[.469189 .477032 .484875][.466667 .473126 .482353][.465298 .46922 .480984][.461392 .466667 .477078]
[.457486 .465329 .473172][.454902 .461423 .470588][.453595 .457516 .469281][.449689 .454902 .465375]
[.445782 .453626 .461469][.441876 .449719 .457563][.439216 .445813 .454902][.437985 .441907 .453672]
[.434079 .439216 .449766][.430173 .438016 .445859][.427451 .43411 .441953][.426282 .430204 .439216]
[.422376 .426298 .438062][.41847 .422391 .434156][.414564 .419608 .43025][.411765 .418501 .426344]
[.410673 .414594 .422438][.406767 .410688 .419608][.40286 .406782 .418547][.398954 .403922 .414641]
[.395048 .402891 .410734][.392157 .398985 .406828][.391157 .395079 .402922][.387251 .391173 .4]
[.383345 .387266 .399031][.379439 .38336 .395125][.376471 .380392 .391219][.375548 .379469 .387313]
[.371642 .375563 .383406][.367736 .371657 .3795][.363829 .367751 .376471][.359923 .363845 .375609]
[.356863 .360784 .371703][.356032 .359954 .367797][.352126 .356048 .363891][.34822 .352142 .359985]
[.344314 .348235 .356078][.340408 .344329 .352172][.336501 .340423 .348266][.332595 .336517 .34436]
[.328689 .332611 .340454][.32549 .328704 .336548][.324798 .324798 .332641][.320892 .320892 .328735]
[.316986 .316986 .324829][.31308 .31308 .320923][.309173 .309173 .317017][.305267 .305267 .31311]
[.301361 .301361 .309204][.297455 .297455 .305298][.293549 .293549 .301392][.289643 .289643 .297486]
[.285736 .285736 .293579][.282353 .28183 .289673][.281846 .277924 .285767][.277939 .27451 .281861]
[.274033 .274033 .277955][.270127 .270127 .274049][.266221 .266221 .270142][.262315 .262315 .266236]
[.258408 .258408 .26233][.254502 .254502 .258424][.250596 .250212 .254518][.24669 .242768 .250611]
[.242784 .238862 .246705][.238877 .234956 .242461][.234648 .230727 .234971][.227143 .223222 .231065]
[.223237 .219316 .226867][.219331 .215133 .219331][.215425 .207582 .215164][.211273 .203676 .207597]
[.203691 .199539 .203691][.199785 .191942 .19957][.195879 .188035 .191957][.191972 .183945 .187866]
[.187897 .176301 .180223][.180238 .172242 .176317][.176332 .164568 .172272][.172426 .160661 .164583]
[.16852 .156755 .160677][.164521 .152757 .156678][.156786 .145021 .148943][.15288 .141115 .145037]
[.148974 .137209 .141084][.145067 .133272 .133303][.141161 .125475 .129396][.137255 .121569 .12549]
]
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -179.704 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 179.704 li
260.792 179.704 li
260.792 0 li
cp
clp
gsave
241.599 156.764 mo
241.198 156.764 li
241.198 156.756 241.198 156.749 241.198 156.741 cv
241.198 144.752 li
240.208 144.752 li
240.208 144.783 li
96.868 153.724 li
100.94 146.492 103.262 138.145 103.262 129.254 cv
103.262 101.666 80.897 79.3 53.308 79.3 cv
51.745 79.3 50.2 79.372 48.674 79.512 cv
48.674 50.482 li
241.599 50.482 li
241.599 156.764 li
clp
48.674 156.764 mo
48.674 50.482 li
241.599 50.482 li
241.599 156.764 li
cp
false sop
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[-5e-06 -106.282 106.282 -5e-06 145.136 156.764 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.3 ]
/C1 [0 ]
/N 1.352 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-5e-06 -106.282 106.282 -5e-06 145.136 156.764 ]ct
clp
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~!!!!"!<N<(!s8Z/"9er4"pP;;#7(SA#mgqG$O[=N$k3XT%LrsZ%hK9`&J5Tf&ebol'GM5r'c%Q#(Ddl)
(`=2/)B'M5)]Kb:*$$%@*ZcCF+!;[K+X&!Q+sJ6V,:"N\,palb-7:/g-n$Jm.4H_r.Olr!.kE5&/M/P,
/hSe10/,(60ekC;1,:U@1G^jE1c.'I2)[?N2`EZS3&ilX3B9)\3]];`4$,Pe4?Pbi4Zttm5!D1q5<qJ!
5X@\%5s[h(6:+%,6UO706psF377BX77Rfj:7n6'>7n?0A84Z<D8P)KF8kM]J8kM]K91qoN91qrP9MA,R
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
grestore
gsave
48.674 50.481 mo
241.599 50.481 li
clp
48.674 50.481 mo
241.599 50.481 li
48.674 50.481 li
cp
false sop
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[192.925 0 0 192.925 48.674 50.481 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[192.925 0 0 192.925 48.674 50.481 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
grestore
48.674 51.966 mo
241.599 51.966 li
241.599 48.996 li
48.674 48.996 li
cp
false sop
null null set_ucrbg
.250788 .248193 .255125 rgb
f
240.703 144.752 mo
240.703 156.741 li
48.504 156.741 li
240.703 144.752 li
null null set_ucrbg
.313969 .555667 .817834 rgb
f
240.208 144.752 mo
240.208 156.246 li
48.504 156.246 li
48.504 157.236 li
240.703 157.236 li
240.833 157.236 240.961 157.183 241.053 157.091 cv
241.145 156.999 241.198 156.872 241.198 156.741 cv
241.198 144.752 li
240.208 144.752 li
f
142.103 21.696 mo
111.552 21.696 86.786 19.868 86.786 17.613 cv
86.786 15.357 111.552 13.528 142.103 13.528 cv
172.654 13.528 197.419 15.357 197.419 17.613 cv
197.419 19.868 172.654 21.696 142.103 21.696 cv
cp
142.553 11.301 mo
106.34 11.301 76.982 14.127 76.982 17.613 cv
76.982 21.097 106.34 23.925 142.553 23.925 cv
178.767 23.925 208.123 21.097 208.123 17.613 cv
208.123 14.127 178.767 11.301 142.553 11.301 cv
null null set_ucrbg
.729881 .73553 .746911 rgb
f
142.103 21.696 mo
142.103 21.201 li
126.837 21.201 113.017 20.744 103.024 20.006 cv
98.029 19.638 93.988 19.198 91.218 18.715 cv
89.835 18.474 88.766 18.219 88.078 17.97 cv
87.735 17.848 87.488 17.723 87.363 17.63 cv
87.266 17.543 li
87.217 17.577 li
87.272 17.558 li
87.266 17.543 li
87.217 17.577 li
87.272 17.558 li
87.111 17.613 li
87.281 17.613 li
87.272 17.558 li
87.111 17.613 li
87.281 17.613 li
87.112 17.613 li
87.272 17.668 li
87.281 17.613 li
87.112 17.613 li
87.272 17.668 li
87.216 17.649 li
87.266 17.683 li
87.272 17.668 li
87.216 17.649 li
87.266 17.683 li
87.269 17.669 87.387 17.557 87.614 17.449 cv
88.04 17.236 88.811 16.998 89.853 16.775 cv
93.513 15.983 100.528 15.289 109.636 14.801 cv
118.748 14.312 129.968 14.023 142.103 14.023 cv
157.368 14.023 171.189 14.48 181.181 15.218 cv
186.176 15.587 190.217 16.027 192.987 16.511 cv
194.37 16.752 195.439 17.006 196.127 17.255 cv
196.47 17.378 196.717 17.503 196.842 17.596 cv
196.939 17.683 li
196.988 17.649 li
196.933 17.668 li
196.939 17.683 li
196.988 17.649 li
196.933 17.668 li
197.094 17.613 li
196.924 17.613 li
196.933 17.668 li
197.094 17.613 li
196.924 17.613 li
197.094 17.613 li
196.933 17.558 li
196.924 17.613 li
197.094 17.613 li
196.933 17.558 li
196.99 17.577 li
196.939 17.543 li
196.933 17.558 li
196.99 17.577 li
196.939 17.543 li
196.936 17.557 196.819 17.668 196.591 17.777 cv
196.165 17.989 195.394 18.227 194.352 18.451 cv
190.692 19.242 183.678 19.936 174.57 20.423 cv
165.458 20.912 154.237 21.201 142.103 21.201 cv
142.103 22.191 li
157.389 22.191 171.226 21.734 181.254 20.994 cv
186.269 20.623 190.329 20.183 193.157 19.69 cv
194.573 19.442 195.677 19.184 196.463 18.902 cv
196.857 18.758 197.172 18.613 197.424 18.431 cv
197.55 18.339 197.663 18.236 197.755 18.103 cv
197.846 17.972 197.915 17.799 197.914 17.613 cv
197.915 17.427 197.846 17.254 197.755 17.123 cv
197.574 16.868 197.33 16.713 197.027 16.56 cv
196.458 16.281 195.64 16.041 194.556 15.806 cv
190.772 14.991 183.752 14.303 174.616 13.812 cv
165.483 13.322 154.25 13.033 142.103 13.033 cv
126.817 13.033 112.979 13.49 102.951 14.231 cv
97.936 14.601 93.876 15.042 91.048 15.535 cv
89.632 15.783 88.528 16.041 87.742 16.324 cv
87.348 16.467 87.033 16.613 86.781 16.795 cv
86.655 16.887 86.542 16.99 86.45 17.123 cv
86.359 17.254 86.29 17.427 86.291 17.613 cv
86.29 17.799 86.359 17.972 86.45 18.103 cv
86.631 18.358 86.875 18.512 87.179 18.666 cv
87.748 18.945 88.565 19.184 89.65 19.42 cv
93.433 20.234 100.453 20.921 109.59 21.412 cv
118.722 21.902 129.956 22.191 142.103 22.191 cv
142.103 21.696 li
cp
142.553 11.301 mo
142.553 10.807 li
124.433 10.807 108.029 11.513 96.14 12.657 cv
90.195 13.23 85.38 13.91 82.026 14.673 cv
80.346 15.056 79.035 15.456 78.104 15.893 cv
77.638 16.113 77.265 16.34 76.98 16.608 cv
76.701 16.871 76.488 17.211 76.487 17.613 cv
76.488 18.015 76.701 18.355 76.981 18.617 cv
77.513 19.113 78.36 19.498 79.543 19.886 cv
83.668 21.216 91.955 22.335 102.97 23.141 cv
113.979 23.944 127.689 24.419 142.553 24.419 cv
160.673 24.419 177.077 23.713 188.966 22.568 cv
194.911 21.995 199.725 21.315 203.08 20.552 cv
204.759 20.169 206.071 19.769 207.002 19.333 cv
207.467 19.112 207.841 18.885 208.125 18.617 cv
208.405 18.355 208.617 18.015 208.618 17.613 cv
208.617 17.211 208.405 16.871 208.125 16.608 cv
207.592 16.113 206.746 15.727 205.562 15.339 cv
201.438 14.008 193.151 12.89 182.135 12.084 cv
171.126 11.282 157.417 10.807 142.553 10.807 cv
142.553 11.796 li
160.646 11.796 177.028 12.503 188.871 13.643 cv
194.791 14.212 199.579 14.891 202.86 15.639 cv
204.499 16.011 205.764 16.404 206.58 16.789 cv
206.988 16.979 207.281 17.17 207.444 17.327 cv
207.612 17.488 207.629 17.579 207.628 17.613 cv
207.629 17.647 207.612 17.737 207.444 17.899 cv
207.137 18.199 206.376 18.587 205.258 18.944 cv
201.324 20.221 193.035 21.356 182.064 22.154 cv
171.085 22.954 157.395 23.429 142.553 23.429 cv
124.46 23.43 108.078 22.723 96.235 21.583 cv
90.315 21.013 85.527 20.333 82.245 19.587 cv
80.606 19.214 79.341 18.822 78.525 18.437 cv
78.118 18.246 77.825 18.055 77.661 17.899 cv
77.493 17.737 77.477 17.647 77.477 17.613 cv
77.477 17.579 77.494 17.488 77.662 17.327 cv
77.968 17.027 78.729 16.638 79.848 16.281 cv
83.782 15.004 92.07 13.869 103.042 13.072 cv
114.021 12.272 127.71 11.796 142.553 11.796 cv
142.553 11.301 li
null null set_ucrbg
.259034 .259034 .262502 rgb
f
96.545 85.563 mo
96.123 83.797 95.545 82.065 94.985 80.358 cv
94.964 80.302 li
94.301 78.627 93.753 76.979 93.474 75.375 cv
93.374 74.803 93.325 74.232 93.325 73.66 cv
93.325 72.68 93.469 71.696 93.757 70.699 cv
92.796 70.422 li
93.738 70.757 li
94.288 69.205 95.318 67.563 96.542 65.888 cv
95.735 65.299 li
96.506 65.935 li
97.891 64.255 99.47 62.539 100.792 60.775 cv
99.991 60.176 li
100.766 60.808 li
102.214 59.028 103.317 57.2 103.694 55.237 cv
103.772 54.829 103.811 54.417 103.81 54.007 cv
103.811 52.398 103.22 50.84 102.219 49.366 cv
102.194 49.331 li
100.807 47.475 98.723 45.743 96.512 44.015 cv
95.283 45.592 li
97.456 47.283 99.433 48.964 100.589 50.525 cv
101.392 49.928 li
100.564 50.489 li
101.408 51.735 101.81 52.897 101.81 54.007 cv
101.81 54.293 101.784 54.577 101.729 54.864 cv
101.458 56.319 100.558 57.904 99.216 59.544 cv
99.191 59.576 li
97.956 61.227 96.395 62.928 94.963 64.663 cv
94.927 64.709 li
93.657 66.453 92.519 68.225 91.854 70.086 cv
91.835 70.145 li
91.5 71.308 91.325 72.483 91.325 73.66 cv
91.325 74.346 91.384 75.033 91.504 75.718 cv
91.819 77.528 92.417 79.298 93.105 81.038 cv
94.035 80.67 li
93.085 80.982 li
93.647 82.695 94.206 84.377 94.6 86.027 cv
96.545 85.563 li
null null set_ucrbg
.938044 .755325 .19155 rgb
f
184.723 118.257 mo
184.363 117.863 184.017 117.495 183.797 117.19 cv
183.782 117.17 li
183.548 116.868 183.462 116.636 183.456 116.528 cv
183.455 116.5 li
183.454 116.427 183.485 116.28 183.649 116.048 cv
182.832 115.471 li
183.634 116.067 li
183.823 115.809 184.209 115.45 184.65 115.079 cv
184.003 114.316 li
184.634 115.092 li
185.096 114.714 185.613 114.318 186.06 113.856 cv
185.339 113.163 li
186.049 113.867 li
186.28 113.633 186.49 113.384 186.661 113.099 cv
186.832 112.814 186.966 112.485 187.005 112.113 cv
187.005 112.115 li
187.016 111.903 li
187.017 111.553 186.923 111.223 186.783 110.939 cv
186.643 110.654 186.459 110.407 186.25 110.179 cv
186.235 110.163 li
185.753 109.666 185.163 109.268 184.584 108.873 cv
184.569 108.863 li
183.97 108.475 183.381 108.099 183.013 107.785 cv
183.003 107.776 li
182.816 107.623 182.686 107.484 182.622 107.392 cv
182.566 107.297 li
182.562 107.286 li
182.486 107.306 li
182.564 107.299 li
182.562 107.286 li
182.486 107.306 li
182.564 107.299 li
182.378 107.316 li
182.565 107.316 li
182.564 107.298 li
182.378 107.316 li
182.565 107.316 li
182.454 107.316 li
182.561 107.35 li
182.565 107.316 li
182.454 107.316 li
182.561 107.35 li
182.623 107.247 li
182.672 107.183 182.753 107.095 182.868 106.995 cv
182.213 106.24 li
182.856 107.006 li
183.196 106.716 183.839 106.339 184.528 105.961 cv
184.043 105.086 li
184.514 105.968 li
185.227 105.586 185.985 105.195 186.617 104.749 cv
186.039 103.934 li
186.608 104.756 li
186.933 104.53 187.224 104.292 187.47 104 cv
187.712 103.712 187.929 103.346 187.979 102.883 cv
187.979 102.885 li
187.988 102.706 li
187.988 102.258 187.81 101.869 187.593 101.575 cv
187.373 101.276 187.106 101.039 186.806 100.818 cv
186.792 100.808 li
186.135 100.348 185.314 99.958 184.489 99.568 cv
184.482 99.564 li
183.644 99.18 182.807 98.798 182.272 98.467 cv
182.265 98.462 li
181.993 98.3 181.799 98.146 181.71 98.051 cv
181.647 97.974 li
181.432 98.091 li
181.671 98.068 li
181.647 97.974 li
181.432 98.091 li
181.671 98.068 li
181.671 98.067 li
181.264 98.107 li
181.673 98.107 li
181.671 98.067 li
181.264 98.107 li
181.673 98.107 li
181.349 98.107 li
181.648 98.24 li
181.673 98.107 li
181.349 98.107 li
181.648 98.24 li
181.584 98.212 li
181.644 98.248 li
181.648 98.24 li
181.584 98.212 li
181.644 98.248 li
181.644 98.234 181.808 98.051 182.124 97.86 cv
181.594 97.012 li
182.115 97.865 li
182.633 97.546 183.53 97.162 184.463 96.783 cv
184.456 96.786 li
185.414 96.401 186.411 96.014 187.214 95.584 cv
187.207 95.587 li
187.617 95.37 187.974 95.146 188.284 94.863 cv
188.438 94.721 188.582 94.562 188.704 94.365 cv
188.825 94.17 188.924 93.93 188.953 93.657 cv
188.954 93.653 li
188.962 93.496 li
188.962 93.229 188.889 92.976 188.785 92.771 cv
188.625 92.459 188.41 92.236 188.179 92.041 cv
187.946 91.847 187.686 91.68 187.398 91.521 cv
187.389 91.516 li
186.569 91.077 185.512 90.691 184.446 90.302 cv
184.439 90.3 li
183.359 89.918 182.276 89.535 181.565 89.189 cv
181.558 89.185 li
181.197 89.016 180.931 88.851 180.806 88.744 cv
180.74 88.682 li
180.724 88.665 li
180.565 88.783 li
180.746 88.706 li
180.724 88.665 li
180.565 88.783 li
180.746 88.706 li
180.331 88.883 li
180.779 88.84 li
180.746 88.706 li
180.331 88.883 li
180.779 88.84 li
180.778 88.839 li
180.246 88.89 li
180.781 88.89 li
180.778 88.839 li
180.246 88.89 li
180.781 88.89 li
180.347 88.89 li
180.73 89.109 li
180.746 89.083 180.782 88.997 180.781 88.89 cv
180.347 88.89 li
180.73 89.109 li
180.637 89.056 li
180.722 89.121 li
180.73 89.109 li
180.637 89.056 li
180.722 89.121 li
180.724 89.1 180.981 88.882 181.413 88.68 cv
181.405 88.684 li
182.109 88.346 183.256 87.96 184.434 87.579 cv
184.43 87.58 li
185.632 87.194 186.868 86.811 187.839 86.391 cv
187.833 86.393 li
188.326 86.181 188.747 85.967 189.11 85.696 cv
189.291 85.559 189.46 85.407 189.611 85.206 cv
189.759 85.007 189.893 84.744 189.927 84.426 cv
189.927 84.424 li
189.935 84.276 li
189.936 83.962 189.827 83.677 189.692 83.465 cv
189.485 83.145 189.232 82.94 188.957 82.752 cv
188.68 82.567 188.37 82.407 188.021 82.252 cv
188.013 82.249 li
187.031 81.824 185.736 81.442 184.428 81.054 cv
184.423 81.052 li
183.1 80.67 181.77 80.285 180.878 79.931 cv
180.874 79.929 li
180.425 79.755 180.085 79.581 179.916 79.461 cv
179.824 79.391 li
179.802 79.369 li
179.622 79.528 li
179.834 79.422 li
179.802 79.369 li
179.622 79.528 li
179.834 79.422 li
179.355 79.66 li
179.886 79.609 li
179.834 79.422 li
179.355 79.66 li
179.886 79.609 li
179.886 79.608 li
179.273 79.668 li
179.889 79.668 li
179.886 79.608 li
179.273 79.668 li
179.889 79.668 li
179.387 79.668 li
179.807 79.961 li
179.828 79.935 179.89 79.821 179.889 79.668 cv
179.387 79.668 li
179.807 79.961 li
179.665 79.862 li
179.799 79.972 li
179.807 79.961 li
179.665 79.862 li
179.799 79.972 li
179.807 79.964 li
179.866 79.897 180.212 79.681 180.726 79.481 cv
180.721 79.483 li
181.609 79.131 183.002 78.746 184.426 78.363 cv
184.421 78.364 li
185.87 77.979 187.348 77.594 188.482 77.184 cv
188.478 77.185 li
189.054 76.977 189.537 76.77 189.946 76.512 cv
190.151 76.38 190.342 76.237 190.518 76.037 cv
190.689 75.841 190.86 75.562 190.901 75.198 cv
190.901 75.195 li
190.908 75.055 li
190.909 74.693 190.761 74.383 190.599 74.172 cv
190.35 73.851 190.067 73.664 189.75 73.483 cv
189.432 73.306 189.072 73.151 188.661 72.999 cv
188.657 72.998 li
187.514 72.584 185.978 72.2 184.427 71.813 cv
184.424 71.812 li
182.857 71.428 181.28 71.043 180.209 70.683 cv
180.207 70.682 li
179.668 70.504 179.253 70.324 179.035 70.193 cv
178.914 70.113 li
178.881 70.085 li
178.81 70.158 li
178.889 70.095 li
178.881 70.085 li
178.81 70.158 li
178.889 70.095 li
178.468 70.431 li
178.993 70.38 li
178.977 70.216 178.908 70.118 178.889 70.095 cv
178.468 70.431 li
178.993 70.38 li
178.325 70.445 li
178.997 70.445 li
178.993 70.38 li
178.325 70.445 li
178.997 70.445 li
178.454 70.445 li
178.885 70.8 li
178.906 70.779 178.997 70.645 178.997 70.445 cv
178.454 70.445 li
178.885 70.8 li
178.78 70.713 li
178.878 70.808 li
178.885 70.8 li
178.78 70.713 li
178.878 70.808 li
178.958 70.747 li
179.125 70.634 179.521 70.449 180.057 70.269 cv
180.053 70.27 li
181.122 69.911 182.762 69.525 184.43 69.144 cv
184.428 69.144 li
186.12 68.759 187.839 68.373 189.137 67.971 cv
189.136 67.971 li
189.795 67.766 190.34 67.562 190.794 67.314 cv
191.022 67.187 191.23 67.052 191.427 66.856 cv
191.618 66.664 191.827 66.378 191.874 65.967 cv
191.875 65.964 li
191.882 65.829 li
191.881 65.418 191.689 65.091 191.505 64.887 cv
191.22 64.574 190.913 64.402 190.557 64.226 cv
190.2 64.057 189.79 63.905 189.319 63.755 cv
189.315 63.754 li
188.007 63.346 186.23 62.961 184.436 62.576 cv
184.434 62.575 li
182.624 62.192 180.801 61.808 179.552 61.441 cv
179.549 61.44 li
178.921 61.259 178.432 61.076 178.165 60.936 cv
178.012 60.847 li
177.964 60.812 li
177.963 60.811 li
177.587 61.2 li
178.101 61.15 li
178.074 60.912 177.963 60.812 177.963 60.811 cv
177.587 61.2 li
178.101 61.15 li
177.391 61.219 li
178.104 61.219 li
178.101 61.15 li
177.391 61.219 li
178.104 61.219 li
177.43 61.219 li
178.039 61.513 li
178.072 61.446 178.105 61.337 178.104 61.219 cv
177.43 61.219 li
178.039 61.513 li
177.625 61.313 li
177.969 61.621 li
178.039 61.513 li
177.625 61.313 li
177.969 61.621 li
177.854 61.518 li
177.96 61.63 li
177.969 61.621 li
177.854 61.518 li
177.96 61.63 li
177.958 61.626 178.107 61.52 178.36 61.414 cv
178.614 61.303 178.968 61.179 179.399 61.052 cv
179.396 61.053 li
180.645 60.689 182.531 60.304 184.443 59.92 cv
184.441 59.92 li
186.378 59.535 188.34 59.15 189.806 58.75 cv
189.804 58.75 li
190.546 58.548 191.154 58.348 191.65 58.108 cv
191.9 57.986 192.123 57.857 192.339 57.667 cv
192.446 57.571 192.553 57.458 192.649 57.306 cv
192.743 57.156 192.824 56.961 192.848 56.738 cv
192.848 56.735 li
192.855 56.604 li
192.856 56.381 192.793 56.169 192.708 56.006 cv
192.554 55.717 192.362 55.549 192.175 55.41 cv
191.891 55.205 191.584 55.06 191.223 54.917 cv
190.863 54.776 190.452 54.644 189.985 54.514 cv
189.981 54.513 li
188.509 54.111 186.489 53.728 184.452 53.342 cv
184.451 53.342 li
182.396 52.958 180.33 52.573 178.902 52.203 cv
178.899 52.202 li
178.183 52.02 177.622 51.835 177.303 51.686 cv
177.144 51.615 177.049 51.548 177.046 51.543 cv
176.833 51.794 li
177.106 51.618 li
177.046 51.543 li
176.833 51.794 li
177.106 51.618 li
176.538 51.985 li
177.208 51.921 li
177.195 51.782 177.144 51.674 177.106 51.618 cv
176.538 51.985 li
177.208 51.921 li
177.208 51.919 li
176.462 51.992 li
177.212 51.992 li
177.208 51.919 li
176.462 51.992 li
177.212 51.992 li
176.508 51.992 li
177.127 52.332 li
177.168 52.26 177.213 52.133 177.212 51.992 cv
176.508 51.992 li
177.127 52.332 li
176.727 52.112 li
177.05 52.439 li
177.127 52.332 li
176.727 52.112 li
177.05 52.439 li
176.985 52.374 li
177.044 52.445 li
177.05 52.439 li
176.985 52.374 li
177.044 52.445 li
177.054 52.431 177.245 52.313 177.544 52.203 cv
177.844 52.087 178.254 51.96 178.749 51.831 cv
178.745 51.832 li
180.175 51.463 182.306 51.078 184.462 50.694 cv
184.461 50.695 li
186.641 50.309 188.845 49.925 190.479 49.527 cv
190.478 49.528 li
191.303 49.327 191.975 49.128 192.513 48.896 cv
192.783 48.777 193.022 48.655 193.254 48.472 cv
193.369 48.379 193.485 48.269 193.592 48.114 cv
193.698 47.962 193.796 47.754 193.822 47.508 cv
193.822 47.505 li
193.828 47.377 li
193.829 47.132 193.751 46.903 193.653 46.736 cv
193.475 46.44 193.269 46.285 193.068 46.15 cv
192.764 45.955 192.431 45.815 192.033 45.675 cv
191.637 45.537 191.179 45.407 190.658 45.277 cv
190.654 45.276 li
189.017 44.879 186.754 44.495 184.473 44.109 cv
184.14 46.081 li
186.414 46.465 188.663 46.85 190.182 47.22 cv
190.178 47.219 li
190.907 47.398 191.47 47.58 191.779 47.723 cv
191.955 47.813 li
192.006 47.846 li
192.089 47.741 li
191.993 47.834 li
192.006 47.846 li
192.089 47.741 li
191.993 47.834 li
192.373 47.467 li
191.901 47.698 li
191.993 47.834 li
192.373 47.467 li
191.901 47.698 li
192.556 47.377 li
191.828 47.377 li
191.828 47.505 191.863 47.623 191.901 47.698 cv
192.556 47.377 li
191.828 47.377 li
192.585 47.377 li
191.832 47.3 li
191.828 47.377 li
192.585 47.377 li
191.832 47.3 li
191.833 47.296 li
192.512 47.369 li
191.946 46.979 li
191.907 47.035 191.848 47.147 191.833 47.296 cv
192.512 47.369 li
191.946 46.979 li
192.229 47.174 li
192.005 46.909 li
191.946 46.979 li
192.229 47.174 li
192.005 46.909 li
192.006 46.91 191.952 46.95 191.852 46.999 cv
191.547 47.155 190.881 47.374 190.007 47.584 cv
190.005 47.584 li
188.481 47.956 186.291 48.341 184.113 48.725 cv
184.112 48.726 li
181.948 49.111 179.802 49.496 178.247 49.895 cv
178.243 49.896 li
177.487 50.095 176.875 50.29 176.379 50.527 cv
176.129 50.649 175.905 50.777 175.685 50.977 cv
175.577 51.079 175.467 51.202 175.374 51.37 cv
175.281 51.536 175.211 51.757 175.212 51.992 cv
175.218 52.114 li
175.217 52.113 li
175.24 52.348 175.328 52.552 175.427 52.704 cv
175.606 52.973 175.806 53.123 176.007 53.255 cv
176.311 53.448 176.646 53.592 177.042 53.734 cv
177.437 53.875 177.891 54.008 178.403 54.14 cv
178.401 54.139 li
179.945 54.538 182.026 54.923 184.083 55.308 cv
184.081 55.308 li
186.11 55.69 188.114 56.075 189.453 56.442 cv
189.449 56.441 li
190.089 56.618 190.58 56.797 190.836 56.931 cv
190.977 57.012 li
191.011 57.037 li
191.247 56.771 li
190.943 56.946 li
191.011 57.037 li
191.247 56.771 li
190.943 56.946 li
191.535 56.604 li
190.855 56.604 li
190.854 56.75 190.903 56.879 190.943 56.946 cv
191.535 56.604 li
190.855 56.604 li
191.584 56.604 li
190.859 56.529 li
190.855 56.604 li
191.584 56.604 li
190.859 56.529 li
190.859 56.526 li
191.511 56.595 li
190.952 56.246 li
190.918 56.3 190.872 56.399 190.859 56.526 cv
191.511 56.595 li
190.952 56.246 li
191.252 56.434 li
191.008 56.174 li
190.952 56.246 li
191.252 56.434 li
191.008 56.174 li
191.005 56.177 li
190.973 56.208 190.773 56.326 190.473 56.441 cv
190.171 56.559 189.765 56.689 189.28 56.82 cv
189.278 56.821 li
187.932 57.19 185.986 57.575 184.051 57.959 cv
184.049 57.959 li
182.129 58.346 180.226 58.729 178.837 59.133 cv
178.834 59.134 li
178.159 59.334 177.61 59.531 177.154 59.778 cv
176.925 59.904 176.715 60.04 176.515 60.248 cv
176.415 60.353 176.317 60.48 176.238 60.642 cv
176.159 60.804 176.103 61.006 176.104 61.219 cv
176.11 61.342 li
176.13 61.554 176.203 61.745 176.291 61.894 cv
176.448 62.157 176.634 62.318 176.821 62.455 cv
177.103 62.656 177.411 62.804 177.77 62.95 cv
178.128 63.093 178.534 63.228 178.992 63.361 cv
178.989 63.36 li
180.367 63.763 182.206 64.147 184.019 64.532 cv
184.017 64.532 li
185.801 64.914 187.559 65.299 188.718 65.662 cv
188.714 65.661 li
189.265 65.834 189.682 66.009 189.886 66.131 cv
189.994 66.202 li
190.013 66.218 li
190.275 65.958 li
189.949 66.123 li
190.013 66.218 li
190.275 65.958 li
189.949 66.123 li
190.529 65.829 li
189.882 65.829 li
189.881 65.95 189.916 66.059 189.949 66.123 cv
190.529 65.829 li
189.882 65.829 li
190.573 65.829 li
189.885 65.758 li
189.882 65.829 li
190.573 65.829 li
189.885 65.758 li
189.886 65.755 li
190.376 65.808 li
190.011 65.444 li
190.011 65.445 189.912 65.537 189.886 65.755 cv
190.376 65.808 li
190.011 65.444 li
189.988 65.463 li
189.928 65.511 189.754 65.612 189.506 65.718 cv
189.256 65.825 188.93 65.941 188.545 66.06 cv
188.544 66.061 li
187.375 66.424 185.674 66.81 183.984 67.194 cv
183.982 67.194 li
182.304 67.58 180.643 67.964 179.417 68.374 cv
179.413 68.375 li
178.821 68.579 178.334 68.78 177.92 69.037 cv
177.713 69.169 177.52 69.315 177.341 69.529 cv
177.167 69.737 176.996 70.057 176.996 70.445 cv
177.003 70.573 li
177.042 70.962 177.232 71.248 177.413 71.444 cv
177.693 71.74 177.999 71.917 178.353 72.095 cv
178.707 72.268 179.112 72.425 179.574 72.579 cv
179.572 72.579 li
180.783 72.984 182.379 73.369 183.947 73.754 cv
183.944 73.754 li
185.485 74.136 186.998 74.521 187.974 74.877 cv
187.97 74.876 li
188.43 75.043 188.771 75.213 188.925 75.321 cv
189.002 75.38 li
189.012 75.388 li
189.089 75.312 li
189.002 75.377 li
189.012 75.388 li
189.089 75.312 li
189.002 75.377 li
189.435 75.055 li
188.908 75.055 li
188.907 75.227 188.98 75.351 189.002 75.377 cv
189.435 75.055 li
188.908 75.055 li
189.551 75.055 li
188.912 74.988 li
188.908 75.055 li
189.551 75.055 li
188.912 74.988 li
188.912 74.985 li
189.368 75.034 li
189.01 74.722 li
189.006 74.727 188.931 74.814 188.912 74.985 cv
189.368 75.034 li
189.01 74.722 li
188.996 74.735 li
188.909 74.825 188.452 75.077 187.803 75.303 cv
187.8 75.304 li
186.812 75.663 185.356 76.048 183.909 76.431 cv
183.904 76.432 li
182.47 76.82 181.051 77.204 179.988 77.623 cv
179.983 77.624 li
179.473 77.83 179.046 78.036 178.678 78.307 cv
178.494 78.445 178.32 78.6 178.167 78.817 cv
178.017 79.029 177.888 79.329 177.889 79.668 cv
177.895 79.802 li
177.895 79.801 li
177.929 80.143 178.079 80.418 178.239 80.617 cv
178.485 80.919 178.764 81.111 179.077 81.294 cv
179.391 81.474 179.745 81.635 180.145 81.791 cv
180.141 81.79 li
181.187 82.203 182.542 82.588 183.866 82.973 cv
183.861 82.972 li
185.158 83.355 186.426 83.738 187.217 84.083 cv
187.21 84.08 li
187.58 84.243 187.846 84.403 187.954 84.495 cv
188.006 84.542 li
188.007 84.542 li
188.382 84.276 li
187.935 84.276 li
187.934 84.424 187.994 84.528 188.007 84.542 cv
188.382 84.276 li
187.935 84.276 li
188.511 84.276 li
187.938 84.217 li
187.935 84.276 li
188.511 84.276 li
187.938 84.217 li
187.938 84.214 li
188.335 84.257 li
188.006 84.012 li
188.001 84.018 187.952 84.089 187.938 84.214 cv
188.335 84.257 li
188.006 84.012 li
187.998 84.021 li
187.94 84.094 187.581 84.334 187.048 84.554 cv
187.042 84.556 li
186.235 84.908 185.025 85.29 183.82 85.676 cv
183.816 85.677 li
182.625 86.065 181.444 86.451 180.544 86.879 cv
180.536 86.883 li
180.107 87.094 179.74 87.31 179.422 87.595 cv
179.264 87.74 179.115 87.905 178.992 88.118 cv
178.871 88.328 178.78 88.599 178.781 88.89 cv
178.788 89.033 li
178.788 89.031 li
178.816 89.327 178.931 89.583 179.065 89.782 cv
179.27 90.082 179.517 90.289 179.788 90.479 cv
180.059 90.666 180.362 90.832 180.7 90.992 cv
180.693 90.989 li
181.576 91.415 182.69 91.801 183.77 92.185 cv
183.763 92.182 li
184.814 92.562 185.832 92.946 186.441 93.277 cv
186.915 92.397 li
186.432 93.272 li
186.712 93.425 186.902 93.57 186.972 93.644 cv
187.003 93.68 li
187.017 93.67 li
187.003 93.679 li
187.003 93.68 li
187.017 93.67 li
187.003 93.679 li
187.325 93.496 li
186.962 93.496 li
186.961 93.591 186.993 93.664 187.003 93.679 cv
187.325 93.496 li
186.962 93.496 li
187.429 93.496 li
186.964 93.448 li
186.962 93.496 li
187.429 93.496 li
186.964 93.448 li
186.965 93.445 li
187.268 93.477 li
187.003 93.313 li
186.965 93.445 li
187.268 93.477 li
187.003 93.313 li
186.965 93.358 li
186.878 93.451 186.63 93.633 186.273 93.819 cv
186.267 93.822 li
185.638 94.162 184.674 94.545 183.712 94.929 cv
183.705 94.932 li
182.757 95.322 181.814 95.708 181.072 96.158 cv
181.064 96.164 li
180.718 96.382 180.414 96.61 180.156 96.907 cv
179.904 97.198 179.674 97.605 179.673 98.107 cv
179.68 98.261 li
179.68 98.26 li
179.734 98.771 179.993 99.146 180.263 99.432 cv
180.542 99.721 180.865 99.952 181.231 100.175 cv
181.224 100.17 li
181.939 100.608 182.813 100.996 183.645 101.381 cv
183.638 101.377 li
184.443 101.754 185.209 102.135 185.638 102.442 cv
186.215 101.625 li
185.624 102.432 li
185.816 102.571 185.936 102.695 185.979 102.756 cv
186 102.788 li
186.002 102.792 li
186.205 102.706 li
185.988 102.706 li
186.002 102.792 li
186.205 102.706 li
185.988 102.706 li
186.296 102.706 li
185.99 102.674 li
185.988 102.706 li
186.296 102.706 li
185.99 102.674 li
185.99 102.676 li
186.207 102.698 li
185.997 102.635 li
185.99 102.676 li
186.207 102.698 li
185.997 102.635 li
186.055 102.653 li
186 102.627 li
185.997 102.635 li
186.055 102.653 li
186 102.627 li
186.005 102.644 185.828 102.872 185.47 103.111 cv
185.461 103.118 li
185.007 103.442 184.292 103.821 183.572 104.204 cv
183.558 104.211 li
182.854 104.604 182.145 104.995 181.57 105.475 cv
181.557 105.485 li
181.298 105.711 181.067 105.956 180.882 106.254 cv
180.7 106.548 180.564 106.914 180.565 107.316 cv
180.573 107.491 li
180.614 107.908 180.786 108.261 180.992 108.551 cv
181.201 108.844 181.452 109.089 181.731 109.32 cv
182.367 108.548 li
181.721 109.311 li
182.259 109.765 182.893 110.158 183.478 110.54 cv
184.023 109.701 li
183.463 110.529 li
184.025 110.906 184.536 111.276 184.792 111.548 cv
185.514 110.855 li
184.777 111.532 li
184.889 111.654 184.957 111.756 184.987 111.819 cv
185.016 111.903 li
185.019 111.903 li
185.016 111.903 li
185.019 111.903 li
185.016 111.903 li
185.016 111.905 li
185.015 111.916 185.005 111.971 184.945 112.072 cv
184.887 112.171 184.78 112.307 184.629 112.459 cv
184.618 112.47 li
184.325 112.777 183.855 113.149 183.372 113.541 cv
183.356 113.554 li
182.891 113.952 182.413 114.363 182.03 114.874 cv
182.015 114.894 li
181.696 115.344 181.456 115.886 181.455 116.5 cv
181.466 116.72 li
181.534 117.382 181.839 117.917 182.193 118.384 cv
182.987 117.777 li
182.178 118.365 li
182.517 118.829 182.906 119.23 183.242 119.602 cv
184.723 118.257 li
f
157.306 106.688 mo
157.651 106.15 158.057 105.575 158.41 104.952 cv
157.539 104.461 li
158.393 104.981 li
158.779 104.345 159.088 103.662 159.188 102.901 cv
159.188 102.899 li
159.207 102.754 159.216 102.609 159.216 102.465 cv
159.216 101.817 159.033 101.196 158.738 100.627 cv
158.721 100.597 li
158.324 99.896 157.776 99.292 157.225 98.71 cv
157.203 98.687 li
156.618 98.112 156.032 97.563 155.63 97.075 cv
155.614 97.056 li
155.189 96.574 154.993 96.16 154.971 95.91 cv
154.971 95.908 li
154.966 95.83 li
154.964 95.639 155.053 95.353 155.365 94.962 cv
154.584 94.338 li
155.348 94.984 li
155.714 94.545 156.39 94.003 157.134 93.453 cv
156.537 92.65 li
157.115 93.466 li
157.899 92.909 158.75 92.338 159.454 91.706 cv
158.784 90.963 li
159.439 91.719 li
159.807 91.399 160.131 91.065 160.393 90.69 cv
160.653 90.316 160.855 89.889 160.919 89.403 cv
160.919 89.401 li
160.931 89.306 160.937 89.21 160.937 89.115 cv
160.937 88.66 160.798 88.231 160.59 87.863 cv
160.38 87.491 160.103 87.167 159.781 86.862 cv
159.767 86.85 li
159.023 86.179 158.054 85.609 157.074 85.038 cv
157.062 85.03 li
156.052 84.465 155.031 83.908 154.347 83.407 cv
154.335 83.398 li
153.984 83.151 153.721 82.916 153.569 82.732 cv
153.413 82.545 153.384 82.431 153.384 82.41 cv
153.383 82.407 li
153.384 82.406 153.38 82.353 153.482 82.207 cv
153.582 82.066 153.783 81.863 154.079 81.644 cv
153.482 80.842 li
154.068 81.653 li
154.73 81.171 155.857 80.612 157.036 80.056 cv
156.608 79.152 li
157.025 80.061 li
158.247 79.5 159.528 78.936 160.547 78.323 cv
160.029 77.467 li
160.536 78.329 li
161.061 78.019 161.513 77.7 161.885 77.327 cv
162.25 76.956 162.568 76.502 162.649 75.907 cv
162.664 75.669 li
162.663 75.09 162.399 74.601 162.078 74.229 cv
161.751 73.851 161.345 73.541 160.868 73.243 cv
160.858 73.237 li
159.816 72.608 158.428 72.044 157.017 71.476 cv
157.009 71.473 li
155.57 70.911 154.112 70.351 153.119 69.83 cv
153.11 69.826 li
152.605 69.57 152.221 69.319 152.005 69.126 cv
151.897 69.03 151.833 68.951 151.807 68.911 cv
151.791 68.881 li
151.664 68.93 li
151.798 68.915 li
151.791 68.881 li
151.664 68.93 li
151.798 68.915 li
151.798 68.913 li
151.542 68.943 li
151.8 68.943 li
151.798 68.913 li
151.542 68.943 li
151.8 68.943 li
151.581 68.943 li
151.793 68.999 li
151.8 68.943 li
151.581 68.943 li
151.793 68.999 li
151.692 68.973 li
151.79 69.01 li
151.793 68.999 li
151.692 68.973 li
151.79 69.01 li
151.796 68.997 li
151.816 68.959 151.909 68.842 152.089 68.703 cv
152.267 68.562 152.526 68.397 152.85 68.225 cv
152.381 67.342 li
152.839 68.231 li
153.824 67.721 155.393 67.159 157.008 66.601 cv
157.001 66.603 li
158.661 66.041 160.371 65.477 161.688 64.879 cv
161.68 64.882 li
162.356 64.58 162.925 64.275 163.392 63.914 cv
163.624 63.732 163.834 63.535 164.012 63.293 cv
164.188 63.053 164.335 62.755 164.38 62.407 cv
164.38 62.408 li
164.393 62.198 li
164.394 61.856 164.283 61.538 164.131 61.285 cv
163.9 60.903 163.592 60.63 163.239 60.378 cv
162.885 60.129 162.475 59.905 162.007 59.687 cv
162 59.684 li
160.666 59.078 158.851 58.517 157.009 57.951 cv
157.004 57.95 li
155.136 57.389 153.241 56.826 151.931 56.294 cv
151.927 56.292 li
151.264 56.029 150.752 55.767 150.458 55.558 cv
150.312 55.456 150.223 55.368 150.195 55.331 cv
150.182 55.314 li
150.081 55.378 li
150.192 55.336 li
150.182 55.314 li
150.081 55.378 li
150.192 55.336 li
149.88 55.454 li
150.211 55.415 li
150.192 55.336 li
149.88 55.454 li
150.211 55.415 li
150.211 55.416 li
149.794 55.465 li
150.214 55.465 li
150.211 55.416 li
149.794 55.465 li
150.214 55.465 li
149.838 55.465 li
150.195 55.588 li
150.214 55.465 li
149.838 55.465 li
150.195 55.588 li
150.046 55.536 li
150.18 55.622 li
150.195 55.588 li
150.046 55.536 li
150.18 55.622 li
150.178 55.614 150.304 55.47 150.562 55.312 cv
150.818 55.15 151.193 54.962 151.661 54.771 cv
151.654 54.773 li
152.96 54.246 154.968 53.682 157.016 53.124 cv
157.012 53.125 li
159.106 52.561 161.246 51.998 162.861 51.411 cv
162.856 51.413 li
163.68 51.116 164.364 50.819 164.915 50.473 cv
165.19 50.298 165.436 50.11 165.652 49.868 cv
165.863 49.63 166.058 49.314 166.111 48.91 cv
166.123 48.716 li
166.124 48.316 165.962 47.964 165.77 47.711 cv
165.475 47.327 165.112 47.076 164.685 46.832 cv
164.257 46.592 163.757 46.374 163.178 46.159 cv
163.172 46.157 li
161.547 45.566 159.304 45.004 157.029 44.439 cv
156.547 46.38 li
158.811 46.941 161.031 47.504 162.488 48.036 cv
162.482 48.034 li
163.166 48.286 163.682 48.539 163.955 48.73 cv
164.092 48.823 164.163 48.899 164.17 48.911 cv
164.209 48.882 li
164.167 48.906 li
164.17 48.911 li
164.209 48.882 li
164.167 48.906 li
164.501 48.716 li
164.123 48.716 li
164.122 48.811 164.155 48.888 164.167 48.906 cv
164.501 48.716 li
164.123 48.716 li
164.597 48.716 li
164.127 48.656 li
164.123 48.716 li
164.597 48.716 li
164.127 48.656 li
164.481 48.701 li
164.162 48.537 li
164.127 48.656 li
164.481 48.701 li
164.162 48.537 li
164.16 48.536 li
164.122 48.589 163.913 48.764 163.569 48.942 cv
163.225 49.125 162.752 49.326 162.181 49.53 cv
162.176 49.532 li
160.707 50.068 158.587 50.631 156.492 51.193 cv
156.488 51.195 li
154.428 51.759 152.394 52.321 150.907 52.918 cv
150.9 52.921 li
150.196 53.212 149.617 53.504 149.146 53.862 cv
148.911 54.043 148.699 54.243 148.523 54.501 cv
148.349 54.755 148.213 55.093 148.214 55.465 cv
148.224 55.648 li
148.225 55.65 li
148.27 56.026 148.438 56.336 148.631 56.578 cv
148.926 56.941 149.287 57.201 149.71 57.451 cv
150.134 57.698 150.625 57.925 151.184 58.149 cv
151.18 58.148 li
152.642 58.739 154.561 59.303 156.428 59.865 cv
156.423 59.863 li
158.252 60.422 160.036 60.985 161.17 61.504 cv
161.163 61.5 li
161.689 61.743 162.073 61.982 162.265 62.151 cv
162.362 62.234 162.407 62.297 162.413 62.309 cv
162.42 62.305 li
162.413 62.308 li
162.413 62.309 li
162.42 62.305 li
162.413 62.308 li
162.657 62.198 li
162.393 62.198 li
162.413 62.308 li
162.657 62.198 li
162.393 62.198 li
162.738 62.198 li
162.396 62.154 li
162.393 62.198 li
162.738 62.198 li
162.396 62.154 li
162.396 62.155 li
162.62 62.184 li
162.411 62.093 li
162.396 62.155 li
162.62 62.184 li
162.411 62.093 li
162.424 62.099 li
162.412 62.092 li
162.411 62.093 li
162.424 62.099 li
162.412 62.092 li
162.408 62.11 162.277 62.271 162.007 62.449 cv
161.74 62.631 161.349 62.841 160.867 63.055 cv
160.859 63.059 li
159.705 63.585 158.022 64.147 156.36 64.709 cv
156.354 64.711 li
154.724 65.277 153.117 65.84 151.923 66.453 cv
151.912 66.459 li
151.357 66.755 150.89 67.058 150.509 67.432 cv
150.32 67.62 150.15 67.83 150.018 68.08 cv
149.888 68.329 149.799 68.628 149.8 68.943 cv
149.812 69.148 li
149.811 69.146 li
149.849 69.468 149.971 69.754 150.126 69.993 cv
150.36 70.354 150.662 70.631 151.009 70.889 cv
151.356 71.145 151.754 71.379 152.202 71.608 cv
152.656 70.717 li
152.193 71.603 li
153.358 72.21 154.848 72.773 156.28 73.335 cv
156.272 73.332 li
157.666 73.889 159.008 74.451 159.821 74.947 cv
160.34 74.092 li
159.812 74.941 li
160.18 75.168 160.436 75.384 160.56 75.531 cv
160.662 75.679 li
160.666 75.691 li
160.764 75.669 li
160.664 75.669 li
160.666 75.691 li
160.764 75.669 li
160.664 75.669 li
160.798 75.669 li
160.665 75.652 li
160.664 75.669 li
160.798 75.669 li
160.665 75.652 li
160.664 75.653 li
160.659 75.679 160.583 75.816 160.388 75.993 cv
160.196 76.17 159.9 76.384 159.522 76.605 cv
159.512 76.611 li
158.669 77.122 157.424 77.68 156.192 78.243 cv
156.181 78.249 li
154.983 78.818 153.799 79.384 152.897 80.031 cv
152.885 80.04 li
152.48 80.343 152.132 80.661 151.857 81.041 cv
151.586 81.417 151.383 81.885 151.383 82.407 cv
151.398 82.645 li
151.463 83.186 151.72 83.635 152.032 84.011 cv
152.348 84.389 152.736 84.716 153.181 85.032 cv
153.758 84.215 li
153.169 85.023 li
154.027 85.647 155.088 86.215 156.083 86.774 cv
156.572 85.902 li
156.07 86.767 li
157.028 87.32 157.924 87.872 158.422 88.33 cv
159.095 87.59 li
158.409 88.318 li
158.626 88.522 158.77 88.706 158.847 88.843 cv
158.924 88.983 158.936 89.063 158.937 89.115 cv
158.935 89.149 li
158.935 89.148 li
158.926 89.225 158.882 89.36 158.751 89.549 cv
158.622 89.736 158.411 89.964 158.129 90.207 cv
158.115 90.22 li
157.57 90.713 156.763 91.266 155.959 91.834 cv
155.941 91.848 li
155.171 92.423 154.406 93.006 153.82 93.692 cv
153.803 93.714 li
153.32 94.317 152.968 95.025 152.966 95.83 cv
152.966 95.934 152.972 96.039 152.984 96.143 cv
152.984 96.141 li
153.093 97.014 153.55 97.725 154.105 98.369 cv
154.859 97.713 li
154.089 98.351 li
154.617 98.986 155.243 99.562 155.799 100.111 cv
156.501 99.399 li
155.776 100.089 li
156.296 100.632 156.744 101.155 156.978 101.577 cv
157.85 101.087 li
156.961 101.546 li
157.142 101.897 157.215 102.194 157.216 102.465 cv
157.204 102.648 li
157.204 102.646 li
157.16 103.009 156.985 103.45 156.685 103.941 cv
156.668 103.97 li
156.386 104.471 156 105.022 155.623 105.607 cv
157.306 106.688 li
f
132.668 78.087 mo
133.042 77.265 133.541 76.399 134.024 75.499 cv
133.143 75.026 li
133.992 75.554 li
134.567 74.625 135.068 73.66 135.326 72.617 cv
135.419 72.238 135.465 71.853 135.465 71.47 cv
135.466 70.737 135.295 70.015 134.99 69.329 cv
134.959 69.265 li
134.392 68.207 133.508 67.277 132.555 66.365 cv
132.514 66.328 li
131.455 65.426 130.325 64.551 129.47 63.725 cv
129.44 63.697 li
128.513 62.884 127.969 62.105 127.865 61.578 cv
127.839 61.344 li
127.84 61.159 127.886 60.956 128.014 60.704 cv
128.142 60.455 128.355 60.164 128.662 59.853 cv
127.949 59.151 li
128.63 59.884 li
129.441 59.123 130.883 58.249 132.458 57.381 cv
131.974 56.506 li
132.433 57.394 li
134.123 56.519 135.948 55.632 137.412 54.706 cv
136.877 53.861 li
137.392 54.718 li
138.167 54.252 138.836 53.777 139.375 53.258 cv
139.909 52.738 140.338 52.165 140.518 51.454 cv
140.518 51.453 li
140.564 51.265 140.588 51.071 140.588 50.878 cv
140.588 50.209 140.308 49.606 139.915 49.107 cv
139.517 48.603 138.997 48.165 138.369 47.741 cv
138.347 47.726 li
136.832 46.767 134.689 45.884 132.449 44.994 cv
131.713 46.853 li
133.924 47.727 136.016 48.61 137.274 49.414 cv
137.811 48.57 li
137.252 49.4 li
137.767 49.745 138.135 50.076 138.341 50.341 cv
138.551 50.612 138.588 50.778 138.588 50.878 cv
138.576 50.977 li
138.576 50.976 li
138.539 51.146 138.366 51.455 137.986 51.819 cv
137.611 52.182 137.054 52.589 136.362 53.004 cv
136.342 53.016 li
135.025 53.852 133.229 54.731 131.514 55.618 cv
131.489 55.631 li
129.875 56.528 128.35 57.42 127.268 58.419 cv
127.237 58.45 li
126.824 58.87 126.482 59.31 126.235 59.791 cv
125.988 60.271 125.838 60.799 125.839 61.344 cv
125.839 61.569 125.864 61.795 125.914 62.017 cv
126.207 63.254 127.057 64.241 128.11 65.191 cv
128.775 64.444 li
128.081 65.164 li
129.054 66.101 130.207 66.988 131.216 67.85 cv
131.865 67.089 li
131.176 67.813 li
132.074 68.664 132.825 69.5 133.193 70.203 cv
134.076 69.734 li
133.162 70.14 li
133.37 70.609 133.465 71.045 133.465 71.47 cv
133.465 71.693 133.439 71.914 133.383 72.141 cv
133.383 72.14 li
133.208 72.863 132.813 73.664 132.293 74.499 cv
132.261 74.554 li
131.799 75.417 131.279 76.315 130.848 77.257 cv
132.668 78.087 li
f
81.004 67.229 mo
81.062 67.36 81.077 67.449 81.077 67.514 cv
81.075 67.611 81.05 67.679 80.967 67.791 cv
80.845 67.956 80.583 68.15 80.311 68.389 cv
80.176 68.51 80.037 68.648 79.92 68.828 cv
79.804 69.007 79.715 69.241 79.716 69.499 cv
79.736 69.721 li
79.735 69.715 li
79.736 69.722 li
79.748 69.844 li
79.753 70.094 79.582 70.361 79.351 70.574 cv
79.239 70.679 79.122 70.764 79.036 70.82 cv
78.935 70.883 li
78.91 70.897 li
78.907 70.899 li
79.362 71.778 li
79.386 71.764 79.695 71.605 80.026 71.298 cv
80.35 70.995 80.732 70.515 80.738 69.844 cv
80.738 69.746 80.729 69.646 80.71 69.544 cv
80.71 69.545 li
80.706 69.499 li
80.707 69.446 80.719 69.401 80.804 69.295 cv
80.927 69.141 81.202 68.945 81.48 68.689 cv
81.618 68.559 81.76 68.408 81.874 68.213 cv
81.988 68.021 82.068 67.777 82.067 67.514 cv
82.067 67.288 82.012 67.056 81.907 66.824 cv
81.004 67.229 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
84.472 66.891 mo
84.368 67.123 84.312 67.355 84.312 67.58 cv
84.31 67.934 84.455 68.24 84.628 68.46 cv
84.888 68.792 85.2 69.001 85.407 69.191 cv
85.511 69.284 85.587 69.367 85.626 69.429 cv
85.673 69.563 li
85.668 69.61 li
85.65 69.711 85.641 69.811 85.641 69.909 cv
85.647 70.58 86.029 71.06 86.352 71.364 cv
86.683 71.672 86.992 71.831 87.016 71.844 cv
87.472 70.966 li
87.469 70.964 li
87.433 70.945 87.192 70.806 86.986 70.601 cv
86.774 70.392 86.627 70.144 86.631 69.909 cv
86.642 69.786 li
86.663 69.563 li
86.664 69.216 86.506 68.927 86.335 68.726 cv
86.076 68.422 85.776 68.225 85.576 68.032 cv
85.475 67.938 85.402 67.852 85.36 67.78 cv
85.302 67.58 li
85.303 67.516 85.317 67.427 85.375 67.296 cv
84.472 66.891 li
f
82.619 67.026 mo
82.625 67.797 82.391 68.237 82.373 68.894 cv
82.372 69.122 82.418 69.372 82.531 69.612 cv
82.644 69.853 82.815 70.081 83.048 70.314 cv
83.171 70.443 83.204 70.55 83.209 70.72 cv
83.213 70.958 83.086 71.293 82.936 71.554 cv
82.863 71.685 82.788 71.799 82.731 71.881 cv
82.659 71.984 li
82.629 72.027 li
82.604 72.066 li
82.579 72.117 li
82.57 72.149 82.544 72.174 82.538 72.315 cv
82.539 72.379 82.548 72.509 82.661 72.642 cv
82.777 72.776 82.951 72.815 83.034 72.81 cv
83.189 72.803 83.228 72.767 83.265 72.753 cv
83.35 72.697 li
83.418 72.634 li
83.488 72.565 li
82.788 71.864 li
82.717 71.935 li
82.716 71.937 li
82.993 72.253 li
82.748 71.912 li
82.716 71.937 li
82.993 72.253 li
82.748 71.912 li
83.028 72.302 li
82.805 71.876 li
82.748 71.912 li
83.028 72.302 li
82.805 71.876 li
83.034 72.313 li
83.034 71.82 li
82.878 71.827 82.84 71.863 82.805 71.876 cv
83.034 72.313 li
83.034 71.82 li
83.034 72.315 li
83.405 71.988 li
83.29 71.854 83.116 71.816 83.034 71.82 cv
83.034 72.315 li
83.405 71.988 li
83.034 72.315 li
83.528 72.315 li
83.528 72.25 83.518 72.12 83.405 71.988 cv
83.034 72.315 li
83.528 72.315 li
83.038 72.315 li
83.488 72.509 li
83.497 72.478 83.522 72.454 83.528 72.315 cv
83.038 72.315 li
83.488 72.509 li
83.131 72.355 li
83.453 72.575 li
83.488 72.509 li
83.131 72.355 li
83.453 72.575 li
83.463 72.56 83.525 72.476 83.596 72.37 cv
83.809 72.039 84.188 71.448 84.199 70.72 cv
84.203 70.353 84.072 69.933 83.748 69.615 cv
83.572 69.438 83.478 69.3 83.428 69.193 cv
83.379 69.086 83.365 69.006 83.363 68.894 cv
83.346 68.583 83.603 67.984 83.609 67.026 cv
82.619 67.026 li
f
82.714 62.287 mo
83.704 62.287 li
83.704 57.9296 li
82.714 57.9296 li
cp
f
80.364 67.094 mo
83.226 62.135 li
86.089 67.094 li
80.364 67.094 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
80.364 67.094 mo
80.793 67.341 li
83.226 63.125 li
85.232 66.599 li
80.364 66.599 li
80.364 67.094 li
80.793 67.341 li
80.364 67.094 li
80.364 67.589 li
86.947 67.589 li
83.226 61.145 li
79.507 67.589 li
80.364 67.589 li
80.364 67.094 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
106.058 63.969 mo
106.117 64.1 106.131 64.189 106.131 64.254 cv
106.129 64.351 106.104 64.418 106.021 64.53 cv
105.899 64.696 105.637 64.89 105.365 65.128 cv
105.23 65.25 105.091 65.387 104.974 65.568 cv
104.858 65.746 104.769 65.98 104.77 66.238 cv
104.79 66.461 li
104.801 66.583 li
104.807 66.833 104.635 67.101 104.405 67.314 cv
104.293 67.418 104.176 67.504 104.09 67.56 cv
103.989 67.623 li
103.964 67.637 li
103.961 67.638 li
104.416 68.518 li
104.44 68.504 104.75 68.345 105.08 68.038 cv
105.404 67.734 105.786 67.254 105.791 66.583 cv
105.791 66.486 105.783 66.385 105.764 66.284 cv
105.76 66.238 li
105.761 66.185 105.773 66.14 105.858 66.035 cv
105.981 65.88 106.256 65.684 106.534 65.429 cv
106.672 65.299 106.814 65.148 106.928 64.953 cv
107.042 64.76 107.122 64.517 107.121 64.254 cv
107.121 64.028 107.066 63.796 106.961 63.564 cv
106.058 63.969 li
f
109.526 63.63 mo
109.421 63.862 109.366 64.094 109.366 64.32 cv
109.364 64.674 109.509 64.98 109.681 65.2 cv
109.941 65.532 110.253 65.742 110.46 65.932 cv
110.564 66.025 110.64 66.108 110.679 66.169 cv
110.726 66.304 li
110.721 66.351 li
110.721 66.352 li
110.703 66.452 110.694 66.552 110.694 66.649 cv
110.7 67.321 111.083 67.801 111.406 68.105 cv
111.737 68.412 112.047 68.571 112.071 68.585 cv
112.526 67.705 li
112.523 67.704 li
112.487 67.685 112.246 67.546 112.04 67.341 cv
111.827 67.132 111.68 66.884 111.684 66.649 cv
111.695 66.528 li
111.695 66.529 li
111.716 66.304 li
111.717 65.957 111.559 65.668 111.388 65.467 cv
111.129 65.163 110.83 64.965 110.63 64.773 cv
110.529 64.679 110.455 64.592 110.414 64.52 cv
110.356 64.32 li
110.356 64.256 110.371 64.166 110.429 64.035 cv
109.526 63.63 li
f
107.673 63.767 mo
107.679 64.538 107.445 64.978 107.427 65.635 cv
107.426 65.863 107.472 66.113 107.585 66.353 cv
107.698 66.594 107.87 66.822 108.102 67.055 cv
108.225 67.183 108.258 67.29 108.263 67.46 cv
108.267 67.698 108.14 68.033 107.99 68.295 cv
107.917 68.426 107.842 68.54 107.785 68.622 cv
107.712 68.725 li
107.682 68.768 li
107.658 68.806 li
107.633 68.857 li
107.624 68.889 107.598 68.914 107.592 69.056 cv
107.592 69.121 107.602 69.247 107.711 69.378 cv
107.821 69.512 107.998 69.556 108.087 69.551 cv
108.244 69.544 108.283 69.507 108.319 69.493 cv
108.404 69.438 li
108.472 69.375 li
108.542 69.305 li
107.841 68.606 li
107.77 68.677 li
107.769 68.678 li
108.046 68.994 li
107.8 68.653 li
107.769 68.678 li
108.046 68.994 li
107.8 68.653 li
108.081 69.043 li
107.857 68.618 li
107.8 68.653 li
108.081 69.043 li
107.857 68.618 li
108.087 69.054 li
108.087 68.561 li
107.93 68.568 107.893 68.605 107.857 68.618 cv
108.087 69.054 li
108.087 68.561 li
108.087 69.056 li
108.463 68.734 li
108.352 68.6 108.175 68.556 108.087 68.561 cv
108.087 69.056 li
108.463 68.734 li
108.087 69.056 li
108.582 69.056 li
108.581 68.991 108.571 68.865 108.463 68.734 cv
108.087 69.056 li
108.582 69.056 li
108.091 69.056 li
108.541 69.251 li
108.55 69.22 108.575 69.197 108.582 69.056 cv
108.091 69.056 li
108.541 69.251 li
108.132 69.073 li
108.51 69.311 li
108.541 69.251 li
108.132 69.073 li
108.51 69.311 li
108.365 69.22 li
108.506 69.317 li
108.51 69.311 li
108.365 69.22 li
108.506 69.317 li
108.516 69.302 108.578 69.218 108.649 69.112 cv
108.862 68.781 109.242 68.189 109.253 67.46 cv
109.258 67.093 109.126 66.672 108.802 66.355 cv
108.625 66.178 108.532 66.041 108.482 65.934 cv
108.433 65.826 108.419 65.747 108.417 65.635 cv
108.4 65.324 108.657 64.724 108.663 63.767 cv
107.673 63.767 li
f
107.767 59.027 mo
108.757 59.027 li
108.757 54.6686 li
107.767 54.6686 li
cp
f
105.419 63.832 mo
108.28 58.875 li
111.143 63.832 li
105.419 63.832 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
105.419 63.832 mo
105.848 64.079 li
108.28 59.865 li
110.285 63.337 li
105.419 63.337 li
105.419 63.832 li
105.848 64.079 li
105.419 63.832 li
105.419 64.327 li
112 64.327 li
108.28 57.885 li
104.562 64.327 li
105.419 64.327 li
105.419 63.832 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
63.816 89.318 mo
63.875 89.449 63.889 89.539 63.889 89.603 cv
63.887 89.701 63.862 89.768 63.779 89.88 cv
63.657 90.046 63.395 90.24 63.124 90.478 cv
62.989 90.599 62.849 90.737 62.733 90.917 cv
62.616 91.096 62.527 91.33 62.528 91.587 cv
62.549 91.812 li
62.55 91.816 li
62.549 91.811 li
62.56 91.932 li
62.566 92.181 62.394 92.449 62.163 92.663 cv
62.051 92.768 61.933 92.853 61.847 92.91 cv
61.745 92.973 li
61.72 92.987 li
61.717 92.988 li
62.173 93.867 li
62.197 93.854 62.507 93.694 62.838 93.387 cv
63.161 93.083 63.545 92.604 63.55 91.932 cv
63.55 91.835 63.541 91.735 63.523 91.634 cv
63.524 91.639 li
63.523 91.634 li
63.518 91.587 li
63.52 91.535 63.532 91.49 63.616 91.384 cv
63.739 91.23 64.014 91.034 64.292 90.779 cv
64.431 90.648 64.572 90.497 64.686 90.303 cv
64.8 90.11 64.88 89.867 64.879 89.603 cv
64.879 89.378 64.824 89.145 64.719 88.913 cv
63.816 89.318 li
f
67.283 88.979 mo
67.179 89.211 67.123 89.443 67.124 89.668 cv
67.122 90.022 67.267 90.328 67.439 90.548 cv
67.699 90.88 68.012 91.089 68.219 91.28 cv
68.323 91.372 68.399 91.456 68.438 91.517 cv
68.485 91.653 li
68.48 91.7 li
68.462 91.8 68.453 91.9 68.453 91.997 cv
68.459 92.668 68.841 93.148 69.165 93.452 cv
69.495 93.76 69.805 93.92 69.829 93.933 cv
70.285 93.055 li
70.282 93.053 li
70.246 93.034 70.005 92.895 69.799 92.689 cv
69.587 92.48 69.439 92.232 69.443 91.997 cv
69.454 91.876 li
69.475 91.653 li
69.476 91.306 69.318 91.016 69.147 90.815 cv
68.888 90.51 68.588 90.313 68.388 90.12 cv
68.287 90.026 68.213 89.94 68.172 89.868 cv
68.114 89.668 li
68.114 89.604 68.128 89.515 68.187 89.384 cv
67.283 88.979 li
f
65.431 89.115 mo
65.437 89.886 65.202 90.326 65.185 90.983 cv
65.184 91.211 65.229 91.461 65.343 91.701 cv
65.456 91.942 65.627 92.17 65.86 92.403 cv
65.863 92.406 li
65.86 92.402 li
65.983 92.531 66.016 92.638 66.021 92.808 cv
66.025 93.046 65.898 93.381 65.748 93.642 cv
65.675 93.774 65.6 93.887 65.543 93.97 cv
65.47 94.074 li
65.439 94.118 li
65.414 94.158 li
65.389 94.21 li
65.38 94.242 65.355 94.27 65.35 94.404 cv
65.35 94.472 65.362 94.6 65.471 94.728 cv
65.58 94.859 65.754 94.904 65.845 94.9 cv
65.993 94.894 66.034 94.859 66.071 94.846 cv
66.158 94.789 li
66.229 94.725 li
66.299 94.656 li
65.601 93.954 li
65.53 94.023 li
65.531 94.024 li
65.807 94.344 li
65.564 93.998 li
65.531 94.024 li
65.807 94.344 li
65.564 93.998 li
65.84 94.391 li
65.622 93.963 li
65.564 93.998 li
65.84 94.391 li
65.622 93.963 li
65.845 94.402 li
65.845 93.91 li
65.698 93.915 65.658 93.949 65.622 93.963 cv
65.845 94.402 li
65.845 93.91 li
65.845 94.404 li
66.219 94.08 li
66.11 93.95 65.936 93.905 65.845 93.91 cv
65.845 94.404 li
66.219 94.08 li
65.846 94.404 li
66.34 94.404 li
66.34 94.336 66.327 94.209 66.219 94.08 cv
65.846 94.404 li
66.34 94.404 li
65.849 94.404 li
66.302 94.594 li
66.31 94.564 66.334 94.537 66.34 94.404 cv
65.849 94.404 li
66.302 94.594 li
65.942 94.443 li
66.266 94.663 li
66.302 94.594 li
65.942 94.443 li
66.266 94.663 li
66.275 94.648 66.337 94.564 66.408 94.458 cv
66.62 94.127 67 93.536 67.011 92.808 cv
67.015 92.441 66.884 92.021 66.56 91.703 cv
66.563 91.706 li
66.56 91.702 li
66.383 91.526 66.289 91.388 66.24 91.282 cv
66.191 91.174 66.176 91.094 66.175 90.983 cv
66.158 90.672 66.415 90.072 66.421 89.115 cv
65.431 89.115 li
f
63.176 89.182 mo
66.038 84.225 li
68.901 89.182 li
63.176 89.182 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
63.176 89.182 mo
63.605 89.43 li
66.038 85.215 li
68.043 88.687 li
63.176 88.687 li
63.176 89.182 li
63.605 89.43 li
63.176 89.182 li
63.176 89.677 li
69.758 89.677 li
66.038 83.235 li
62.319 89.677 li
63.176 89.677 li
63.176 89.182 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
94.311 89.97 mo
94.369 90.101 94.384 90.191 94.384 90.255 cv
94.382 90.352 94.357 90.42 94.274 90.532 cv
94.152 90.698 93.89 90.891 93.619 91.129 cv
93.484 91.251 93.345 91.388 93.228 91.568 cv
93.111 91.746 93.022 91.98 93.024 92.237 cv
93.045 92.463 li
93.044 92.461 li
93.055 92.583 li
93.061 92.832 92.889 93.101 92.658 93.315 cv
92.546 93.419 92.429 93.505 92.342 93.561 cv
92.241 93.624 li
92.216 93.638 li
92.213 93.64 li
92.668 94.519 li
92.692 94.505 93.002 94.346 93.333 94.038 cv
93.657 93.734 94.04 93.254 94.045 92.583 cv
94.045 92.485 94.037 92.386 94.019 92.285 cv
94.018 92.283 li
94.018 92.284 li
94.014 92.237 li
94.015 92.186 94.026 92.141 94.111 92.036 cv
94.234 91.882 94.509 91.686 94.787 91.43 cv
94.925 91.3 95.067 91.149 95.181 90.954 cv
95.295 90.762 95.375 90.519 95.374 90.255 cv
95.374 90.03 95.319 89.798 95.215 89.566 cv
94.311 89.97 li
f
97.778 89.632 mo
97.674 89.864 97.618 90.096 97.618 90.321 cv
97.616 90.675 97.761 90.981 97.933 91.201 cv
98.194 91.533 98.506 91.742 98.713 91.932 cv
98.817 92.025 98.893 92.108 98.932 92.17 cv
98.979 92.305 li
98.974 92.352 li
98.974 92.351 li
98.956 92.452 98.947 92.552 98.947 92.65 cv
98.953 93.321 99.335 93.802 99.659 94.106 cv
99.989 94.413 100.299 94.573 100.323 94.586 cv
100.779 93.708 li
100.776 93.706 li
100.74 93.687 100.499 93.548 100.293 93.342 cv
100.08 93.133 99.933 92.885 99.937 92.65 cv
99.948 92.528 li
99.969 92.305 li
99.97 91.958 99.812 91.668 99.641 91.468 cv
99.382 91.163 99.082 90.966 98.882 90.773 cv
98.781 90.679 98.708 90.593 98.666 90.521 cv
98.608 90.321 li
98.609 90.257 98.623 90.168 98.681 90.037 cv
97.778 89.632 li
f
95.926 89.768 mo
95.932 90.539 95.697 90.979 95.68 91.636 cv
95.679 91.864 95.724 92.114 95.838 92.354 cv
95.951 92.595 96.122 92.823 96.355 93.056 cv
96.359 93.059 li
96.355 93.055 li
96.477 93.184 96.511 93.291 96.515 93.461 cv
96.52 93.699 96.392 94.035 96.243 94.297 cv
96.169 94.428 96.095 94.542 96.037 94.624 cv
95.965 94.727 li
95.935 94.77 li
95.911 94.809 li
95.886 94.86 li
95.877 94.891 95.851 94.917 95.845 95.057 cv
95.845 95.12 95.852 95.244 95.962 95.378 cv
96.075 95.515 96.255 95.558 96.34 95.553 cv
96.496 95.546 96.535 95.51 96.572 95.496 cv
96.656 95.44 li
96.725 95.377 li
96.795 95.307 li
96.094 94.608 li
96.023 94.679 li
96.022 94.68 li
96.3 94.996 li
96.053 94.655 li
96.022 94.68 li
96.3 94.996 li
96.053 94.655 li
96.334 95.045 li
96.11 94.62 li
96.053 94.655 li
96.334 95.045 li
96.11 94.62 li
96.34 95.056 li
96.34 94.563 li
96.184 94.57 96.146 94.606 96.11 94.62 cv
96.34 95.056 li
96.34 94.563 li
96.34 95.058 li
96.717 94.737 li
96.605 94.601 96.425 94.558 96.34 94.563 cv
96.34 95.058 li
96.717 94.737 li
96.34 95.057 li
96.834 95.057 li
96.834 94.996 96.827 94.871 96.717 94.737 cv
96.34 95.057 li
96.834 95.057 li
96.344 95.057 li
96.794 95.252 li
96.803 95.222 96.828 95.198 96.834 95.057 cv
96.344 95.057 li
96.794 95.252 li
96.438 95.098 li
96.759 95.318 li
96.794 95.252 li
96.438 95.098 li
96.759 95.318 li
96.77 95.303 96.832 95.219 96.903 95.112 cv
97.115 94.782 97.494 94.189 97.505 93.461 cv
97.51 93.094 97.378 92.674 97.055 92.356 cv
97.052 92.352 li
97.055 92.355 li
96.878 92.179 96.784 92.041 96.735 91.935 cv
96.686 91.827 96.671 91.747 96.67 91.636 cv
96.653 91.325 96.91 90.725 96.916 89.768 cv
95.926 89.768 li
f
96.019 85.029 mo
97.009 85.029 li
97.009 80.6696 li
96.019 80.6696 li
cp
f
93.671 89.834 mo
96.532 84.876 li
99.395 89.834 li
93.671 89.834 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
93.671 89.834 mo
94.1 90.081 li
96.532 85.866 li
98.537 89.339 li
93.671 89.339 li
93.671 89.834 li
94.1 90.081 li
93.671 89.834 li
93.671 90.329 li
100.252 90.329 li
96.532 83.886 li
92.814 90.329 li
93.671 90.329 li
93.671 89.834 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
83.344 121.663 mo
83.402 121.794 83.417 121.884 83.417 121.948 cv
83.415 122.046 83.39 122.114 83.307 122.226 cv
83.185 122.392 82.923 122.586 82.651 122.824 cv
82.516 122.946 82.377 123.083 82.26 123.264 cv
82.144 123.442 82.055 123.677 82.056 123.934 cv
82.076 124.157 li
82.087 124.279 li
82.093 124.528 81.921 124.796 81.69 125.009 cv
81.579 125.114 81.462 125.199 81.375 125.255 cv
81.274 125.318 li
81.249 125.332 li
81.246 125.334 li
81.701 126.213 li
81.725 126.2 82.035 126.041 82.366 125.733 cv
82.689 125.43 83.072 124.95 83.077 124.279 cv
83.077 124.181 83.069 124.081 83.05 123.98 cv
83.046 123.934 li
83.048 123.881 83.059 123.836 83.144 123.73 cv
83.267 123.576 83.542 123.38 83.82 123.124 cv
83.958 122.994 84.1 122.843 84.214 122.648 cv
84.328 122.455 84.408 122.212 84.407 121.948 cv
84.407 121.723 84.352 121.491 84.248 121.259 cv
83.344 121.663 li
f
86.81 121.326 mo
86.706 121.558 86.65 121.79 86.651 122.015 cv
86.649 122.37 86.794 122.676 86.966 122.896 cv
87.227 123.228 87.539 123.437 87.746 123.628 cv
87.851 123.72 87.927 123.804 87.966 123.865 cv
88.013 124 li
88.008 124.047 li
88.009 124.044 li
88.008 124.046 li
87.99 124.147 87.981 124.248 87.981 124.346 cv
87.987 125.016 88.369 125.495 88.692 125.799 cv
89.023 126.106 89.332 126.266 89.356 126.279 cv
89.812 125.401 li
89.809 125.399 li
89.773 125.38 89.532 125.241 89.326 125.036 cv
89.114 124.827 88.967 124.579 88.971 124.346 cv
88.982 124.224 li
88.982 124.227 li
88.982 124.223 li
89.003 124 li
89.004 123.653 88.846 123.363 88.675 123.163 cv
88.415 122.858 88.115 122.661 87.915 122.468 cv
87.814 122.374 87.74 122.288 87.699 122.216 cv
87.641 122.015 li
87.641 121.951 87.655 121.862 87.714 121.731 cv
86.81 121.326 li
f
84.959 121.461 mo
84.965 122.233 84.73 122.672 84.713 123.329 cv
84.712 123.557 84.758 123.808 84.871 124.048 cv
84.984 124.289 85.156 124.517 85.389 124.75 cv
85.511 124.878 85.544 124.984 85.549 125.154 cv
85.553 125.391 85.425 125.727 85.276 125.989 cv
85.202 126.12 85.127 126.234 85.07 126.317 cv
84.997 126.42 li
84.967 126.464 li
84.942 126.503 li
84.917 126.555 li
84.908 126.586 84.883 126.613 84.877 126.75 cv
84.877 126.816 84.888 126.944 84.998 127.075 cv
85.11 127.208 85.285 127.251 85.372 127.246 cv
85.525 127.24 85.564 127.204 85.601 127.19 cv
85.687 127.134 li
85.757 127.07 li
85.827 127.001 li
85.128 126.3 li
85.056 126.371 li
85.056 126.372 li
85.333 126.69 li
85.088 126.346 li
85.056 126.372 li
85.333 126.69 li
85.088 126.346 li
85.367 126.737 li
85.146 126.311 li
85.088 126.346 li
85.367 126.737 li
85.146 126.311 li
85.372 126.748 li
85.372 126.256 li
85.221 126.262 85.182 126.297 85.146 126.311 cv
85.372 126.748 li
85.372 126.256 li
85.372 126.75 li
85.746 126.427 li
85.635 126.294 85.459 126.251 85.372 126.256 cv
85.372 126.75 li
85.746 126.427 li
85.372 126.75 li
85.867 126.75 li
85.866 126.685 85.856 126.558 85.746 126.427 cv
85.372 126.75 li
85.867 126.75 li
85.376 126.75 li
85.828 126.943 li
85.836 126.912 85.861 126.887 85.867 126.75 cv
85.376 126.75 li
85.828 126.943 li
85.47 126.79 li
85.792 127.01 li
85.828 126.943 li
85.47 126.79 li
85.792 127.01 li
85.802 126.995 85.864 126.911 85.935 126.805 cv
86.148 126.474 86.528 125.882 86.539 125.154 cv
86.543 124.787 86.412 124.368 86.089 124.051 cv
85.912 123.873 85.818 123.735 85.768 123.628 cv
85.719 123.52 85.704 123.441 85.703 123.329 cv
85.686 123.019 85.943 122.419 85.949 121.461 cv
84.959 121.461 li
f
85.053 116.723 mo
86.043 116.723 li
86.043 112.363 li
85.053 112.363 li
cp
f
82.704 121.528 mo
85.566 116.57 li
88.428 121.528 li
82.704 121.528 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
82.704 121.528 mo
83.133 121.776 li
85.566 117.56 li
87.57 121.033 li
82.704 121.033 li
82.704 121.528 li
83.133 121.776 li
82.704 121.528 li
82.704 122.023 li
89.285 122.023 li
85.566 115.58 li
81.847 122.023 li
82.704 122.023 li
82.704 121.528 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
125.816 131.025 mo
125.874 131.155 125.889 131.245 125.889 131.309 cv
125.887 131.405 125.862 131.473 125.779 131.585 cv
125.656 131.751 125.394 131.945 125.123 132.184 cv
124.988 132.305 124.849 132.443 124.732 132.623 cv
124.615 132.802 124.526 133.036 124.528 133.294 cv
124.548 133.517 li
124.559 133.639 li
124.565 133.887 124.393 134.155 124.162 134.368 cv
124.05 134.473 123.933 134.558 123.847 134.615 cv
123.745 134.678 li
123.721 134.692 li
123.718 134.693 li
124.173 135.572 li
124.197 135.559 124.507 135.4 124.837 135.092 cv
125.161 134.789 125.544 134.309 125.549 133.639 cv
125.549 133.541 125.541 133.441 125.522 133.34 cv
125.518 133.294 li
125.519 133.241 125.531 133.195 125.616 133.09 cv
125.739 132.935 126.013 132.739 126.292 132.484 cv
126.43 132.353 126.572 132.202 126.686 132.008 cv
126.8 131.815 126.88 131.572 126.879 131.309 cv
126.879 131.083 126.823 130.851 126.719 130.62 cv
125.816 131.025 li
f
129.282 130.686 mo
129.178 130.917 129.122 131.149 129.122 131.374 cv
129.12 131.728 129.265 132.034 129.438 132.254 cv
129.698 132.586 130.01 132.796 130.217 132.986 cv
130.322 133.079 130.398 133.162 130.436 133.223 cv
130.483 133.358 li
130.479 133.405 li
130.479 133.404 li
130.46 133.506 130.451 133.606 130.451 133.704 cv
130.457 134.376 130.839 134.856 131.163 135.16 cv
131.493 135.467 131.803 135.626 131.827 135.64 cv
132.283 134.761 li
132.279 134.759 li
132.243 134.74 132.003 134.601 131.797 134.396 cv
131.585 134.187 131.437 133.94 131.441 133.704 cv
131.453 133.582 li
131.451 133.593 li
131.453 133.581 li
131.473 133.358 li
131.475 133.011 131.316 132.722 131.146 132.521 cv
130.886 132.217 130.587 132.019 130.386 131.827 cv
130.286 131.733 130.212 131.646 130.171 131.574 cv
130.112 131.374 li
130.113 131.31 130.127 131.22 130.185 131.09 cv
129.282 130.686 li
f
127.431 130.822 mo
127.437 131.593 127.202 132.034 127.185 132.691 cv
127.184 132.918 127.229 133.169 127.343 133.409 cv
127.456 133.65 127.627 133.878 127.86 134.11 cv
127.983 134.239 128.016 134.346 128.021 134.516 cv
128.025 134.753 127.898 135.089 127.748 135.35 cv
127.675 135.481 127.6 135.595 127.542 135.677 cv
127.47 135.78 li
127.44 135.823 li
127.416 135.862 li
127.39 135.912 li
127.381 135.944 127.355 135.969 127.349 136.111 cv
127.349 136.176 127.361 136.313 127.479 136.446 cv
127.601 136.579 127.768 136.61 127.845 136.606 cv
128.001 136.599 128.039 136.563 128.076 136.549 cv
128.161 136.493 li
128.229 136.43 li
128.299 136.361 li
127.599 135.661 li
127.528 135.732 li
127.527 135.733 li
127.804 136.05 li
127.558 135.708 li
127.527 135.733 li
127.804 136.05 li
127.558 135.708 li
127.839 136.098 li
127.615 135.673 li
127.558 135.708 li
127.839 136.098 li
127.615 135.673 li
127.845 136.109 li
127.845 135.616 li
127.689 135.623 127.651 135.659 127.615 135.673 cv
127.845 136.109 li
127.845 135.616 li
127.845 136.111 li
128.209 135.777 li
128.088 135.643 127.921 135.613 127.845 135.616 cv
127.845 136.111 li
128.209 135.777 li
127.845 136.111 li
128.339 136.111 li
128.339 136.046 128.328 135.91 128.209 135.777 cv
127.845 136.111 li
128.339 136.111 li
127.848 136.111 li
128.299 136.306 li
128.307 136.276 128.333 136.252 128.339 136.111 cv
127.848 136.111 li
128.299 136.306 li
127.89 136.129 li
128.267 136.367 li
128.299 136.306 li
127.89 136.129 li
128.267 136.367 li
128.122 136.275 li
128.263 136.372 li
128.267 136.367 li
128.122 136.275 li
128.263 136.372 li
128.273 136.357 128.335 136.273 128.406 136.167 cv
128.619 135.837 129 135.245 129.011 134.516 cv
129.016 134.148 128.884 133.728 128.56 133.41 cv
128.383 133.233 128.289 133.096 128.24 132.989 cv
128.191 132.882 128.176 132.802 128.175 132.691 cv
128.157 132.38 128.415 131.78 128.421 130.822 cv
127.431 130.822 li
f
127.526 126.083 mo
128.516 126.083 li
128.516 121.725 li
127.526 121.725 li
cp
f
125.176 130.888 mo
128.037 125.93 li
130.901 130.888 li
125.176 130.888 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
125.176 130.888 mo
125.605 131.135 li
128.037 126.92 li
130.044 130.393 li
125.176 130.393 li
125.176 130.888 li
125.605 131.135 li
125.176 130.888 li
125.176 131.383 li
131.759 131.383 li
128.037 124.94 li
124.319 131.383 li
125.176 131.383 li
125.176 130.888 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
121.715 107.866 mo
121.774 107.997 121.788 108.087 121.788 108.151 cv
121.786 108.248 121.761 108.316 121.678 108.428 cv
121.556 108.594 121.294 108.788 121.022 109.026 cv
120.887 109.147 120.748 109.285 120.631 109.465 cv
120.515 109.643 120.426 109.878 120.427 110.135 cv
120.448 110.36 li
120.459 110.481 li
120.465 110.73 120.293 110.998 120.061 111.211 cv
119.949 111.316 119.832 111.401 119.746 111.457 cv
119.644 111.52 li
119.619 111.534 li
119.616 111.536 li
120.071 112.415 li
120.095 112.402 120.405 112.243 120.736 111.935 cv
121.06 111.632 121.443 111.153 121.449 110.481 cv
121.449 110.383 121.44 110.283 121.422 110.182 cv
121.417 110.135 li
121.419 110.083 121.43 110.038 121.515 109.932 cv
121.638 109.778 121.913 109.582 122.191 109.326 cv
122.329 109.196 122.471 109.045 122.585 108.85 cv
122.699 108.658 122.779 108.415 122.778 108.151 cv
122.778 107.926 122.723 107.694 122.619 107.462 cv
121.715 107.866 li
f
125.18 107.528 mo
125.076 107.76 125.02 107.992 125.021 108.217 cv
125.019 108.571 125.164 108.878 125.336 109.097 cv
125.597 109.43 125.909 109.639 126.116 109.829 cv
126.221 109.922 126.297 110.005 126.336 110.067 cv
126.383 110.202 li
126.378 110.248 li
126.378 110.247 li
126.36 110.348 126.351 110.448 126.351 110.546 cv
126.357 111.217 126.739 111.697 127.063 112.001 cv
127.393 112.309 127.703 112.469 127.727 112.482 cv
128.183 111.604 li
128.18 111.602 li
128.144 111.583 127.903 111.444 127.697 111.238 cv
127.485 111.029 127.337 110.781 127.341 110.546 cv
127.352 110.424 li
127.373 110.202 li
127.374 109.855 127.216 109.565 127.045 109.364 cv
126.785 109.06 126.485 108.862 126.285 108.67 cv
126.184 108.576 126.11 108.489 126.069 108.417 cv
126.011 108.217 li
126.011 108.153 126.025 108.064 126.084 107.933 cv
125.18 107.528 li
f
123.329 107.664 mo
123.335 108.435 123.101 108.875 123.084 109.532 cv
123.082 109.76 123.128 110.01 123.241 110.25 cv
123.354 110.491 123.525 110.719 123.758 110.952 cv
123.881 111.081 123.914 111.187 123.919 111.357 cv
123.924 111.594 123.796 111.93 123.647 112.191 cv
123.573 112.322 123.498 112.436 123.441 112.519 cv
123.368 112.623 li
123.337 112.668 li
123.312 112.709 li
123.287 112.762 li
123.278 112.793 123.254 112.822 123.249 112.953 cv
123.25 113.015 123.257 113.14 123.367 113.274 cv
123.479 113.411 123.659 113.454 123.744 113.448 cv
123.888 113.443 123.93 113.41 123.967 113.396 cv
124.055 113.34 li
124.128 113.275 li
124.198 113.205 li
123.501 112.502 li
123.43 112.572 li
123.437 112.578 li
123.431 112.572 li
123.43 112.572 li
123.437 112.578 li
123.431 112.572 li
123.707 112.894 li
123.465 112.545 li
123.431 112.572 li
123.707 112.894 li
123.465 112.545 li
123.739 112.94 li
123.524 112.51 li
123.465 112.545 li
123.739 112.94 li
123.524 112.51 li
123.744 112.951 li
123.744 112.458 li
123.601 112.464 123.559 112.497 123.524 112.51 cv
123.744 112.951 li
123.744 112.458 li
123.744 112.953 li
124.121 112.632 li
124.009 112.496 123.83 112.453 123.744 112.458 cv
123.744 112.953 li
124.121 112.632 li
123.744 112.953 li
124.239 112.953 li
124.238 112.891 124.231 112.766 124.121 112.632 cv
123.744 112.953 li
124.239 112.953 li
123.749 112.953 li
124.202 113.141 li
124.21 113.111 124.234 113.083 124.239 112.953 cv
123.749 112.953 li
124.202 113.141 li
123.84 112.991 li
124.165 113.211 li
124.202 113.141 li
123.84 112.991 li
124.165 113.211 li
124.174 113.197 124.236 113.112 124.307 113.006 cv
124.519 112.676 124.898 112.084 124.909 111.357 cv
124.914 110.99 124.782 110.57 124.458 110.252 cv
124.282 110.076 124.188 109.938 124.138 109.831 cv
124.089 109.723 124.075 109.644 124.074 109.532 cv
124.056 109.221 124.313 108.621 124.319 107.664 cv
123.329 107.664 li
f
123.423 102.926 mo
124.413 102.926 li
124.413 98.5664 li
123.423 98.5664 li
cp
f
121.075 107.73 mo
123.938 102.772 li
126.8 107.73 li
121.075 107.73 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
121.075 107.73 mo
121.504 107.978 li
123.937 103.763 li
125.942 107.235 li
121.075 107.235 li
121.075 107.73 li
121.504 107.978 li
121.075 107.73 li
121.075 108.225 li
127.657 108.225 li
123.938 101.782 li
120.218 108.225 li
121.075 108.225 li
121.075 107.73 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
130.513 79.919 mo
130.571 80.05 130.586 80.14 130.586 80.204 cv
130.584 80.301 130.559 80.369 130.476 80.481 cv
130.354 80.647 130.092 80.841 129.821 81.079 cv
129.686 81.2 129.547 81.337 129.43 81.518 cv
129.314 81.696 129.225 81.93 129.226 82.187 cv
129.246 82.411 li
129.258 82.533 li
129.263 82.783 129.092 83.05 128.86 83.263 cv
128.748 83.368 128.631 83.453 128.545 83.509 cv
128.443 83.572 li
128.419 83.586 li
128.416 83.587 li
128.87 84.467 li
128.894 84.454 129.204 84.295 129.535 83.988 cv
129.859 83.685 130.242 83.205 130.248 82.533 cv
130.248 82.435 130.239 82.335 130.22 82.233 cv
130.216 82.187 li
130.217 82.135 130.229 82.09 130.313 81.985 cv
130.437 81.831 130.711 81.635 130.989 81.379 cv
131.128 81.249 131.269 81.098 131.383 80.903 cv
131.497 80.711 131.577 80.467 131.576 80.204 cv
131.576 79.978 131.521 79.746 131.417 79.514 cv
130.513 79.919 li
f
133.98 79.581 mo
133.876 79.813 133.82 80.045 133.82 80.271 cv
133.818 80.625 133.963 80.931 134.135 81.151 cv
134.396 81.483 134.708 81.693 134.915 81.883 cv
135.02 81.976 135.096 82.059 135.134 82.121 cv
135.181 82.256 li
135.177 82.303 li
135.178 82.297 li
135.177 82.301 li
135.159 82.402 135.15 82.502 135.15 82.6 cv
135.156 83.271 135.537 83.75 135.86 84.054 cv
136.19 84.361 136.499 84.521 136.523 84.534 cv
136.981 83.656 li
136.977 83.655 li
136.941 83.636 136.701 83.496 136.495 83.291 cv
136.283 83.082 136.136 82.834 136.14 82.6 cv
136.151 82.479 li
136.15 82.485 li
136.151 82.478 li
136.171 82.256 li
136.173 81.909 136.015 81.619 135.844 81.418 cv
135.584 81.114 135.285 80.916 135.084 80.723 cv
134.983 80.629 134.91 80.543 134.868 80.471 cv
134.81 80.271 li
134.81 80.207 134.825 80.117 134.883 79.986 cv
133.98 79.581 li
f
132.129 79.717 mo
132.135 80.488 131.9 80.927 131.883 81.585 cv
131.881 81.813 131.927 82.063 132.041 82.303 cv
132.154 82.544 132.325 82.772 132.558 83.005 cv
132.561 83.007 li
132.557 83.004 li
132.68 83.132 132.713 83.239 132.718 83.409 cv
132.722 83.647 132.594 83.983 132.445 84.244 cv
132.372 84.375 132.297 84.489 132.239 84.572 cv
132.167 84.674 li
132.137 84.718 li
132.112 84.757 li
132.087 84.808 li
132.078 84.84 132.053 84.866 132.047 85.005 cv
132.048 85.066 132.053 85.19 132.165 85.327 cv
132.279 85.465 132.46 85.506 132.542 85.501 cv
132.696 85.494 132.735 85.458 132.772 85.444 cv
132.857 85.388 li
132.927 85.325 li
132.996 85.256 li
132.297 84.555 li
132.225 84.626 li
132.225 84.627 li
132.502 84.945 li
132.257 84.602 li
132.225 84.627 li
132.502 84.945 li
132.257 84.602 li
132.536 84.992 li
132.315 84.566 li
132.257 84.602 li
132.536 84.992 li
132.315 84.566 li
132.542 85.003 li
132.542 84.511 li
132.389 84.517 132.35 84.553 132.315 84.566 cv
132.542 85.003 li
132.542 84.511 li
132.542 85.005 li
132.919 84.685 li
132.805 84.546 132.624 84.505 132.542 84.511 cv
132.542 85.005 li
132.919 84.685 li
132.542 85.005 li
133.037 85.005 li
133.035 84.945 133.03 84.821 132.919 84.685 cv
132.542 85.005 li
133.037 85.005 li
132.546 85.005 li
132.997 85.199 li
133.005 85.168 133.031 85.144 133.037 85.005 cv
132.546 85.005 li
132.997 85.199 li
132.64 85.045 li
132.961 85.266 li
132.997 85.199 li
132.64 85.045 li
132.961 85.266 li
132.972 85.25 133.034 85.166 133.105 85.06 cv
133.317 84.729 133.696 84.137 133.708 83.409 cv
133.712 83.042 133.581 82.623 133.259 82.305 cv
133.255 82.301 li
133.258 82.304 li
133.081 82.127 132.987 81.99 132.937 81.883 cv
132.888 81.776 132.874 81.696 132.873 81.585 cv
132.855 81.274 133.113 80.675 133.119 79.717 cv
132.129 79.717 li
f
132.223 74.979 mo
133.213 74.979 li
133.213 70.6196 li
132.223 70.6196 li
cp
f
129.873 79.783 mo
132.736 74.825 li
135.598 79.783 li
129.873 79.783 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
129.873 79.783 mo
130.302 80.031 li
132.736 75.815 li
134.74 79.288 li
129.873 79.288 li
129.873 79.783 li
130.302 80.031 li
129.873 79.783 li
129.873 80.278 li
136.455 80.278 li
132.736 73.835 li
129.016 80.278 li
129.873 80.278 li
129.873 79.783 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
155.007 108.662 mo
155.066 108.793 155.081 108.882 155.081 108.946 cv
155.079 109.043 155.054 109.111 154.971 109.222 cv
154.849 109.388 154.587 109.582 154.316 109.82 cv
154.181 109.941 154.042 110.078 153.925 110.259 cv
153.809 110.437 153.719 110.671 153.721 110.928 cv
153.742 111.154 li
153.741 111.152 li
153.752 111.274 li
153.758 111.524 153.586 111.792 153.355 112.005 cv
153.243 112.11 153.126 112.195 153.04 112.251 cv
152.938 112.314 li
152.913 112.328 li
152.91 112.33 li
153.365 113.209 li
153.389 113.196 153.699 113.037 154.03 112.73 cv
154.354 112.426 154.737 111.946 154.742 111.274 cv
154.742 111.177 154.734 111.077 154.716 110.977 cv
154.715 110.974 li
154.711 110.928 li
154.712 110.876 154.724 110.831 154.808 110.726 cv
154.931 110.572 155.206 110.376 155.484 110.121 cv
155.622 109.991 155.764 109.84 155.878 109.645 cv
155.992 109.453 156.072 109.21 156.071 108.946 cv
156.071 108.721 156.015 108.488 155.91 108.256 cv
155.008 108.662 li
f
158.476 108.322 mo
158.372 108.555 158.316 108.787 158.316 109.013 cv
158.314 109.367 158.459 109.673 158.631 109.893 cv
158.892 110.224 159.204 110.434 159.411 110.624 cv
159.515 110.717 159.591 110.8 159.63 110.861 cv
159.677 110.997 li
159.672 111.044 li
159.672 111.043 li
159.654 111.144 159.645 111.245 159.645 111.343 cv
159.65 112.014 160.033 112.493 160.356 112.797 cv
160.687 113.104 160.996 113.263 161.02 113.276 cv
161.476 112.397 li
161.473 112.396 li
161.437 112.377 161.196 112.238 160.99 112.033 cv
160.778 111.824 160.631 111.577 160.635 111.343 cv
160.646 111.221 li
160.646 111.22 li
160.667 110.997 li
160.668 110.65 160.51 110.36 160.339 110.159 cv
160.08 109.855 159.78 109.657 159.58 109.465 cv
159.479 109.371 159.405 109.284 159.364 109.213 cv
159.306 109.013 li
159.306 108.949 159.321 108.86 159.379 108.728 cv
158.476 108.322 li
f
156.622 108.459 mo
156.628 109.23 156.394 109.67 156.376 110.327 cv
156.375 110.555 156.421 110.805 156.535 111.045 cv
156.648 111.286 156.819 111.514 157.053 111.747 cv
157.052 111.746 li
157.175 111.875 157.208 111.982 157.213 112.152 cv
157.217 112.39 157.09 112.725 156.94 112.987 cv
156.867 113.118 156.792 113.232 156.734 113.314 cv
156.662 113.417 li
156.632 113.461 li
156.607 113.501 li
156.582 113.552 li
156.573 113.584 156.547 113.61 156.542 113.748 cv
156.541 113.823 156.562 113.965 156.677 114.089 cv
156.794 114.213 156.953 114.246 157.037 114.243 cv
157.189 114.237 157.229 114.202 157.266 114.188 cv
157.352 114.132 li
157.421 114.068 li
157.491 113.999 li
156.792 113.298 li
156.721 113.368 li
156.721 113.369 li
156.998 113.688 li
156.753 113.344 li
156.721 113.369 li
156.998 113.688 li
156.753 113.344 li
157.032 113.735 li
156.811 113.308 li
156.753 113.344 li
157.032 113.735 li
156.811 113.308 li
157.037 113.746 li
157.037 113.253 li
156.886 113.26 156.846 113.295 156.811 113.308 cv
157.037 113.746 li
157.037 113.253 li
157.037 113.748 li
157.396 113.408 li
157.28 113.284 157.121 113.25 157.037 113.253 cv
157.037 113.748 li
157.396 113.408 li
157.037 113.748 li
157.532 113.748 li
157.533 113.673 157.512 113.531 157.396 113.408 cv
157.037 113.748 li
157.532 113.748 li
157.041 113.748 li
157.492 113.94 li
157.501 113.91 157.526 113.885 157.532 113.748 cv
157.041 113.748 li
157.492 113.94 li
157.134 113.788 li
157.457 114.008 li
157.492 113.94 li
157.134 113.788 li
157.457 114.008 li
157.467 113.993 157.529 113.909 157.6 113.802 cv
157.812 113.472 158.192 112.88 158.203 112.152 cv
158.207 111.785 158.076 111.365 157.753 111.047 cv
157.75 111.044 li
157.752 111.046 li
157.575 110.869 157.481 110.732 157.431 110.625 cv
157.382 110.518 157.368 110.438 157.366 110.327 cv
157.349 110.016 157.606 109.416 157.612 108.459 cv
156.622 108.459 li
f
156.719 103.721 mo
157.709 103.721 li
157.709 99.3613 li
156.719 99.3613 li
cp
f
154.369 108.525 mo
157.23 103.568 li
160.092 108.525 li
154.369 108.525 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
154.369 108.525 mo
154.798 108.773 li
157.23 104.559 li
159.235 108.03 li
154.369 108.03 li
154.369 108.525 li
154.798 108.773 li
154.369 108.525 li
154.369 109.02 li
160.949 109.02 li
157.23 102.578 li
153.512 109.02 li
154.369 109.02 li
154.369 108.525 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
165.313 75.521 mo
165.371 75.652 165.386 75.742 165.386 75.806 cv
165.384 75.904 165.359 75.971 165.276 76.083 cv
165.154 76.249 164.892 76.443 164.621 76.681 cv
164.487 76.802 164.347 76.94 164.231 77.12 cv
164.114 77.298 164.025 77.532 164.026 77.789 cv
164.047 78.014 li
164.047 78.013 li
164.058 78.135 li
164.064 78.385 163.892 78.653 163.661 78.866 cv
163.549 78.971 163.432 79.056 163.346 79.112 cv
163.245 79.175 li
163.22 79.189 li
163.217 79.19 li
163.672 80.07 li
163.696 80.056 164.005 79.898 164.336 79.59 cv
164.66 79.287 165.043 78.807 165.048 78.135 cv
165.048 78.038 165.04 77.938 165.021 77.837 cv
165.023 77.844 li
165.021 77.836 li
165.016 77.789 li
165.018 77.737 165.03 77.692 165.114 77.587 cv
165.237 77.433 165.512 77.237 165.789 76.981 cv
165.928 76.851 166.069 76.7 166.183 76.506 cv
166.297 76.313 166.377 76.07 166.376 75.806 cv
166.376 75.581 166.321 75.348 166.216 75.116 cv
165.313 75.521 li
f
168.781 75.182 mo
168.676 75.414 168.621 75.646 168.621 75.872 cv
168.619 76.226 168.764 76.533 168.936 76.753 cv
169.197 77.085 169.509 77.294 169.716 77.484 cv
169.82 77.577 169.896 77.661 169.935 77.722 cv
169.982 77.858 li
169.978 77.905 li
169.978 77.9 li
169.978 77.904 li
169.96 78.004 169.951 78.104 169.951 78.201 cv
169.957 78.872 170.339 79.352 170.662 79.656 cv
170.993 79.963 171.302 80.123 171.326 80.136 cv
171.783 79.258 li
171.78 79.256 li
171.744 79.237 171.503 79.098 171.297 78.892 cv
171.084 78.683 170.937 78.435 170.941 78.201 cv
170.952 78.08 li
170.952 78.079 li
170.972 77.858 li
170.974 77.511 170.815 77.221 170.645 77.02 cv
170.385 76.715 170.085 76.518 169.885 76.325 cv
169.784 76.231 169.71 76.144 169.669 76.073 cv
169.611 75.872 li
169.611 75.808 169.625 75.718 169.684 75.587 cv
168.781 75.182 li
f
166.929 75.318 mo
166.935 76.089 166.7 76.529 166.682 77.187 cv
166.681 77.415 166.727 77.665 166.841 77.905 cv
166.954 78.146 167.125 78.374 167.358 78.607 cv
167.48 78.735 167.513 78.842 167.518 79.011 cv
167.522 79.249 167.395 79.584 167.246 79.845 cv
167.172 79.976 167.097 80.09 167.04 80.173 cv
166.967 80.277 li
166.936 80.321 li
166.912 80.362 li
166.886 80.414 li
166.877 80.446 166.853 80.475 166.848 80.607 cv
166.849 80.671 166.856 80.793 166.963 80.925 cv
167.072 81.06 167.253 81.108 167.343 81.102 cv
167.488 81.097 167.53 81.063 167.567 81.049 cv
167.655 80.993 li
167.727 80.928 li
167.797 80.859 li
167.099 80.156 li
167.029 80.226 li
167.033 80.23 li
167.029 80.226 li
167.033 80.23 li
167.029 80.226 li
167.305 80.548 li
167.063 80.2 li
167.029 80.226 li
167.305 80.548 li
167.063 80.2 li
167.338 80.594 li
167.122 80.165 li
167.063 80.2 li
167.338 80.594 li
167.122 80.165 li
167.343 80.605 li
167.343 80.112 li
167.198 80.118 167.157 80.151 167.122 80.165 cv
167.343 80.605 li
167.343 80.112 li
167.343 80.607 li
167.722 80.289 li
167.614 80.154 167.433 80.107 167.343 80.112 cv
167.343 80.607 li
167.722 80.289 li
167.343 80.607 li
167.838 80.607 li
167.837 80.543 167.829 80.421 167.722 80.289 cv
167.343 80.607 li
167.838 80.607 li
167.347 80.607 li
167.8 80.796 li
167.809 80.766 167.832 80.738 167.838 80.607 cv
167.347 80.607 li
167.8 80.796 li
167.439 80.645 li
167.764 80.865 li
167.8 80.796 li
167.439 80.645 li
167.764 80.865 li
167.773 80.851 167.835 80.767 167.906 80.66 cv
168.118 80.33 168.497 79.739 168.508 79.011 cv
168.512 78.645 168.381 78.225 168.058 77.908 cv
167.881 77.731 167.787 77.593 167.737 77.486 cv
167.688 77.378 167.674 77.298 167.672 77.187 cv
167.655 76.875 167.913 76.276 167.919 75.318 cv
166.929 75.318 li
f
167.023 70.58 mo
168.013 70.58 li
168.013 66.2206 li
167.023 66.2206 li
cp
f
164.675 75.385 mo
167.536 70.427 li
170.397 75.385 li
164.675 75.385 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
164.675 75.385 mo
165.104 75.632 li
167.536 71.417 li
169.54 74.89 li
164.675 74.89 li
164.675 75.385 li
165.104 75.632 li
164.675 75.385 li
164.675 75.88 li
171.255 75.88 li
167.536 69.437 li
163.818 75.88 li
164.675 75.88 li
164.675 75.385 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
182.15 123.054 mo
182.208 123.185 182.223 123.274 182.223 123.339 cv
182.221 123.436 182.196 123.504 182.113 123.616 cv
181.99 123.782 181.729 123.976 181.458 124.214 cv
181.323 124.336 181.183 124.473 181.067 124.653 cv
180.95 124.832 180.861 125.066 180.862 125.323 cv
180.883 125.548 li
180.881 125.539 li
180.883 125.548 li
180.894 125.669 li
180.9 125.917 180.728 126.186 180.497 126.399 cv
180.385 126.504 180.268 126.59 180.182 126.646 cv
180.08 126.709 li
180.055 126.723 li
180.052 126.725 li
180.508 127.603 li
180.532 127.59 180.842 127.431 181.173 127.123 cv
181.496 126.819 181.879 126.34 181.884 125.669 cv
181.884 125.571 181.875 125.471 181.857 125.37 cv
181.859 125.38 li
181.857 125.37 li
181.852 125.323 li
181.854 125.271 181.866 125.226 181.95 125.12 cv
182.073 124.966 182.348 124.77 182.626 124.514 cv
182.764 124.384 182.906 124.233 183.02 124.038 cv
183.134 123.846 183.214 123.602 183.213 123.339 cv
183.213 123.113 183.157 122.881 183.053 122.649 cv
182.15 123.054 li
f
185.617 122.716 mo
185.512 122.947 185.457 123.179 185.457 123.405 cv
185.455 123.759 185.6 124.065 185.772 124.285 cv
186.033 124.618 186.345 124.827 186.553 125.018 cv
186.657 125.11 186.733 125.194 186.772 125.255 cv
186.819 125.39 li
186.815 125.436 li
186.815 125.431 li
186.815 125.434 li
186.796 125.536 186.787 125.637 186.787 125.735 cv
186.793 126.406 187.175 126.885 187.497 127.189 cv
187.827 127.497 188.136 127.656 188.16 127.67 cv
188.617 126.791 li
188.614 126.79 li
188.578 126.771 188.338 126.632 188.132 126.426 cv
187.921 126.218 187.773 125.97 187.777 125.735 cv
187.789 125.612 li
187.789 125.611 li
187.809 125.39 li
187.811 125.043 187.652 124.753 187.481 124.553 cv
187.222 124.248 186.922 124.051 186.721 123.858 cv
186.62 123.764 186.547 123.677 186.505 123.605 cv
186.447 123.405 li
186.447 123.341 186.462 123.251 186.52 123.12 cv
185.617 122.716 li
f
183.766 122.852 mo
183.772 123.623 183.536 124.063 183.519 124.721 cv
183.518 124.949 183.564 125.199 183.677 125.439 cv
183.79 125.68 183.961 125.907 184.194 126.14 cv
184.317 126.269 184.35 126.375 184.355 126.545 cv
184.359 126.783 184.232 127.118 184.082 127.379 cv
184.009 127.511 183.934 127.624 183.876 127.707 cv
183.804 127.81 li
183.773 127.854 li
183.749 127.894 li
183.723 127.946 li
183.714 127.978 183.689 128.005 183.684 128.141 cv
183.685 128.198 183.688 128.326 183.806 128.467 cv
184.013 128.607 li
184.179 128.636 li
184.329 128.63 184.369 128.595 184.406 128.582 cv
184.493 128.525 li
184.563 128.461 li
184.633 128.392 li
183.935 127.69 li
183.864 127.761 li
184.14 128.081 li
183.897 127.735 li
183.864 127.761 li
184.14 128.081 li
183.897 127.735 li
184.174 128.128 li
183.955 127.7 li
183.897 127.735 li
184.174 128.128 li
183.955 127.7 li
184.179 128.139 li
184.179 127.646 li
184.03 127.652 183.99 127.687 183.955 127.7 cv
184.179 128.139 li
184.179 127.646 li
184.179 128.141 li
184.345 127.675 li
184.179 127.646 li
184.179 128.141 li
184.345 127.675 li
184.179 128.141 li
184.62 127.917 li
184.573 127.813 184.45 127.707 184.345 127.675 cv
184.179 128.141 li
184.62 127.917 li
184.179 128.141 li
184.674 128.141 li
184.673 128.095 184.671 128.02 184.62 127.917 cv
184.179 128.141 li
184.674 128.141 li
184.183 128.141 li
184.635 128.332 li
184.644 128.302 184.668 128.275 184.674 128.141 cv
184.183 128.141 li
184.635 128.332 li
184.276 128.18 li
184.599 128.4 li
184.635 128.332 li
184.276 128.18 li
184.599 128.4 li
184.609 128.385 184.671 128.301 184.742 128.195 cv
184.954 127.864 185.333 127.273 185.345 126.545 cv
185.349 126.178 185.217 125.758 184.894 125.44 cv
184.717 125.263 184.624 125.126 184.574 125.019 cv
184.525 124.912 184.51 124.832 184.509 124.721 cv
184.492 124.41 184.749 123.81 184.756 122.852 cv
183.766 122.852 li
f
183.859 118.113 mo
184.849 118.113 li
184.849 113.754 li
183.859 113.754 li
cp
f
181.511 122.918 mo
184.373 117.961 li
187.234 122.918 li
181.511 122.918 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
181.511 122.918 mo
181.939 123.165 li
184.373 118.951 li
186.377 122.423 li
181.511 122.423 li
181.511 122.918 li
181.939 123.165 li
181.511 122.918 li
181.511 123.413 li
188.092 123.413 li
184.373 116.971 li
180.653 123.413 li
181.511 123.413 li
181.511 122.918 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
195.552 86.765 mo
195.611 86.896 195.625 86.986 195.625 87.05 cv
195.623 87.148 195.598 87.215 195.515 87.327 cv
195.393 87.493 195.132 87.687 194.861 87.925 cv
194.726 88.046 194.587 88.183 194.47 88.364 cv
194.354 88.542 194.264 88.776 194.266 89.034 cv
194.287 89.258 li
194.285 89.249 li
194.286 89.258 li
194.298 89.379 li
194.303 89.629 194.132 89.897 193.901 90.11 cv
193.789 90.215 193.672 90.3 193.586 90.356 cv
193.485 90.419 li
193.46 90.433 li
193.457 90.435 li
193.912 91.314 li
193.936 91.3 194.246 91.141 194.576 90.834 cv
194.9 90.53 195.282 90.05 195.288 89.379 cv
195.288 89.282 195.279 89.182 195.26 89.081 cv
195.259 89.072 li
195.26 89.08 li
195.256 89.034 li
195.257 88.981 195.269 88.936 195.353 88.831 cv
195.476 88.677 195.751 88.481 196.029 88.226 cv
196.167 88.095 196.309 87.944 196.423 87.75 cv
196.536 87.557 196.617 87.314 196.615 87.05 cv
196.616 86.825 196.56 86.592 196.456 86.36 cv
195.552 86.765 li
f
199.019 86.427 mo
198.915 86.659 198.859 86.891 198.859 87.116 cv
198.857 87.47 199.003 87.776 199.175 87.996 cv
199.435 88.328 199.747 88.538 199.955 88.728 cv
200.059 88.821 200.135 88.904 200.174 88.966 cv
200.221 89.101 li
200.216 89.148 li
200.198 89.248 200.189 89.348 200.189 89.445 cv
200.195 90.116 200.578 90.596 200.901 90.9 cv
201.232 91.208 201.542 91.367 201.566 91.38 cv
202.022 90.502 li
202.019 90.5 li
201.982 90.481 201.741 90.342 201.535 90.136 cv
201.323 89.927 201.175 89.68 201.179 89.445 cv
201.19 89.324 li
201.211 89.101 li
201.212 88.754 201.054 88.464 200.883 88.263 cv
200.624 87.959 200.324 87.761 200.124 87.569 cv
200.023 87.475 199.949 87.388 199.908 87.316 cv
199.849 87.116 li
199.85 87.052 199.864 86.963 199.922 86.832 cv
199.019 86.427 li
f
197.168 86.563 mo
197.174 87.334 196.939 87.774 196.922 88.432 cv
196.92 88.66 196.966 88.91 197.08 89.15 cv
197.193 89.392 197.364 89.619 197.597 89.852 cv
197.72 89.981 197.753 90.087 197.758 90.257 cv
197.762 90.494 197.635 90.83 197.485 91.091 cv
197.412 91.222 197.337 91.336 197.28 91.419 cv
197.207 91.522 li
197.177 91.566 li
197.152 91.606 li
197.127 91.658 li
197.117 91.689 197.093 91.717 197.087 91.852 cv
197.088 91.913 197.094 92.039 197.206 92.175 cv
197.322 92.313 197.501 92.353 197.583 92.348 cv
197.732 92.342 197.773 92.307 197.809 92.293 cv
197.896 92.237 li
197.967 92.173 li
198.037 92.103 li
197.338 91.402 li
197.267 91.472 li
197.267 91.473 li
197.544 91.792 li
197.3 91.447 li
197.267 91.473 li
197.544 91.792 li
197.3 91.447 li
197.577 91.839 li
197.358 91.412 li
197.3 91.447 li
197.577 91.839 li
197.358 91.412 li
197.583 91.85 li
197.583 91.358 li
197.433 91.364 197.393 91.398 197.358 91.412 cv
197.583 91.85 li
197.583 91.358 li
197.583 91.852 li
197.958 91.53 li
197.843 91.392 197.664 91.353 197.583 91.358 cv
197.583 91.852 li
197.958 91.53 li
197.583 91.852 li
198.077 91.852 li
198.076 91.792 198.07 91.666 197.958 91.53 cv
197.583 91.852 li
198.077 91.852 li
197.587 91.852 li
198.038 92.043 li
198.047 92.013 198.071 91.987 198.077 91.852 cv
197.587 91.852 li
198.038 92.043 li
197.679 91.891 li
198.002 92.112 li
198.038 92.043 li
197.679 91.891 li
198.002 92.112 li
198.012 92.097 198.074 92.013 198.145 91.907 cv
198.357 91.576 198.737 90.985 198.748 90.257 cv
198.753 89.89 198.621 89.47 198.297 89.152 cv
198.12 88.976 198.026 88.838 197.977 88.731 cv
197.927 88.623 197.913 88.543 197.912 88.432 cv
197.894 88.121 198.152 87.521 198.158 86.563 cv
197.168 86.563 li
f
197.262 81.825 mo
198.252 81.825 li
198.252 77.4646 li
197.262 77.4646 li
cp
f
194.915 86.629 mo
197.776 81.671 li
200.638 86.629 li
194.915 86.629 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
194.915 86.629 mo
195.344 86.876 li
197.776 82.661 li
199.78 86.134 li
194.915 86.134 li
194.915 86.629 li
195.344 86.876 li
194.915 86.629 li
194.915 87.124 li
201.495 87.124 li
197.776 80.681 li
194.058 87.124 li
194.915 87.124 li
194.915 86.629 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
200.522 110.418 mo
200.58 110.549 200.595 110.639 200.595 110.703 cv
200.593 110.8 200.568 110.867 200.485 110.979 cv
200.362 111.145 200.1 111.339 199.828 111.577 cv
199.693 111.698 199.554 111.836 199.437 112.016 cv
199.32 112.194 199.231 112.429 199.232 112.686 cv
199.252 112.909 li
199.264 113.032 li
199.269 113.282 199.097 113.55 198.867 113.763 cv
198.755 113.868 198.638 113.953 198.552 114.009 cv
198.45 114.072 li
198.426 114.086 li
198.423 114.088 li
198.878 114.967 li
198.902 114.953 199.212 114.794 199.542 114.487 cv
199.866 114.183 200.248 113.703 200.254 113.032 cv
200.254 112.934 200.245 112.833 200.226 112.732 cv
200.222 112.686 li
200.223 112.634 200.235 112.589 200.32 112.484 cv
200.443 112.33 200.718 112.134 200.997 111.878 cv
201.135 111.748 201.277 111.597 201.392 111.403 cv
201.506 111.21 201.586 110.967 201.585 110.703 cv
201.585 110.477 201.53 110.245 201.425 110.013 cv
200.522 110.418 li
f
203.989 110.079 mo
203.885 110.311 203.829 110.543 203.829 110.769 cv
203.827 111.123 203.972 111.429 204.144 111.649 cv
204.405 111.981 204.717 112.19 204.924 112.381 cv
205.028 112.473 205.104 112.556 205.142 112.618 cv
205.189 112.753 li
205.185 112.8 li
205.184 112.806 li
205.185 112.799 li
205.166 112.9 205.158 113 205.158 113.099 cv
205.163 113.77 205.546 114.249 205.869 114.553 cv
206.2 114.86 206.51 115.02 206.534 115.033 cv
206.99 114.154 li
206.987 114.153 li
206.95 114.134 206.709 113.995 206.503 113.789 cv
206.291 113.58 206.143 113.333 206.148 113.099 cv
206.159 112.977 li
206.159 112.976 li
206.179 112.753 li
206.181 112.406 206.022 112.116 205.852 111.915 cv
205.592 111.611 205.293 111.414 205.093 111.221 cv
204.992 111.128 204.919 111.041 204.877 110.969 cv
204.819 110.769 li
204.819 110.704 204.834 110.615 204.892 110.483 cv
203.989 110.079 li
f
202.136 110.216 mo
202.142 110.987 201.908 111.427 201.89 112.083 cv
201.889 112.311 201.935 112.562 202.049 112.802 cv
202.162 113.043 202.333 113.271 202.566 113.504 cv
202.688 113.631 202.721 113.738 202.726 113.908 cv
202.731 114.146 202.603 114.481 202.453 114.743 cv
202.38 114.874 202.305 114.988 202.247 115.071 cv
202.175 115.173 li
202.145 115.217 li
202.12 115.256 li
202.095 115.307 li
202.086 115.339 202.06 115.364 202.054 115.504 cv
202.055 115.57 202.064 115.696 202.174 115.828 cv
202.285 115.961 202.462 116.005 202.55 116 cv
202.704 115.993 202.743 115.957 202.78 115.943 cv
202.865 115.887 li
202.934 115.824 li
203.004 115.754 li
202.304 115.054 li
202.232 115.126 li
202.509 115.443 li
202.264 115.101 li
202.232 115.126 li
202.509 115.443 li
202.264 115.101 li
202.544 115.491 li
202.321 115.066 li
202.264 115.101 li
202.544 115.491 li
202.321 115.066 li
202.55 115.502 li
202.55 115.01 li
202.395 115.017 202.357 115.052 202.321 115.066 cv
202.55 115.502 li
202.55 115.01 li
202.55 115.504 li
202.924 115.182 li
202.814 115.048 202.637 115.005 202.55 115.01 cv
202.55 115.504 li
202.924 115.182 li
202.55 115.504 li
203.044 115.504 li
203.044 115.439 203.034 115.313 202.924 115.182 cv
202.55 115.504 li
203.044 115.504 li
202.554 115.504 li
203.004 115.698 li
203.013 115.668 203.038 115.643 203.044 115.504 cv
202.554 115.504 li
203.004 115.698 li
202.647 115.545 li
202.969 115.765 li
203.004 115.698 li
202.647 115.545 li
202.969 115.765 li
202.979 115.749 203.041 115.665 203.112 115.559 cv
203.325 115.228 203.705 114.636 203.716 113.908 cv
203.721 113.541 203.589 113.121 203.266 112.803 cv
203.089 112.626 202.995 112.489 202.945 112.382 cv
202.896 112.274 202.882 112.195 202.88 112.083 cv
202.863 111.773 203.12 111.173 203.126 110.216 cv
202.136 110.216 li
f
202.23 105.477 mo
203.22 105.477 li
203.22 101.118 li
202.23 101.118 li
cp
f
199.881 110.281 mo
202.744 105.324 li
205.605 110.281 li
199.881 110.281 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
199.881 110.281 mo
200.309 110.529 li
202.744 106.314 li
204.748 109.786 li
199.881 109.786 li
199.881 110.281 li
200.309 110.529 li
199.881 110.281 li
199.881 110.776 li
206.463 110.776 li
202.744 104.334 li
199.023 110.776 li
199.881 110.776 li
199.881 110.281 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
208.873 136.751 mo
208.931 136.882 208.946 136.972 208.946 137.036 cv
208.944 137.133 208.919 137.201 208.836 137.313 cv
208.714 137.478 208.452 137.672 208.181 137.91 cv
208.046 138.031 207.907 138.168 207.79 138.349 cv
207.674 138.527 207.585 138.761 207.586 139.018 cv
207.607 139.242 li
207.618 139.364 li
207.624 139.613 207.452 139.88 207.222 140.093 cv
207.11 140.197 206.993 140.282 206.907 140.339 cv
206.806 140.401 li
206.781 140.415 li
206.778 140.417 li
207.232 141.296 li
207.256 141.283 207.565 141.124 207.896 140.818 cv
208.22 140.515 208.602 140.035 208.608 139.364 cv
208.608 139.266 208.599 139.166 208.581 139.064 cv
208.576 139.018 li
208.578 138.966 208.589 138.921 208.674 138.816 cv
208.797 138.662 209.071 138.466 209.349 138.211 cv
209.487 138.081 209.629 137.93 209.743 137.735 cv
209.857 137.543 209.937 137.3 209.936 137.036 cv
209.936 136.81 209.88 136.578 209.776 136.345 cv
208.873 136.751 li
f
212.339 136.412 mo
212.235 136.643 212.18 136.875 212.18 137.1 cv
212.178 137.454 212.323 137.76 212.496 137.98 cv
212.756 138.312 213.069 138.522 213.276 138.712 cv
213.381 138.805 213.457 138.889 213.495 138.95 cv
213.543 139.086 li
213.538 139.133 li
213.538 139.131 li
213.52 139.232 213.511 139.332 213.511 139.43 cv
213.517 140.101 213.9 140.58 214.223 140.884 cv
214.554 141.191 214.863 141.351 214.887 141.364 cv
215.343 140.485 li
215.34 140.484 li
215.304 140.465 215.063 140.326 214.857 140.12 cv
214.644 139.911 214.497 139.664 214.501 139.43 cv
214.512 139.309 li
214.513 139.307 li
214.533 139.086 li
214.534 138.739 214.376 138.449 214.205 138.248 cv
213.945 137.943 213.645 137.745 213.444 137.552 cv
213.344 137.458 213.27 137.372 213.228 137.3 cv
213.17 137.1 li
213.17 137.036 213.185 136.947 213.243 136.817 cv
212.339 136.412 li
f
210.489 136.548 mo
210.496 137.32 210.26 137.759 210.243 138.417 cv
210.242 138.644 210.288 138.894 210.401 139.134 cv
210.514 139.375 210.685 139.603 210.918 139.835 cv
211.041 139.964 211.074 140.071 211.079 140.241 cv
211.083 140.479 210.956 140.814 210.806 141.075 cv
210.733 141.206 210.658 141.32 210.601 141.402 cv
210.528 141.505 li
210.498 141.549 li
210.474 141.588 li
210.448 141.639 li
210.439 141.671 210.414 141.698 210.408 141.836 cv
210.408 141.904 210.421 142.037 210.535 142.167 cv
210.65 142.298 210.82 142.335 210.903 142.331 cv
211.057 142.325 211.096 142.289 211.133 142.275 cv
211.218 142.219 li
211.288 142.156 li
211.358 142.086 li
210.659 141.385 li
210.587 141.456 li
210.587 141.457 li
210.863 141.775 li
210.619 141.432 li
210.587 141.457 li
210.863 141.775 li
210.619 141.432 li
210.898 141.823 li
210.676 141.397 li
210.619 141.432 li
210.898 141.823 li
210.676 141.397 li
210.903 141.834 li
210.903 141.341 li
210.75 141.348 210.712 141.383 210.676 141.397 cv
210.903 141.834 li
210.903 141.341 li
210.903 141.836 li
211.271 141.505 li
211.156 141.374 210.987 141.337 210.903 141.341 cv
210.903 141.836 li
211.271 141.505 li
210.904 141.836 li
211.398 141.836 li
211.398 141.768 211.385 141.635 211.271 141.505 cv
210.904 141.836 li
211.398 141.836 li
210.907 141.836 li
211.359 142.029 li
211.367 141.998 211.392 141.973 211.398 141.836 cv
210.907 141.836 li
211.359 142.029 li
211.001 141.875 li
211.323 142.096 li
211.359 142.029 li
211.001 141.875 li
211.323 142.096 li
211.333 142.081 211.395 141.997 211.466 141.891 cv
211.678 141.56 212.057 140.969 212.069 140.241 cv
212.073 139.874 211.941 139.453 211.618 139.135 cv
211.441 138.959 211.347 138.821 211.298 138.715 cv
211.249 138.607 211.234 138.528 211.233 138.417 cv
211.216 138.106 211.473 137.506 211.479 136.548 cv
210.489 136.548 li
f
210.583 131.809 mo
211.573 131.809 li
211.573 127.45 li
210.583 127.45 li
cp
f
208.235 136.614 mo
211.097 131.656 li
213.959 136.614 li
208.235 136.614 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
208.235 136.614 mo
208.664 136.862 li
211.097 132.646 li
213.102 136.119 li
208.235 136.119 li
208.235 136.614 li
208.664 136.862 li
208.235 136.614 li
208.235 137.109 li
214.816 137.109 li
211.097 130.666 li
207.378 137.109 li
208.235 137.109 li
208.235 136.614 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
225.373 112.119 mo
225.431 112.25 225.446 112.34 225.446 112.404 cv
225.444 112.501 225.419 112.569 225.336 112.681 cv
225.214 112.846 224.952 113.04 224.681 113.278 cv
224.546 113.399 224.407 113.536 224.29 113.717 cv
224.174 113.895 224.085 114.129 224.086 114.386 cv
224.107 114.611 li
224.107 114.61 li
224.118 114.732 li
224.123 114.981 223.952 115.249 223.721 115.463 cv
223.609 115.568 223.492 115.653 223.405 115.71 cv
223.304 115.772 li
223.279 115.786 li
223.276 115.788 li
223.732 116.667 li
223.756 116.654 224.065 116.494 224.396 116.187 cv
224.72 115.883 225.102 115.403 225.108 114.732 cv
225.108 114.634 225.099 114.534 225.081 114.433 cv
225.082 114.439 li
225.081 114.432 li
225.076 114.386 li
225.078 114.334 225.089 114.289 225.173 114.184 cv
225.297 114.03 225.571 113.835 225.849 113.579 cv
225.987 113.449 226.129 113.298 226.243 113.104 cv
226.357 112.911 226.437 112.668 226.436 112.404 cv
226.436 112.178 226.38 111.946 226.276 111.713 cv
225.373 112.119 li
f
228.841 111.78 mo
228.737 112.012 228.681 112.244 228.681 112.47 cv
228.679 112.825 228.824 113.131 228.997 113.351 cv
229.257 113.682 229.57 113.892 229.777 114.082 cv
229.881 114.174 229.957 114.258 229.996 114.319 cv
230.043 114.454 li
230.038 114.501 li
230.038 114.499 li
230.02 114.6 230.011 114.701 230.011 114.799 cv
230.017 115.47 230.399 115.95 230.722 116.254 cv
231.053 116.561 231.362 116.721 231.386 116.734 cv
231.842 115.856 li
231.839 115.854 li
231.803 115.835 231.563 115.696 231.356 115.491 cv
231.144 115.282 230.997 115.034 231.001 114.799 cv
231.012 114.677 li
231.012 114.681 li
231.013 114.675 li
231.033 114.454 li
231.034 114.107 230.876 113.817 230.705 113.617 cv
230.445 113.312 230.145 113.115 229.945 112.922 cv
229.844 112.828 229.77 112.742 229.729 112.67 cv
229.671 112.47 li
229.671 112.406 229.686 112.317 229.744 112.185 cv
228.841 111.78 li
f
226.988 111.916 mo
226.995 112.687 226.759 113.127 226.742 113.785 cv
226.741 114.013 226.786 114.263 226.9 114.503 cv
227.013 114.744 227.185 114.972 227.418 115.205 cv
227.54 115.334 227.574 115.44 227.578 115.61 cv
227.583 115.848 227.455 116.183 227.306 116.444 cv
227.232 116.575 227.157 116.689 227.1 116.772 cv
227.027 116.875 li
226.997 116.919 li
226.973 116.958 li
226.947 117.01 li
226.938 117.042 226.913 117.068 226.907 117.205 cv
226.908 117.268 226.915 117.392 227.024 117.525 cv
227.136 117.662 227.316 117.706 227.403 117.701 cv
227.555 117.695 227.595 117.659 227.631 117.645 cv
227.717 117.589 li
227.787 117.526 li
227.857 117.456 li
227.158 116.755 li
227.087 116.826 li
227.086 116.827 li
227.363 117.145 li
227.119 116.801 li
227.086 116.827 li
227.363 117.145 li
227.119 116.801 li
227.397 117.193 li
227.177 116.766 li
227.119 116.801 li
227.397 117.193 li
227.177 116.766 li
227.403 117.204 li
227.403 116.711 li
227.251 116.717 227.212 116.752 227.177 116.766 cv
227.403 117.204 li
227.403 116.711 li
227.403 117.206 li
227.78 116.886 li
227.669 116.75 227.489 116.706 227.403 116.711 cv
227.403 117.206 li
227.78 116.886 li
227.403 117.205 li
227.897 117.205 li
227.896 117.144 227.889 117.02 227.78 116.886 cv
227.403 117.205 li
227.897 117.205 li
227.407 117.205 li
227.858 117.398 li
227.867 117.367 227.892 117.342 227.897 117.205 cv
227.407 117.205 li
227.858 117.398 li
227.5 117.245 li
227.823 117.465 li
227.858 117.398 li
227.5 117.245 li
227.823 117.465 li
227.833 117.45 227.894 117.366 227.965 117.26 cv
228.178 116.929 228.557 116.338 228.568 115.61 cv
228.573 115.243 228.441 114.823 228.117 114.505 cv
227.941 114.329 227.847 114.191 227.797 114.084 cv
227.748 113.976 227.733 113.896 227.732 113.785 cv
227.715 113.473 227.972 112.874 227.978 111.916 cv
226.988 111.916 li
f
227.083 107.178 mo
228.073 107.178 li
228.073 102.818 li
227.083 102.818 li
cp
f
224.734 111.982 mo
227.596 107.024 li
230.458 111.982 li
224.734 111.982 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
224.734 111.982 mo
225.163 112.23 li
227.596 108.015 li
229.601 111.487 li
224.734 111.487 li
224.734 111.982 li
225.163 112.23 li
224.734 111.982 li
224.734 112.477 li
231.315 112.477 li
227.596 106.034 li
223.877 112.477 li
224.734 112.477 li
224.734 111.982 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
224.287 74.631 mo
224.345 74.762 224.36 74.852 224.36 74.916 cv
224.358 75.013 224.333 75.081 224.25 75.193 cv
224.127 75.358 223.865 75.552 223.594 75.791 cv
223.459 75.912 223.319 76.05 223.203 76.23 cv
223.086 76.409 222.997 76.643 222.998 76.9 cv
223.019 77.123 li
223.03 77.245 li
223.036 77.495 222.864 77.762 222.633 77.976 cv
222.521 78.08 222.404 78.166 222.318 78.222 cv
222.216 78.285 li
222.191 78.299 li
222.188 78.3 li
222.644 79.18 li
222.668 79.166 222.977 79.007 223.308 78.7 cv
223.632 78.396 224.014 77.916 224.02 77.245 cv
224.02 77.147 224.011 77.047 223.993 76.947 cv
223.988 76.9 li
223.99 76.848 224.002 76.802 224.086 76.697 cv
224.209 76.542 224.484 76.347 224.762 76.091 cv
224.901 75.961 225.042 75.81 225.157 75.615 cv
225.271 75.423 225.351 75.18 225.35 74.916 cv
225.35 74.69 225.294 74.458 225.19 74.226 cv
224.287 74.631 li
f
227.754 74.292 mo
227.65 74.524 227.595 74.756 227.595 74.981 cv
227.593 75.336 227.738 75.642 227.91 75.862 cv
228.17 76.194 228.482 76.403 228.689 76.594 cv
228.793 76.687 228.869 76.77 228.908 76.831 cv
228.955 76.967 li
228.95 77.014 li
228.951 77.013 li
228.932 77.114 228.923 77.215 228.923 77.313 cv
228.929 77.984 229.312 78.463 229.635 78.767 cv
229.966 79.074 230.276 79.233 230.3 79.246 cv
230.755 78.367 li
230.752 78.366 li
230.716 78.347 230.475 78.208 230.269 78.003 cv
230.056 77.794 229.909 77.547 229.913 77.313 cv
229.924 77.191 li
229.926 77.184 li
229.925 77.19 li
229.945 76.967 li
229.947 76.62 229.788 76.33 229.618 76.129 cv
229.358 75.825 229.059 75.627 228.859 75.435 cv
228.758 75.341 228.684 75.254 228.643 75.182 cv
228.585 74.981 li
228.585 74.917 228.599 74.828 228.658 74.697 cv
227.754 74.292 li
f
225.901 74.429 mo
225.908 75.2 225.673 75.64 225.655 76.297 cv
225.654 76.525 225.7 76.775 225.813 77.015 cv
225.926 77.256 226.097 77.483 226.33 77.716 cv
226.453 77.844 226.486 77.952 226.491 78.122 cv
226.495 78.36 226.368 78.696 226.218 78.957 cv
226.145 79.088 226.07 79.202 226.013 79.284 cv
225.941 79.387 li
225.911 79.43 li
225.887 79.468 li
225.861 79.519 li
225.852 79.551 225.826 79.576 225.82 79.717 cv
225.821 79.778 225.827 79.903 225.939 80.039 cv
226.053 80.178 226.233 80.218 226.316 80.213 cv
226.473 80.206 226.511 80.169 226.548 80.155 cv
226.632 80.099 li
226.701 80.037 li
226.77 79.967 li
226.07 79.268 li
225.998 79.339 li
225.997 79.34 li
226.275 79.656 li
226.029 79.315 li
225.997 79.34 li
226.275 79.656 li
226.029 79.315 li
226.31 79.704 li
226.086 79.28 li
226.029 79.315 li
226.31 79.704 li
226.086 79.28 li
226.316 79.716 li
226.316 79.223 li
226.159 79.23 226.121 79.266 226.086 79.28 cv
226.316 79.716 li
226.316 79.223 li
226.316 79.718 li
226.692 79.396 li
226.577 79.258 226.398 79.218 226.316 79.223 cv
226.316 79.718 li
226.692 79.396 li
226.316 79.717 li
226.81 79.717 li
226.809 79.657 226.803 79.532 226.692 79.396 cv
226.316 79.717 li
226.81 79.717 li
226.319 79.717 li
226.77 79.913 li
226.778 79.882 226.804 79.858 226.81 79.717 cv
226.319 79.717 li
226.77 79.913 li
226.361 79.735 li
226.738 79.973 li
226.77 79.913 li
226.361 79.735 li
226.738 79.973 li
226.593 79.882 li
226.735 79.979 li
226.738 79.973 li
226.593 79.882 li
226.735 79.979 li
226.744 79.964 226.806 79.88 226.877 79.774 cv
227.09 79.443 227.47 78.851 227.481 78.122 cv
227.486 77.755 227.354 77.334 227.03 77.015 cv
226.853 76.839 226.759 76.702 226.71 76.595 cv
226.661 76.488 226.646 76.409 226.645 76.297 cv
226.628 75.987 226.885 75.387 226.891 74.429 cv
225.901 74.429 li
f
225.996 69.69 mo
226.986 69.69 li
226.986 65.3316 li
225.996 65.3316 li
cp
f
223.646 74.494 mo
226.508 69.537 li
229.372 74.494 li
223.646 74.494 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
223.646 74.494 mo
224.075 74.741 li
226.508 70.527 li
228.514 73.999 li
223.646 73.999 li
223.646 74.494 li
224.075 74.741 li
223.646 74.494 li
223.646 74.989 li
230.23 74.989 li
226.508 68.547 li
222.789 74.989 li
223.646 74.989 li
223.646 74.494 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
null null set_ucrbg
.259034 .259034 .262502 rgb
%ADOBeginSubsetFont: JIWAAA+TimesNewRomanPS-BoldMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JIWAAA+TimesNewRomanPS-BoldMT def/FontInfo 6 dict dup begin/ItalicAngle 0 def/BaseFontName (TimesNewRomanPS-BoldMT) def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 66 /B putdef/FontBBox {-558 -307 2034 1026} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/B <1C60D8A8C9B64EDFFBB11F3E2A10057E50E341ABE1DBC770E1C5C06F81BB728FC2798FE7DE3D8D55194754531B662F878A1C5B52B2BC9A6A3EDB01E8FAD74764554945ACDBBFC441DBC7519AC204790E8B10B16B935FCC95B5AE677CDEDC158F367FBEAB4DECE80779208A83BA5B988094ABB02C8947DE7BBD9D5F70EFA356B1D1C419EB58119C17670AB47845E8F10893AE4CFED7310F4A2EDE886F593B1F88AC8C92C7F8B9234F7F24A3DD94F3DD1E2EFF386B3CD9BEA0954D5167541B4C28B1D6215876A5CF1DACA668DAD06206151F500A2C0940462ECF20F084902D891E2F1FCB461C960983384E140E45CB0A961888ECF5B48232> |-/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PWYLJQ+TimesNewRomanPS-BoldMT /JIWAAA+TimesNewRomanPS-BoldMT findfont ct_VMDictPut/PWYLJQ+TimesNewRomanPS-BoldMT*1 [66{/.notdef}rp /B 189{/.notdef}rp]PWYLJQ+TimesNewRomanPS-BoldMT nfPWYLJQ+TimesNewRomanPS-BoldMT*1 [13.7231 0 0 -13.6828 0 0 ]msf242.723 157.418 mo(B)sh%ADOBeginSubsetFont: DLGQMX+MT-Extra Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /DLGQMX+MT-Extra def/FontInfo 6 dict dup begin/ItalicAngle 0 def/BaseFontName (MT-Extra) def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 114 /arrowrightnosp putdup 117 /combarrowextender putdef/FontBBox {-61 -313 1558 898} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/arrowrightnosp <1C60D8A8C9B7015BA958B56879B8048DD695B0D37242CF897B1A0633B0FA988F> |-/combarrowextender <1C60D8A8C9B7015B27225316AEBA9069E85271> |-/.notdef <1C60D8A8C9B5EE3100DDA58DBB3B4F80EB06FBD132FAE72AC98CF069D461C88A683DE02884> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/PWYLJR+MT-Extra /DLGQMX+MT-Extra findfont ct_VMDictPut/PWYLJR+MT-Extra*1 [114{/.notdef}rp /arrowrightnosp 2{/.notdef}rp /combarrowextender 138{/.notdef}rp]PWYLJR+MT-Extra nfPWYLJR+MT-Extra*1 [13.7231 0 0 -13.6828 0 0 ]msf243.151 145.232 mo(ur)[2.79956 0 ]xsh95.222 45.804 mo
97.222 45.804 li
97.222 15.495 li
95.222 15.495 li
cp
null null set_ucrbg
.938044 .755325 .19155 rgb
f
131.406 46.924 mo
133.406 46.924 li
133.406 13.893 li
131.406 13.893 li
cp
f
156.113 46.41 mo
158.113 46.41 li
158.113 14.033 li
156.113 14.033 li
cp
f
183.632 46.095 mo
185.632 46.095 li
185.632 15.458 li
183.632 15.458 li
cp
f
244.932 17.932 mo
244.932 46.248 li
244.932 46.512 245.038 46.769 245.225 46.956 cv
245.411 47.142 245.668 47.248 245.932 47.248 cv
258.792 47.248 li
258.792 59.973 li
245.603 59.973 li
245.339 59.973 245.082 60.08 244.895 60.266 cv
244.709 60.452 244.603 60.71 244.603 60.973 cv
244.603 135.225 li
246.603 135.225 li
246.603 61.973 li
259.792 61.973 li
260.055 61.973 260.313 61.866 260.499 61.68 cv
260.685 61.494 260.792 61.236 260.792 60.973 cv
260.792 46.248 li
260.792 45.985 260.685 45.728 260.499 45.541 cv
260.313 45.355 260.055 45.248 259.792 45.248 cv
246.932 45.248 li
246.932 17.932 li
244.932 17.932 li
null null set_ucrbg
.313969 .555667 .817834 rgb
f
3.3525 129.254 mo
3.3525 156.842 25.7185 179.209 53.3075 179.209 cv
80.8975 179.209 103.261 156.842 103.261 129.254 cv
103.261 101.666 80.8975 79.3 53.3075 79.3 cv
25.7185 79.3 3.3525 101.666 3.3525 129.254 cv
null null set_ucrbg
.729881 .73553 .746911 rgb
f
gsave
.059998 0 mo
260.792 0 li
260.792 179.644 li
.059998 179.644 li
cp
clp
3.3525 129.254 mo
2.8575 129.254 li
2.8578 157.115 25.4455 179.704 53.3075 179.704 cv
81.1715 179.704 103.755 157.115 103.756 129.254 cv
103.755 101.392 81.1705 78.805 53.3075 78.805 cv
25.4455 78.805 2.8578 101.392 2.8575 129.254 cv
3.8475 129.254 li
3.8477 115.595 9.3828 103.233 18.3345 94.281 cv
27.2865 85.33 39.6485 79.795 53.3075 79.795 cv
66.9675 79.795 79.3285 85.33 88.2805 94.281 cv
97.2315 103.233 102.765 115.595 102.766 129.254 cv
102.765 142.913 97.2315 155.275 88.2805 164.227 cv
79.3285 173.178 66.9675 178.714 53.3075 178.714 cv
39.6485 178.714 27.2865 173.178 18.3345 164.227 cv
9.3829 155.275 3.8477 142.913 3.8475 129.254 cv
3.3525 129.254 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
grestore
136.34 89.56 mo
100.846 143.017 li
101.671 143.565 li
137.164 90.108 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
124.37 72.413 mo
53.263 78.807 li
53.352 79.793 li
124.458 73.399 li
f
gsave
4.0127 129.201 mo
4.0127 156.538 26.379 178.697 53.967 178.697 cv
81.557 178.697 103.921 156.538 103.921 129.201 cv
103.921 101.865 81.557 79.704 53.967 79.704 cv
26.379 79.704 4.0127 101.865 4.0127 129.201 cv
clp
70.559 158.52 mo
69.417 161.042 68.915 163.303 68.915 165.357 cv
68.913 168.558 70.142 171.221 71.939 173.533 cv
74.637 177.002 78.605 179.753 81.858 182.644 cv
83.486 184.087 84.932 185.56 85.961 187.146 cv
86.99 188.734 87.605 190.42 87.606 192.349 cv
87.606 192.909 87.553 193.49 87.442 194.097 cv
87.257 195.106 87.17 196.092 87.17 197.05 cv
87.176 203.53 91.091 208.723 94.945 212.288 cv
98.807 215.857 102.646 217.827 102.67 217.84 cv
103.122 216.959 li
103.122 216.959 103.069 216.932 102.961 216.873 cv
102.149 216.435 98.417 214.325 94.914 210.893 cv
91.405 207.457 88.156 202.727 88.16 197.05 cv
88.16 196.151 88.241 195.226 88.416 194.276 cv
88.538 193.613 88.596 192.971 88.596 192.349 cv
88.597 189.484 87.355 187.084 85.559 184.957 cv
82.862 181.762 78.907 179.085 75.66 176.068 cv
74.037 174.562 72.592 172.978 71.561 171.227 cv
70.53 169.475 69.906 167.565 69.905 165.357 cv
69.905 163.466 70.366 161.348 71.461 158.928 cv
70.559 158.52 li
f
22.941 159.828 mo
24.034 162.246 24.494 164.361 24.494 166.25 cv
24.492 169.191 23.385 171.615 21.677 173.819 cv
19.117 177.123 15.198 179.859 11.88 182.799 cv
10.221 184.272 8.71 185.8 7.603 187.507 cv
6.495 189.211 5.796 191.107 5.797 193.255 cv
5.797 193.875 5.855 194.516 5.976 195.178 cv
5.977 195.181 li
5.976 195.178 li
6.151 196.128 6.232 197.052 6.232 197.95 cv
6.238 204 2.538 208.982 -1.222 212.459 cv
-3.099 214.195 -4.981 215.55 -6.39 216.468 cv
-7.095 216.926 -7.682 217.276 -8.091 217.511 cv
-8.296 217.628 -8.456 217.716 -8.564 217.775 cv
-8.672 217.833 -8.726 217.86 -8.726 217.861 cv
-8.273 218.741 li
-8.249 218.728 -4.41 216.756 -.549999 213.186 cv
3.302 209.619 7.216 204.426 7.222 197.95 cv
7.222 196.992 7.135 196.008 6.95 194.999 cv
6.95 195 li
6.84 194.394 6.787 193.814 6.787 193.255 cv
6.789 190.684 7.883 188.527 9.592 186.493 cv
12.153 183.445 16.085 180.768 19.41 177.688 cv
21.072 176.146 22.585 174.496 23.69 172.623 cv
24.795 170.752 25.485 168.649 25.484 166.25 cv
25.485 164.198 24.983 161.939 23.843 159.42 cv
22.941 159.828 li
f
47.737 158.724 mo
47.743 170.578 51.132 177.734 51.115 184.147 cv
51.113 186.394 50.715 188.554 49.631 190.854 cv
48.545 193.154 46.763 195.596 43.977 198.355 cv
40.814 201.485 39.63 205.228 39.634 208.981 cv
39.639 214.337 41.984 219.742 44.308 223.866 cv
45.471 225.928 46.632 227.668 47.502 228.914 cv
47.937 229.536 48.299 230.035 48.55 230.385 cv
48.675 230.559 48.772 230.697 48.833 230.788 cv
48.892 230.879 li
48.893 230.882 li
49.133 230.759 li
48.88 230.852 li
48.893 230.882 li
49.133 230.759 li
48.88 230.852 li
49.302 230.696 li
48.853 230.696 li
48.856 230.799 48.874 230.829 48.88 230.852 cv
49.302 230.696 li
48.853 230.696 li
49.34 230.696 li
48.971 230.379 li
48.863 230.509 48.854 230.633 48.853 230.696 cv
49.34 230.696 li
48.971 230.379 li
49.342 230.697 li
49.342 230.208 li
49.256 230.203 49.081 230.246 48.971 230.379 cv
49.342 230.697 li
49.342 230.208 li
49.342 230.669 li
49.554 230.258 li
49.524 230.248 49.49 230.215 49.342 230.208 cv
49.342 230.669 li
49.554 230.258 li
49.416 230.524 li
49.588 230.279 li
49.554 230.258 li
49.416 230.524 li
49.588 230.279 li
49.584 230.275 li
49.54 230.242 49.389 230.103 49.169 229.888 cv
48.946 229.672 48.643 229.372 48.252 228.985 cv
47.556 229.689 li
48.031 230.159 48.376 230.501 48.615 230.73 cv
48.735 230.845 48.827 230.931 48.903 230.997 cv
49.017 231.087 li
49.1 231.138 li
49.142 231.155 49.186 231.192 49.342 231.198 cv
49.432 231.204 49.61 231.159 49.722 231.024 cv
49.833 230.892 49.843 230.763 49.843 230.696 cv
49.837 230.552 49.809 230.518 49.796 230.477 cv
49.737 230.35 49.687 230.285 49.6 230.154 cv
49.285 229.698 48.577 228.753 47.675 227.418 cv
44.971 223.425 40.613 215.992 40.624 208.981 cv
40.629 205.427 41.712 202 44.673 199.059 cv
47.516 196.243 49.376 193.711 50.526 191.277 cv
51.676 188.844 52.106 186.511 52.105 184.147 cv
52.087 177.384 48.721 170.39 48.727 158.724 cv
47.737 158.724 li
f
46.44 94.238 mo
47.43 94.238 li
47.43 79.704 li
46.44 79.704 li
cp
f
85.993 159.624 mo
46.683 92.154 li
7.37299 159.624 li
85.993 159.624 li
null null set_ucrbg
.354108 .343393 .635949 rgb
f
85.993 159.624 mo
86.421 159.375 li
46.683 91.171 li
6.51199 160.119 li
86.854 160.119 li
86.421 159.375 li
85.993 159.624 li
85.993 159.129 li
8.23399 159.129 li
46.683 93.137 li
85.565 159.873 li
85.993 159.624 li
85.993 159.129 li
85.993 159.624 li
null null set_ucrbg
.250788 .248193 .255125 rgb
f
grestore
gsave
45.13 134.57 mo
45.13 138.21 42.18 141.159 38.539 141.159 cv
34.9 141.159 31.95 138.21 31.95 134.57 cv
31.95 130.93 34.9 127.98 38.539 127.98 cv
42.18 127.98 45.13 130.93 45.13 134.57 cv
clp
31.95 127.98 mo
45.13 127.98 li
45.13 141.159 li
31.95 141.159 li
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[6.5894 0 0 6.5894 38.54 134.57 ]ct
/1 
<<
/ShadingType 3 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [1 ]
/N 4.977 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.5894 0 0 6.5894 38.54 134.57 ]ct
clp
/1 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~zzzzzzzzzzzzzzzzzzzzz!!**$!<E3%!<E3%!<N<(!WiE)!WrN,!s8W-"9\i1"9er4"U5/8"pYA<#RC\
B#mgqG$4@4M$k3XU%M'']&.oKe',)&o'c%T%(`=51)]Tk>+!;^N,:"Q^-R^Dn/1iJ-0etRC2E3]Y4?c"
r6UaI88k_uV;H-\!>$PEC@qKChD/aN<GC"[fK8,5AO-5cqS=cRRWi`P6\@fVqaNW&^g"t`OlgXTD~>
]
>>
0 0 0 0 0 1 [
]true true []
/Separation
RadialShade
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
grestore
45.13 134.57 mo
44.635 134.57 li
44.635 136.255 43.954 137.775 42.85 138.88 cv
41.745 139.983 40.224 140.664 38.539 140.664 cv
36.855 140.664 35.335 139.983 34.23 138.88 cv
33.127 137.775 32.445 136.255 32.445 134.57 cv
32.445 132.885 33.127 131.365 34.23 130.26 cv
35.335 129.157 36.855 128.476 38.539 128.475 cv
40.224 128.476 41.745 129.157 42.85 130.26 cv
43.954 131.365 44.635 132.885 44.635 134.57 cv
45.625 134.57 li
45.625 130.656 42.453 127.486 38.539 127.485 cv
34.627 127.486 31.456 130.656 31.455 134.57 cv
31.456 138.484 34.627 141.654 38.539 141.654 cv
42.453 141.654 45.625 138.484 45.625 134.57 cv
45.13 134.57 li
null null set_ucrbg
.259034 .259034 .262502 rgb
f
gsave
60.664 134.351 mo
60.664 139.796 56.249 144.212 50.805 144.212 cv
45.358 144.212 40.943 139.796 40.943 134.351 cv
40.943 128.904 45.358 124.49 50.805 124.49 cv
56.249 124.49 60.664 128.904 60.664 134.351 cv
clp
40.943 124.49 mo
60.664 124.49 li
60.664 144.212 li
40.943 144.212 li
cp
null null set_ucrbg
level3{
gsave
clp
[9.8603 0 0 9.8603 50.804 134.352 ]ct
/2 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8Muqrr)fp
rVc`orVl`krquWlqtU0fq#1$_rV6'aq"=U[o_eFRr:TRWo^;VIm/-><qX3PBm,e'/iqV`ppZ:0'in!e[
de)>?o@V.TeALe&^@04SmDZ?s^oQb2UZf%Rk,ad-UPe$#J_uZ9h26.*Jn<SY>h3[fdp>Mk:HQlc1!Cgi
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.8603 0 0 9.8603 50.804 134.352 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W)trr2lprVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVcZlr;?Kjr;?Kjr;?Kjr;?Hh
qtp9fqtp9fqtp9eqYL'bqYL'aq>'j]q"XXZq"XXYp\4FUp@e4Qp%A"Mo^qeIoCMSEo()AAnaQ&:n*f`5
mdBK0m-O**lg*j$l07EqkND!ijlPRaj5T(Wi8EMMhVR)Egt^Z=g=b03f@SU)e^`0udaHOjd*U+bcHa\Y
~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W)trVcZlr;?Kjr;?Kjr;?Kjr;?Hhqtp9fqtp6dqYL'bq>'g\q"XUXp\4FVp\4CTp@e1P
p%A"Mo^qeIoCDJBnaZ/=n*]W2mHj3*lg*m%l07Epk2tddj5].Xi8EMLhVHuAg=b-1f%&:!da?FfcHOJR
aN)<>_ns7*^:_(g\$iZMZ*1=3Wi2eiTqJ!IR[BD*OcPK[M2-e;J:;iiG&qV>C1^s`?!10*:.dr@4>ec?
~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W)trVcZlr;?Kjr;?Kjr;?Kiqtg-aq>'j^q"XUXp\4FVp\4CTp%@tLo^qeJo^qbHo()>@
nF5r9n*]W2mHj3*lg!d"ki_-kk2k^cj5].Xi8EMLh;$c=g"4g*eC2jnd*L"^bf\&J`l5m5_8*h!]XkY_
[^<?FYHFt-WMcSfTq@mFR?s2&OcPKZLk^S6IslZhG'%bDD/3fsA78hN>?Fm(:eaPQ77'7&3]JuQ0J4n+
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
grestore
60.664 134.351 mo
60.169 134.351 li
60.169 136.938 59.121 139.277 57.426 140.973 cv
55.729 142.669 53.392 143.717 50.805 143.717 cv
48.217 143.717 45.878 142.669 44.182 140.973 cv
42.486 139.277 41.438 136.938 41.438 134.351 cv
41.438 131.763 42.486 129.424 44.181 127.728 cv
45.878 126.033 48.216 124.985 50.805 124.985 cv
53.392 124.985 55.73 126.033 57.426 127.728 cv
59.121 129.424 60.169 131.763 60.169 134.351 cv
61.159 134.351 li
61.159 128.631 56.522 123.996 50.805 123.995 cv
45.085 123.996 40.449 128.631 40.448 134.351 cv
40.449 140.069 45.085 144.707 50.805 144.707 cv
56.523 144.707 61.159 140.069 61.159 134.351 cv
60.664 134.351 li
f
gsave
55.306 152.455 mo
53.441 152.455 51.758 151.701 50.536 150.479 cv
49.315 149.257 48.561 147.574 48.56 145.71 cv
48.561 143.846 49.314 142.163 50.536 140.942 cv
51.758 139.721 53.441 138.967 55.306 138.967 cv
55.949 138.967 56.57 139.056 57.158 139.224 cv
55.091 145.067 li
54.884 145.257 li
54.985 145.367 li
54.854 145.739 li
55.554 145.986 li
55.635 146.075 li
55.572 146.281 li
55.924 146.39 li
56.223 146.716 li
56.414 146.541 li
61.599 148.14 li
61.257 149.025 60.734 149.819 60.075 150.479 cv
58.852 151.701 57.17 152.455 55.306 152.455 cv
62.032 146.202 mo
59.267 145.349 li
61.951 144.554 li
62.016 144.929 62.05 145.316 62.05 145.71 cv
62.05 145.875 62.044 146.039 62.032 146.202 cv
60.293 142.98 mo
61.093 142.245 li
61.177 142.385 61.256 142.527 61.329 142.673 cv
60.293 142.98 li
57.424 142.926 mo
58.534 139.788 li
59.004 140.045 59.44 140.356 59.835 140.713 cv
57.424 142.926 li
clp
48.56 138.967 mo
62.05 138.967 li
62.05 152.455 li
48.56 152.455 li
cp
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[7.2395 0 0 7.2395 55.305 145.711 ]ct
/3 
<<
/ShadingType 3 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [.9 ]
/N 4.977 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.2395 0 0 7.2395 55.305 145.711 ]ct
clp
/3 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[.00392157 0 ]]
/Samples[
<~zzzzzzzzzzzzzzzzzzzzz!!!$#!<E3%!<E3%!<E3&!WiE)!WiE)!s8W-!s8Z/"9\i2"U,&5"pP8:#6tJ
>#RC_C#mq"H$O[@O%1NdW%hB3_&J5Wg',2,q()@]')&X>3*$$%@+!;^N,:"Q^-R^Gp/1iJ.0etRC2E3]
Y4?btq6UXC78kVlS;,^Ir=^,3?@Us+cCMn*4G'J@_J:iT5N/s-eR@KnEVQ$]&[(*ca_oKsIeC`R8~>
]
>>
0 0 0 0 0 1 [
]true true []
/Separation
RadialShade
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
grestore
62.545 145.71 mo
62.05 145.71 li
62.05 147.574 61.296 149.257 60.075 150.479 cv
58.853 151.701 57.17 152.455 55.306 152.455 cv
53.441 152.455 51.758 151.701 50.536 150.479 cv
49.315 149.257 48.561 147.574 48.561 145.71 cv
48.561 143.846 49.315 142.163 50.536 140.942 cv
51.758 139.721 53.441 138.967 55.306 138.967 cv
57.17 138.967 58.853 139.721 60.075 140.942 cv
61.296 142.163 62.05 143.846 62.05 145.71 cv
63.04 145.71 li
63.04 141.438 59.577 137.977 55.306 137.977 cv
51.033 137.977 47.571 141.438 47.571 145.71 cv
47.571 149.982 51.033 153.445 55.306 153.445 cv
59.577 153.445 63.04 149.982 63.04 145.71 cv
62.545 145.71 li
f
56.254 146.234 mo
75.923 90.634 li
74.523 90.139 li
54.854 145.739 li
56.254 146.234 li
f
61.021 101.09 mo
55.343 98.761 51.108 96.881 48.339 95.317 cv
46.955 94.537 45.939 93.833 45.31 93.229 cv
44.996 92.929 44.78 92.655 44.653 92.428 cv
44.525 92.198 44.484 92.024 44.484 91.878 cv
44.484 91.792 44.497 91.711 44.53 91.619 cv
44.617 91.526 li
44.728 91.439 45.002 91.318 45.415 91.241 cv
45.828 91.162 46.373 91.117 47.023 91.118 cv
49.327 91.115 52.923 91.665 57.255 92.697 cv
61.591 93.729 66.68 95.238 72.045 97.141 cv
79.169 99.666 85.479 102.425 89.979 104.864 cv
92.228 106.082 94.026 107.223 95.227 108.191 cv
95.827 108.672 96.276 109.113 96.551 109.469 cv
96.833 109.826 96.907 110.089 96.898 110.153 cv
96.894 110.188 li
96.894 110.187 li
96.807 110.28 li
96.696 110.367 96.421 110.488 96.008 110.565 cv
95.595 110.645 95.05 110.689 94.399 110.689 cv
92.545 110.69 89.847 110.335 86.607 109.656 cv
83.366 108.978 79.574 107.979 75.484 106.703 cv
75.041 108.121 li
79.171 109.409 83.003 110.419 86.303 111.11 cv
89.606 111.8 92.366 112.172 94.399 112.174 cv
95.355 112.172 96.15 112.095 96.806 111.897 cv
97.134 111.797 97.431 111.666 97.692 111.472 cv
97.952 111.281 98.178 111.012 98.293 110.684 cv
98.293 110.683 li
98.355 110.511 98.383 110.33 98.383 110.153 cv
98.375 109.557 98.103 109.056 97.726 108.561 cv
97.053 107.698 95.949 106.797 94.455 105.798 cv
89.981 102.822 81.975 99.088 72.542 95.742 cv
67.131 93.822 61.997 92.299 57.599 91.253 cv
53.196 90.207 49.545 89.635 47.023 89.633 cv
46.068 89.634 45.272 89.712 44.617 89.909 cv
44.289 90.01 43.992 90.141 43.731 90.334 cv
43.471 90.525 43.245 90.795 43.13 91.123 cv
43.044 91.365 42.998 91.621 42.999 91.878 cv
42.998 92.323 43.133 92.756 43.357 93.154 cv
43.753 93.852 44.404 94.481 45.298 95.144 cv
46.641 96.134 48.555 97.187 51.075 98.388 cv
53.594 99.588 56.718 100.929 60.457 102.464 cv
61.021 101.09 li
f
71.461 107.82 mo
73.585 109.258 74.904 110.386 76.549 111.728 cv
78.779 104.576 li
78.007 104.686 74.937 104.922 72.373 104.897 cv
69.627 104.874 67.191 104.682 65.658 104.407 cv
67.076 105.053 69.189 106.28 71.461 107.82 cv
f
56.223 146.716 mo
84.897 120.395 li
83.558 118.937 li
54.884 145.257 li
56.223 146.716 li
null null set_ucrbg
.313969 .555667 .817834 rgb
f
86.301 115.01 mo
83.221 116.495 81.038 117.263 78.39 118.261 cv
85.145 125.62 li
85.534 124.655 87.317 120.957 89.062 118.017 cv
90.926 114.867 92.778 112.186 94.12 110.602 cv
92.427 111.804 89.598 113.419 86.301 115.01 cv
f
76.887 152.855 mo
62.547 148.432 li
62.777 147.821 62.932 147.173 63 146.5 cv
77.471 150.963 li
76.887 152.855 li
null null set_ucrbg
.29138 .421992 .694985 rgb
f
gsave
61.599 148.14 mo
56.414 146.541 li
56.973 146.028 li
59.267 145.349 li
62.032 146.202 li
61.983 146.881 61.834 147.532 61.599 148.14 cv
clp
56.414 145.349 mo
62.032 145.349 li
62.032 148.14 li
56.414 148.14 li
cp
null null set_ucrbg
level3{
gsave
clp
[7.2395 0 0 7.2395 55.305 145.711 ]ct
/4 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Xip%4bNl:Rl`J@rXip%4bNl:Rl`J@rXip%4bNl:Rl`J@rXip%4bNl:Rl`J@rXip%4bNl:Rl`A7oXNKh0
b3H(NlE&.nXNKh0b3H"Jl)MhhWQ42$a60GBk,?;]W5dqs`T=#9jJKlUVShDi_r@K.i1n*FU;,NX^>,Bo
gRl+2S[m@B\(-qTe!RJfQE\VuXiZ^*`fI(9NMXFJTt?#L[XspPI[$p\OJd5YTlGdUCk%[^H&Z6QKj/AA
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.2395 0 0 7.2395 55.305 145.711 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)XK8M)
XK8M)XK8M)XK8M)XK8J'X/i;%X/i;%X/i;%X/i;%X/i;%X/i;%WiE%tWMukrWMuhpW2QYnW2QYnW2QVl
Vl-GjVl-GiVP^5fVP^5eV5:#bV5:#aUnjf]USFTYU8"BUTqS0QTV.sMT:_aISt2FBS=H+=S!oe6R@'A.
Q^=#(Q'ISuPEM&jOH>NaNfK*YN/NUOM2-h>KS+o/JUi6!I=-EhH?aXWFE;JBE,TW1CMIQsAn>I]?sd2E
~>
<~b0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lL
b0%lLb0%lLb0%lLb0%iJaiVZHaiVZHaiVZHaiVZHaiVZHaiVZHaN2EBa2c6@a2c3>`l?$<`l?$<`l?!:
`Pog8`Pog7`5KU3_o'C0_o'C/_SX1,_SO((^qdb#^V@Ot^:q=p]tD"i]=Y\d]",A]\@8rU[^ENM['R*E
ZE^X<YHG"0XK/A$WMuhpVl$;eUnaZXTV%gHS=>t8R$X)&PEM&iO,]*VM26q@KS+i+IXQQhG^":OEH#f4
~>
<~lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["lK[["
lK[["lK[["lK[["lK[Wul07Hsl07Hsl07Hsl07Hsl07Hsl07Hsl07Eqkih6okND!ik2tggk2tdejlPRa
jQ,C_jQ,C_jQ,C^j5]1Zio8tViSibSiS`YOhr!>JhVI#Cgt^]>gY:K:g=b03f[na+f%&=#eC2mpdEp4b
cHa\Zbfe/NaN)<?`Pf[3_SO%'^V.:l]"#5X[C!6EYck11X/`+rVPKu]TV%dFR[BG,PECreN/EFGKS"`'
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
grestore
62.547 148.432 mo
61.599 148.14 li
61.834 147.532 61.983 146.881 62.032 146.202 cv
63 146.5 li
62.932 147.173 62.777 147.821 62.547 148.432 cv
null null set_ucrbg
.354523 .418222 .491337 rgb
f
gsave
55.924 146.39 mo
55.572 146.281 li
55.635 146.075 li
55.924 146.39 li
clp
55.572 146.075 mo
55.924 146.075 li
55.924 146.39 li
55.572 146.39 li
cp
null null set_ucrbg
level3{
gsave
clp
[7.2395 0 0 7.2395 55.305 145.711 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.2395 0 0 7.2395 55.305 145.711 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
grestore
56.414 146.541 mo
55.924 146.39 li
55.635 146.075 li
56.155 144.389 li
56.416 144.469 li
56.885 146.054 li
56.973 146.028 li
56.414 146.541 li
null null set_ucrbg
.313969 .555667 .817834 rgb
f
93.199 156.861 mo
91.219 156.513 88.112 156.273 84.595 156.24 cv
79.883 148.153 li
81.567 149.523 83.158 150.796 85.447 152.336 cv
88.484 154.38 91.307 156.007 93.199 156.861 cv
null null set_ucrbg
.566438 .664646 .770974 rgb
f
75.703 156.692 mo
76.887 152.855 li
78.476 147.704 li
83.448 156.238 li
80.216 156.264 76.654 156.554 75.703 156.692 cv
null null set_ucrbg
.29138 .421992 .694985 rgb
f
84.594 156.24 mo
84.478 156.239 84.361 156.238 84.244 156.237 cv
84.131 156.237 84.019 156.236 83.905 156.236 cv
83.753 156.236 83.601 156.237 83.447 156.238 cv
78.475 147.704 li
78.647 147.147 li
79.071 147.491 79.479 147.825 79.882 148.153 cv
84.594 156.24 li
null null set_ucrbg
.350839 .414458 .487525 rgb
f
75.457 140.556 mo
74.431 138.795 li
81.783 136.619 li
82.345 138.518 li
75.457 140.556 li
null null set_ucrbg
.428113 .613846 .784695 rgb
f
62.906 144.271 mo
62.782 143.61 62.573 142.978 62.292 142.388 cv
73.453 139.085 li
74.479 140.846 li
62.906 144.271 li
null null set_ucrbg
.268443 .475087 .742362 rgb
f
74.48 140.846 mo
73.454 139.085 li
74.431 138.795 li
75.457 140.556 li
74.48 140.846 li
null null set_ucrbg
.337599 .486543 .620557 rgb
f
gsave
59.267 145.349 mo
58.103 144.99 li
60.293 142.98 li
61.329 142.673 li
61.624 143.256 61.836 143.888 61.951 144.554 cv
59.267 145.349 li
clp
58.103 142.673 mo
61.951 142.673 li
61.951 145.349 li
58.103 145.349 li
cp
null null set_ucrbg
level3{
gsave
clp
[7.2395 0 0 7.2395 55.305 145.711 ]ct
/5 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~H*6(NY2FT.i-DK`H*6(NY2FT.i-DK`H*6(NY2FT.i-DK`H*6(NY2FT.i-DK`H*6(NY2FT.i-DK`H*6(N
Y2FT.i-;B\GcfhIXkn<)hKZ0ZGHBVEXPJ*%h05pTGH9MCX4qj!gNKUNG,a/<WS)EmfQF.FFJm]3Vq,se
eT7S:F/@?+Usa:YcuGf+E1tNpTZh;Fb&*]jCn&F[RD`g+_.]+JAs9i;OLSe\Zselt?AGUeKW&%(UK2c6
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.2395 0 0 7.2395 55.305 145.711 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IX
G^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+IXG^+FVGB\7TGB\7TGB\7TGB\7TGB\4RG'8%PG'8%PG'8%P
G'8%PG'8%PG'8%PG'8%OF`hhLF`hhLF`hhKFEDVHFEDVGF)uDDF)uDDF)uDCEcQ2@EcQ2?EH,u<EH,u;
E,]c8Df9Q4DJj?0D/F-,Ci!p(CMR^$C2.HsBP;'mB4kggAS#C_@q0"Y@U`bS?sm>J?!U]?>?b96=BJX*
~>
<~Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\\+XK8M)XK8M)XK8M)XK8M)XK8J'X/i;%X/i;%X/i8#
WiE)!WiE)!WiE)!WiE(uWMukqW2QYnW2QYmVl-GjVl-GiVP^5fVP^5eV5:#aUnjf^Unjf]USFTYU8"BU
TqS0RTV.sNT:_^HSXl=BS=H(<R[TY4R$a5,QBmf$Pa%AqP*(lgO,o<]NK&mTMM[.EL5(D8K7\Z)Isufn
~>
<~hr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>K
hr!>Khr!>Khr!>Khr!>Khr!>Khr!>Khr!>KhVR)Eh;-oCh;-oCh;-oCh;-oCh;-lAgt^]?gt^]?gt^Z=
gY:K;gY:K:g=k97g=k96g"G'2f\"j/f\"j.f@SX+f@JO'e^`4#e^`4"eC<!se'ldodaHRkdEp7dcd0q_
cHa\Zbfn;TbKJ&NaiVWFa2c3>`Pod6_ns:,^q[Xu]tD"i]",A]\$i]OZa6sBYck42X/`.tVl$;dU7n6P
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
grestore
61.951 144.554 mo
61.836 143.888 61.624 143.256 61.329 142.673 cv
62.292 142.388 li
62.573 142.978 62.781 143.61 62.906 144.271 cv
61.951 144.554 li
f
58.103 144.99 mo
56.415 144.469 li
56.322 144.155 li
60.293 142.98 li
58.103 144.99 li
null null set_ucrbg
.313969 .555667 .817834 rgb
f
gsave
56.973 146.028 mo
58.103 144.99 li
59.267 145.349 li
56.973 146.028 li
clp
56.973 144.99 mo
59.267 144.99 li
59.267 146.028 li
56.973 146.028 li
cp
null null set_ucrbg
level3{
gsave
clp
[7.2395 0 0 7.2395 55.305 145.711 ]ct
/6 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~>GBhUU=rhGg0:<*>GBhUU=rhGg0:<*>GBhUU=rhGg0:<*>GBhUU=rhGg0:<*>GBhUU=rhGg0:<*>GBhU
U=rhGg0:<*>GBhUU=rhFfit0'>G9_SU"NVBfNOs#>+jMOT\*G?f34fu>+aALT@R/:eQJKn=e=,GS^U]2
do`-g=Idc@S'b?-crZ[^=..?7R*AZubZ0tO<L([*PfQgf``&&=;j"ppO2+SO^/0d$:Pu\WLpp'4ZqH%V
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.2395 0 0 7.2395 55.305 145.711 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5
>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>'3=]nm1
=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]nm0=BJ[-=BJ[-=BJ[-=BJ[,='&I)='&I)='&I)='&I)='&I(
<`W7%<`W7%<E3%!<E3%!<)cgr<)cgr;c?Un;c?Un;GpCj;GpCj;,L.d:JXb^:JXb^:/4MX9MA,R91qoN
~>
<~TqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0R
TqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS0RTqS-PTV.sNTV.sNTV.sNTV.pLT:_aJ
T:_aJT:_aJT:_aISt;OFSt;OFSt;OFSt;OESXl=BSXl=BSXl=AS=H+=S"#n:S"#n:S"#n9R[T\6R[T\5
R@0J2R$a8.Q^=&*QBmi&Q'IW"Pa%DsPEV2oP*1ukOcbcgOH>NaNfK*YN/W^SMi3IMM2@%ELPLV=KnY24
~>
<~g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3
g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G'3g"G$1f\"j/f\"j/f\"j/f\"g-f@SX+
f@SX+f@SX+f@SX*f%/F'f%/F&e^`4#e^`4"eC<!se'ldpe'ldodaHRldaHRkdF$@gd*U.dd*U.ccd0q_
cHa_\c-=MXbfn;TbKJ&NaiVZHaN2HDa2c3>`Pod6_o'@._83q&^V@Ls]tM(k]=YYb\@B#W[^NTNZa6sB
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
grestore
56.884 146.054 mo
56.415 144.469 li
58.103 144.99 li
56.972 146.028 li
56.884 146.054 li
f
83.485 142.368 mo
82.345 138.518 li
81.783 136.619 li
80.65 132.79 li
83.467 133.058 85.767 133.326 89.186 133.345 cv
89.351 133.346 89.515 133.346 89.679 133.346 cv
93.137 133.346 96.189 133.141 98.146 132.82 cv
96.244 133.653 93.403 135.248 90.344 137.259 cv
87.486 139.134 84.26 141.674 83.485 142.368 cv
null null set_ucrbg
.428113 .613846 .784695 rgb
f
.059998 8.5 mo
259.792 8.5 li
259.792 0 li
.059998 0 li
cp
null null set_ucrbg
1 1 1 rgb
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 ]]
] del_res
/PWYLJR+MT-Extra*1 uf/PWYLJR+MT-Extra uf/DLGQMX+MT-Extra uf/PWYLJQ+TimesNewRomanPS-BoldMT*1 uf/PWYLJQ+TimesNewRomanPS-BoldMT uf/JIWAAA+TimesNewRomanPS-BoldMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
